<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Text Generation on Max Woolf&#39;s Blog</title><link>https://minimaxir.com/categories/text-generation/</link><description>Recent content in Text Generation on Max Woolf&#39;s Blog</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright Max Woolf &amp;copy; {year}</copyright><lastBuildDate>Wed, 04 Sep 2019 08:00:00 -0700</lastBuildDate><atom:link href="https://minimaxir.com/categories/text-generation/index.xml" rel="self" type="application/rss+xml"/><item><title>How To Make Custom AI-Generated Text With GPT-2</title><link>https://minimaxir.com/2019/09/howto-gpt2/</link><pubDate>Wed, 04 Sep 2019 08:00:00 -0700</pubDate><guid>https://minimaxir.com/2019/09/howto-gpt2/</guid><description>
&lt;p&gt;In February 2019, &lt;a href=&#34;https://openai.com&#34; target=&#34;_blank&#34;&gt;OpenAI&lt;/a&gt; released &lt;a href=&#34;https://openai.com/blog/better-language-models/&#34; target=&#34;_blank&#34;&gt;a paper&lt;/a&gt; describing GPT-2, a AI-based text-generation model based on the &lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34; target=&#34;_blank&#34;&gt;Transformer architecture&lt;/a&gt; and trained on massive amounts of text all around the internet. From a text-generation perspective, the included demos were very impressive: the text is coherent over a long horizon, and grammatical syntax and punctuation are near-perfect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/openai-demo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;At the same time, the Python code which allowed anyone to download the model (albeit smaller versions out of concern the full model can be abused to mass-generate fake news) and the &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; code to load the downloaded model and generate predictions was &lt;a href=&#34;https://github.com/openai/gpt-2&#34; target=&#34;_blank&#34;&gt;open-sourced on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Neil Shepperd created &lt;a href=&#34;https://github.com/nshepperd/gpt-2&#34; target=&#34;_blank&#34;&gt;a fork&lt;/a&gt; of OpenAI&amp;rsquo;s repo which contains additional code to allow &lt;em&gt;finetuning&lt;/em&gt; the existing OpenAI model on custom datasets. A &lt;a href=&#34;https://github.com/ak9250/gpt-2-colab&#34; target=&#34;_blank&#34;&gt;notebook&lt;/a&gt; was created soon after, which can be copied into &lt;a href=&#34;https://colab.research.google.com&#34; target=&#34;_blank&#34;&gt;Google Colaboratory&lt;/a&gt; and clones Shepperd&amp;rsquo;s repo to finetune GPT-2 backed by a free GPU. From there, the proliferation of GPT-2 generated text took off: researchers such as Gwern Branwen made &lt;a href=&#34;https://www.gwern.net/GPT-2&#34; target=&#34;_blank&#34;&gt;GPT-2 Poetry&lt;/a&gt; and Janelle Shane made &lt;a href=&#34;https://aiweirdness.com/post/183471928977/dd-character-bios-now-making-slightly-more&#34; target=&#34;_blank&#34;&gt;GPT-2 Dungeons and Dragons character bios&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I waited to see if anyone would make a tool to help streamline this finetuning and text generation workflow, a la &lt;a href=&#34;https://github.com/minimaxir/textgenrnn&#34; target=&#34;_blank&#34;&gt;textgenrnn&lt;/a&gt; which I had made for recurrent neural network-based text generation. Months later, no one did. So I did it myself. Enter &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple&#34; target=&#34;_blank&#34;&gt;gpt-2-simple&lt;/a&gt;, a Python package which wraps Shepperd&amp;rsquo;s finetuning code in a functional interface and adds &lt;em&gt;many&lt;/em&gt; utilities for model management and generation control.&lt;/p&gt;
&lt;p&gt;Thanks to gpt-2-simple and &lt;a href=&#34;https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce&#34; target=&#34;_blank&#34;&gt;this Colaboratory Notebook&lt;/a&gt;, you can easily finetune GPT-2 on your own dataset with a simple function, and generate text to your own specifications!&lt;/p&gt;
&lt;h2 id=&#34;how-gpt-2-works&#34;&gt;How GPT-2 Works&lt;/h2&gt;
&lt;p&gt;OpenAI has released three flavors of GPT-2 models to date: the &amp;ldquo;small&amp;rdquo; 124M parameter model (500MB on disk), the &amp;ldquo;medium&amp;rdquo; 355M model (1.5GB on disk), and recently the 774M model (3GB on disk). These models are &lt;em&gt;much&lt;/em&gt; larger than what you see in typical AI tutorials and are harder to wield: the &amp;ldquo;small&amp;rdquo; model hits GPU memory limits while finetuning with consumer GPUs, the &amp;ldquo;medium&amp;rdquo; model requires additional training techniques before it could be finetuned on server GPUs without going out-of-memory, and the &amp;ldquo;large&amp;rdquo; model &lt;em&gt;cannot be finetuned at all&lt;/em&gt; with current server GPUs before going OOM, even with those techniques.&lt;/p&gt;
&lt;p&gt;The actual Transformer architecture GPT-2 uses is very complicated to explain (here&amp;rsquo;s a &lt;a href=&#34;http://www.peterbloem.nl/blog/transformers&#34; target=&#34;_blank&#34;&gt;great lecture&lt;/a&gt;). For the purposes of finetuning, since we can&amp;rsquo;t modify the architecture, it&amp;rsquo;s easier to think of GPT-2 as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Black_box&#34; target=&#34;_blank&#34;&gt;black box&lt;/a&gt;, taking in inputs and providing outputs. Like &lt;a href=&#34;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&#34; target=&#34;_blank&#34;&gt;previous forms of text generators&lt;/a&gt;, the inputs are a sequence of tokens, and the outputs are the probability of the next token in the sequence, with these probabilities serving as weights for the AI to pick the next token in the sequence. In this case, both the input and output tokens are &lt;a href=&#34;https://en.wikipedia.org/wiki/Byte_pair_encoding&#34; target=&#34;_blank&#34;&gt;byte pair encodings&lt;/a&gt;, which instead of using character tokens (slower to train but includes case/formatting) or word tokens (faster to train but does not include case/formatting) like most RNN approaches, the inputs are &amp;ldquo;compressed&amp;rdquo; to the shortest combination of bytes including case/formatting, which serves as a compromise between both approaches but unfortunately adds randomness to the final generation length. The byte pair encodings are later decoded into readable text for human generation.&lt;/p&gt;
&lt;p&gt;The pretrained GPT-2 models were trained on websites linked from &lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;. As a result, the model has a very strong grasp of the English language, allowing this knowledge to transfer to other datasets and perform well with only a minor amount of additional finetuning. Due to the English bias in encoder construction, languages with non-Latin characters like Russian and &lt;a href=&#34;https://en.wikipedia.org/wiki/CJK_characters&#34; target=&#34;_blank&#34;&gt;CJK&lt;/a&gt; will perform poorly in finetuning.&lt;/p&gt;
&lt;p&gt;When finetuning GPT-2, I recommend using the 124M model (the default) as it&amp;rsquo;s the best balance of speed, size, and creativity. If you have large amounts of training data (&amp;gt;10 MB), then the 355M model may work better.&lt;/p&gt;
&lt;h2 id=&#34;gpt-2-simple-and-colaboratory&#34;&gt;gpt-2-simple And Colaboratory&lt;/h2&gt;
&lt;p&gt;In order to better utilize gpt-2-simple and showcase its features, I created my &lt;a href=&#34;https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce&#34; target=&#34;_blank&#34;&gt;own Colaboratory Notebook&lt;/a&gt;, which can be copied into your own Google account. A Colaboratory Notebook is effectively a &lt;a href=&#34;https://jupyter.org&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook&lt;/a&gt; running on a free (w/ a Google Account) virtual machine with an Nvidia server GPU attached (&lt;a href=&#34;https://twitter.com/BasedBlue/status/1164732922953379841&#34; target=&#34;_blank&#34;&gt;randomly&lt;/a&gt; a K80 or a T4; T4 is ideal) that normally can be cost-prohibitive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gpu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once open, the first cell (run by pressing Shift+Enter in the cell or mousing-over the cell and pressing the &amp;ldquo;Play&amp;rdquo; button) of the notebook installs gpt-2-simple and its dependencies, and loads the package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/imports.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Later in the notebook is &lt;code&gt;gpt2.download_gpt2()&lt;/code&gt; which downloads the requested model type to the Colaboratory VM (the models are hosted on Google&amp;rsquo;s servers, so it&amp;rsquo;s a &lt;em&gt;very&lt;/em&gt; fast download).&lt;/p&gt;
&lt;p&gt;Expanding the Colaboratory sidebar reveals a UI that you can use to upload files. For example, the &lt;a href=&#34;https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt&#34; target=&#34;_blank&#34;&gt;tinyshakespeare dataset&lt;/a&gt; (1MB) provided with the original &lt;a href=&#34;https://github.com/karpathy/char-rnn&#34; target=&#34;_blank&#34;&gt;char-rnn implementation&lt;/a&gt;. Upload a text file via the UI (you can drag and drop), run the &lt;code&gt;file_name = &#39;&amp;lt;xxx&amp;gt;&#39;&lt;/code&gt; cell with your filename changed in the cell.&lt;/p&gt;
&lt;p&gt;Now we can start finetuning! This finetuning cell loads the specified dataset and trains for the specified number of steps (the default of 1,000 steps is enough to allow distinct text to emerge and takes about 45 minutes, but you can increase the number of steps if necessary).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/finetuning.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;While the model is finetuning, the average training loss is output every-so-often to the cell. The &lt;em&gt;absolute value&lt;/em&gt; of the loss is not important (the output text quality is subjective), but if the average loss stops decreasing, that&amp;rsquo;s a sign the model has converged and additional training may not help improve the model.&lt;/p&gt;
&lt;p&gt;By default, your model is saved in the &lt;code&gt;checkpoint/run1&lt;/code&gt; folder, and you&amp;rsquo;ll need to use that folder to load the model as well (you can specify the &lt;code&gt;run_name&lt;/code&gt; when using other functions categorize finetuned models). If you want to export the model from Colaboratory, it&amp;rsquo;s recommended you do so via &lt;a href=&#34;https://www.google.com/drive/&#34; target=&#34;_blank&#34;&gt;Google Drive&lt;/a&gt; (as Colaboratory does not like exporting large files). Run the &lt;code&gt;gpt2.mount_gdrive()&lt;/code&gt; cell to mount your Google Drive in the Colaboratory VM, then run the &lt;code&gt;gpt2.copy_checkpoint_to_gdrive()&lt;/code&gt; cell. You can then download the compressed model folder from Google Drive and run the model wherever you want. Likewise, you can use the &lt;code&gt;gpt2.copy_checkpoint_from_gdrive()&lt;/code&gt; cell to retrieve a stored model and generate in the notebook.&lt;/p&gt;
&lt;p&gt;Speaking of generation, once you have a finetuned model, you can now generate custom text from it! By default, the &lt;code&gt;gpt2.generate()&lt;/code&gt; function will generate as much text as possible (1,024 tokens) with a little bit of randomness. An important caveat: &lt;em&gt;you will not get good generated text 100% of the time&lt;/em&gt;, even with a properly trained model (the OpenAI demo above took &lt;em&gt;25 tries&lt;/em&gt; to get good text!).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gen_long.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also increase the &lt;code&gt;temperature&lt;/code&gt; to increase &amp;ldquo;creativity&amp;rdquo; by allowing the network to more likely make suboptimal predictions, provide a &lt;code&gt;prefix&lt;/code&gt; to specify how exactly you want your text to begin. There are many other useful configuration parameters, such as &lt;code&gt;top_p&lt;/code&gt; for &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple/issues/51&#34; target=&#34;_blank&#34;&gt;nucleus sampling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gen_long_params.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As a bonus, you can bulk-generate text with gpt-2-simple by setting &lt;code&gt;nsamples&lt;/code&gt; (number of texts to generate total) and &lt;code&gt;batch_size&lt;/code&gt; (number of texts to generate at a time); the Colaboratory GPUs can support a &lt;code&gt;batch_size&lt;/code&gt; of up to 20, and you can generate these to a text file with &lt;code&gt;gpt2.generate_to_file(file_name)&lt;/code&gt; with the same parameters as &lt;code&gt;gpt2.generate()&lt;/code&gt;. You can download the generated file locally via the sidebar, and use those to easily save and share the generated texts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce&#34; target=&#34;_blank&#34;&gt;The notebook&lt;/a&gt; has many more functions as well, with more parameters and detailed explanations! The &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple&#34; target=&#34;_blank&#34;&gt;gpt-2-simple README&lt;/a&gt; lists additional features of gpt-2-simple if you want to use the model outside the notebook.&lt;/p&gt;
&lt;p&gt;(NB: Currently, you&amp;rsquo;ll need to reset the Notebook via Runtime → Restart Runtime to finetune a different model/dataset or load a different finetuned model.)&lt;/p&gt;
&lt;h2 id=&#34;gpt-2-for-short-texts&#34;&gt;GPT-2 For Short Texts&lt;/h2&gt;
&lt;p&gt;A weakness of GPT-2 and other out-of-the-box AI text generators is that they are built for longform content, and keep on generating text until you hit the specified length. Another reason I wanted to make gpt-2-simple was to add explicit processing tricks to the generated text to work around this issue for short texts. In this case, there are two additional parameters that can be passed to &lt;code&gt;gpt2.generate()&lt;/code&gt;: &lt;code&gt;truncate&lt;/code&gt; and &lt;code&gt;include_prefix&lt;/code&gt;. For example, if each short text begins with a &lt;code&gt;&amp;lt;|startoftext|&amp;gt;&lt;/code&gt; token and ends with a &lt;code&gt;&amp;lt;|endoftext|&amp;gt;&lt;/code&gt;, then setting &lt;code&gt;prefix=&#39;&amp;lt;|startoftext|&amp;gt;&#39;&lt;/code&gt;, &lt;code&gt;truncate=&amp;lt;|endoftext|&amp;gt;&#39;&lt;/code&gt;, and &lt;code&gt;include_prefix=False&lt;/code&gt;, and &lt;code&gt;length&lt;/code&gt; is sufficient, then gpt-2-simple will automatically extract the shortform texts, even when generating in batches.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s finetune a GPT-2 model on Reddit submission titles. This query, when run on &lt;a href=&#34;https://console.cloud.google.com/bigquery&#34; target=&#34;_blank&#34;&gt;BigQuery&lt;/a&gt; (for free), returns the top 16,000 titles by score between January and March 2019 for a given Reddit subreddit (in this case, &lt;a href=&#34;https://www.reddit.com/r/AskReddit/&#34; target=&#34;_blank&#34;&gt;/r/AskReddit&lt;/a&gt;) + minor text preprocessing, which can be downloaded locally as a 1.3 MB CSV (Save Results → CSV [local file]):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;#standardSQL
SELECT
REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(title, &#39;&amp;amp;amp;&#39;, &#39;&amp;amp;&#39;), &#39;&amp;amp;lt;&#39;, &#39;&amp;lt;&#39;), &#39;&amp;amp;gt;&#39;, &#39;&amp;gt;&#39;), &#39;�&#39;, &#39;&#39;) AS title
FROM
`fh-bigquery.reddit_posts.*`
WHERE
_TABLE_SUFFIX BETWEEN &#39;2019_01&#39; AND &#39;2019_03&#39;
AND LENGTH(title) &amp;gt;= 8
AND LOWER(subreddit) = &#39;askreddit&#39;
ORDER BY
score DESC
LIMIT
16000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With gpt-2-simple, using a single-column CSV like the one generated above as the input dataset will automatically add &lt;code&gt;&amp;lt;|startoftext|&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;|endoftext|&amp;gt;&lt;/code&gt; tokens appropriately. Finetune a new GPT-2 model as normal, and then generate with those additional parameters mentioned above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gen_short.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth noting that despite a good amount of input data to the model, finetuned networks can easily &lt;em&gt;overfit&lt;/em&gt; on short form text: some of these example titles are very close to existing /r/AskReddit titles. Overfitting can be rectified by training for less time, or adding more input data. Make sure to double check that your generated text is unique!&lt;/p&gt;
&lt;p&gt;You can play with this Reddit-oriented variant in &lt;a href=&#34;https://colab.research.google.com/drive/1RugXCYDcMvSACYNt9j0kB6zzqRKzAbBn&#34; target=&#34;_blank&#34;&gt;this modified Colaboratory Notebook&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;making-gpt-2-apps&#34;&gt;Making GPT-2 Apps&lt;/h2&gt;
&lt;p&gt;There have already been cool, non-nefarious uses of GPT-2, such as Adam King&amp;rsquo;s &lt;a href=&#34;https://talktotransformer.com&#34; target=&#34;_blank&#34;&gt;TalkToTransformer&lt;/a&gt; which provides a UI for the 774M model (and has gone viral many times) and &lt;a href=&#34;https://tabnine.com&#34; target=&#34;_blank&#34;&gt;TabNine&lt;/a&gt;, which uses GPT-2 finetuned on GitHub code in order to create probabilistic code completion. On the &lt;a href=&#34;https://pytorch.org&#34; target=&#34;_blank&#34;&gt;PyTorch&lt;/a&gt; side, Huggingface has released a &lt;a href=&#34;https://github.com/huggingface/pytorch-transformers&#34; target=&#34;_blank&#34;&gt;Transformers client&lt;/a&gt; (w/ GPT-2 support) of their own, and also created apps such as &lt;a href=&#34;https://transformer.huggingface.co&#34; target=&#34;_blank&#34;&gt;Write With Transformer&lt;/a&gt; to serve as a text autocompleter.&lt;/p&gt;
&lt;p&gt;Many AI tutorials often show how to deploy a small model to a web service by using the &lt;a href=&#34;https://palletsprojects.com/p/flask/&#34; target=&#34;_blank&#34;&gt;Flask&lt;/a&gt; application framework. The problem with GPT-2 is that it&amp;rsquo;s such a huge model that most conventional advice won&amp;rsquo;t work well to get a performant app. And even if you do get it to run fast (e.g. by running the app on a GPU), it won&amp;rsquo;t be &lt;em&gt;cheap&lt;/em&gt;, especially if you want it to be resilient to a random surge of virality.&lt;/p&gt;
&lt;p&gt;With gpt-2-simple, the solution I came up with is &lt;a href=&#34;https://github.com/minimaxir/gpt-2-cloud-run&#34; target=&#34;_blank&#34;&gt;gpt-2-cloud-run&lt;/a&gt;; a small webapp intended to run GPT-2 via &lt;a href=&#34;https://cloud.google.com/run/&#34; target=&#34;_blank&#34;&gt;Google Cloud Run&lt;/a&gt; backed by gpt-2-simple. The advantage here is that Cloud Run only charges for compute used and can scale indefinitely if there&amp;rsquo;s a traffic surge; for casual use, it&amp;rsquo;s extremely cost effective compared to running a GPU 24/7. I&amp;rsquo;ve used Cloud Run to make a GPT-2 text generator for &lt;a href=&#34;https://minimaxir.com/apps/gpt2-reddit/&#34; target=&#34;_blank&#34;&gt;Reddit-wide submission titles&lt;/a&gt; and a GPT-2 generator for &lt;a href=&#34;https://minimaxir.com/apps/gpt2-mtg/&#34; target=&#34;_blank&#34;&gt;Magic: The Gathering cards&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/mtg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;attributing-ai-generated-text&#34;&gt;Attributing AI-Generated Text&lt;/h2&gt;
&lt;p&gt;One of the main reasons I developed textgenrnn and gpt-2-simple is to make AI text generation more &lt;em&gt;accessible&lt;/em&gt; as you do not need a strong AI or technical background to create fun stories. However, in the case of GPT-2, I&amp;rsquo;ve noticed an elevated amount of &amp;ldquo;I trained an AI to generate text&amp;rdquo; articles/Reddit posts/YouTube videos saying they used GPT-2 to train an AI, but not &lt;em&gt;how&lt;/em&gt; they trained the AI: especially suspicious since finetuning is not an out-of-the-box feature that OpenAI provides. The fact that Keaton Patti&amp;rsquo;s &lt;a href=&#34;https://twitter.com/KeatonPatti/status/1161284670601990146&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;I forced a bot&amp;rdquo; movie scripts&lt;/a&gt; (that aren&amp;rsquo;t written by a bot) frequently go megaviral due to that particular framing doesn&amp;rsquo;t help.&lt;/p&gt;
&lt;p&gt;Although it&amp;rsquo;s not legally required, I ask that anyone who shares generated text via gpt-2-simple add a link to the repo and/or Colaboratory notebook not just for attribution, but to &lt;em&gt;spread knowledge&lt;/em&gt; about the accessibility of AI text generation. It&amp;rsquo;s a technology that should be transparent, not obfuscated for personal gain.&lt;/p&gt;
&lt;h2 id=&#34;the-future-of-gpt-2&#34;&gt;The Future of GPT-2&lt;/h2&gt;
&lt;p&gt;Hopefully, this article gave you ideas on how to finetune and generate texts creatively. There&amp;rsquo;s still a &lt;em&gt;lot&lt;/em&gt; of untapped potential, and there are still many cool applications that have been untouched, and many cool datasets that haven&amp;rsquo;t been used for AI text generation. GPT-2 will likely be used more for mass-producing &lt;a href=&#34;https://twitter.com/Fred_Delicious/status/1166783214750445573&#34; target=&#34;_blank&#34;&gt;crazy erotica&lt;/a&gt; than fake news.&lt;/p&gt;
&lt;p&gt;However, GPT-2 and the Transformer architecture aren&amp;rsquo;t the end-game of AI text generation. Not by a long shot.&lt;/p&gt;</description></item><item><title>How to Quickly Train a Text-Generating Neural Network for Free</title><link>https://minimaxir.com/2018/05/text-neural-networks/</link><pubDate>Fri, 18 May 2018 09:00:00 -0700</pubDate><guid>https://minimaxir.com/2018/05/text-neural-networks/</guid><description>
&lt;p&gt;One of the more interesting applications of the neural network revolution is text generation. Most popular approaches are based off of Andrej Karpathy&amp;rsquo;s &lt;a href=&#34;https://github.com/karpathy/char-rnn&#34; target=&#34;_blank&#34;&gt;char-rnn architecture&lt;/a&gt;/&lt;a href=&#34;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt;, which teaches a recurrent neural network to be able to predict the next character in a sequence based on the previous &lt;em&gt;n&lt;/em&gt; characters. As a result, a sufficiently trained network can theoretically reproduce its input source material, but since properly-trained neural networks aren&amp;rsquo;t &lt;em&gt;perfect&lt;/em&gt;, the output can fall into a weird-but-good uncanny valley.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/textgenrnn_console.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Many internet tutorials for text-generation neural networks simply copy an existing char-rnn implementation while changing the input dataset. It&amp;rsquo;s one approach, but there&amp;rsquo;s an opportunity for improvement with modern deep learning tooling. Thanks to frameworks like &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/keras-team/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt;, I built &lt;a href=&#34;https://github.com/minimaxir/textgenrnn&#34; target=&#34;_blank&#34;&gt;textgenrnn&lt;/a&gt;, a &lt;a href=&#34;https://pypi.org/project/textgenrnn/#description&#34; target=&#34;_blank&#34;&gt;Python package&lt;/a&gt; which abstracts the process of creating and training such char-rnns to a &lt;em&gt;few lines of code&lt;/em&gt;, with numerous model architecture and training improvements such as &lt;a href=&#34;http://minimaxir.com/2017/04/char-embeddings/&#34; target=&#34;_blank&#34;&gt;character embeddings&lt;/a&gt;, attention-weighted averaging, and a decaying learning rate.&lt;/p&gt;
&lt;p&gt;A neat benefit of textgenrnn is that it can be easily used to train neural networks on a GPU very quickly, &lt;em&gt;for free&lt;/em&gt; using &lt;a href=&#34;https://colab.research.google.com/notebooks/welcome.ipynb&#34; target=&#34;_blank&#34;&gt;Google Colaboratory&lt;/a&gt;. I&amp;rsquo;ve &lt;a href=&#34;https://drive.google.com/file/d/1mMKGnVxirJnqDViH7BDJxFqWrsXlPSoK/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;created a notebook&lt;/a&gt; which lets you train your own network and generate text whenever you want with just a few clicks!&lt;/p&gt;
&lt;h2 id=&#34;your-first-text-generating-neural-network&#34;&gt;Your First Text-Generating Neural Network&lt;/h2&gt;
&lt;p&gt;Colaboratory is a notebook environment similar to &lt;a href=&#34;http://jupyter.org&#34; target=&#34;_blank&#34;&gt;Jupyter Notebooks&lt;/a&gt; used in other data science projects. However, Colaboratory notebooks are hosted in a short term virtual machine, with 2 vCPUs, 13GB memory, and a K80 GPU attached. For free. Normally, this configuration would &lt;a href=&#34;https://cloud.google.com/compute/pricing&#34; target=&#34;_blank&#34;&gt;cost&lt;/a&gt; $0.57/hr on Google Compute Engine; it sounds low, but adds up when you need to train model(s) for hours to get good results.&lt;/p&gt;
&lt;p&gt;First, I recommend copying the notebook to your own Drive so it&amp;rsquo;ll always be there (and switch to using Google Chrome if you aren&amp;rsquo;t). The Colaboratory VM contains Python 3 and common Python packages for machine learning such as TensorFlow. But you can install more packages directly in the notebook. Like textgenrnn! Just run this cell by clicking into the cell and click the &amp;ldquo;play&amp;rdquo; button (or use Shift + Enter) and it&amp;rsquo;ll take care of the rest:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/pip.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When training a new model, textgenrnn allows you to specify the size and complexity of the neural network with a wide variety of parameters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/config.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s keep these default parameters for now, so run that cell to load them into memory. Run the next cell, which prompts you to upload a file. &lt;em&gt;Any text file should work&lt;/em&gt;, even large text files! For this example, we&amp;rsquo;ll use a 1.1MB text file of Shakespeare plays also &lt;a href=&#34;https://github.com/karpathy/char-rnn/tree/master/data/tinyshakespeare&#34; target=&#34;_blank&#34;&gt;used in the char-rnn demos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/upload.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The next cell initializes an instance of textgenrnn and begins training a custom new text-generating neural network!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/train.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;textgenrnn automatically processes the input text into character sequences ready to train the network. After every 2 epochs (a full pass through the data), the network will generate sample text at different temperatures, which represent the &amp;ldquo;creativity&amp;rdquo; of the text (i.e. it allows the model to make increasingly suboptimal predictions, which can cause hilarity to ensue). I typically like generating text at a temperature of 0.5, but for very well-trained models, you can go up to 1.0.&lt;/p&gt;
&lt;p&gt;The quick model training speed comes from the VM&amp;rsquo;s GPU, which can perform the necessary mathematical operations much faster than with a CPU. However, in the case of recurrent neural networks, Keras recently added a &lt;a href=&#34;https://keras.io/layers/recurrent/#cudnnlstm&#34; target=&#34;_blank&#34;&gt;CuDNN implementation of RNNs&lt;/a&gt; like LSTMs, which can easily tap into the GPU-native code more easily and gain a &lt;em&gt;massive&lt;/em&gt; speed boost (&lt;a href=&#34;http://minimaxir.com/2017/11/benchmark-gpus/&#34; target=&#34;_blank&#34;&gt;about &lt;em&gt;7x as fast&lt;/em&gt;&lt;/a&gt;) compared to previous implementations! In all, for this example dataset and model architecture, training on a GPU took 5-6 minutes an epoch, while on a modern CPU, training took &lt;em&gt;1 hour and 24 minutes&lt;/em&gt; an epoch, a &lt;strong&gt;14x speedup&lt;/strong&gt; on the GPU!&lt;/p&gt;
&lt;p&gt;After training is complete, running the next cell will download three files: a &lt;code&gt;weights&lt;/code&gt; file, a &lt;code&gt;vocabulary&lt;/code&gt; file, and a &lt;code&gt;config&lt;/code&gt; file that are all needed to regenerate your model elsewhere.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/download.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For example, on your own personal computer. Just install textgenrnn + TensorFlow by inputting &lt;code&gt;pip3 install textgenrnn tensorflow&lt;/code&gt; into a terminal, change to the directory where the downloaded files are located, run &lt;code&gt;python3&lt;/code&gt;, and load the model using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textgenrnn import textgenrnn
textgen = textgenrnn(weights_path=&#39;colaboratory_weights.hdf5&#39;,
vocab_path=&#39;colaboratory_vocab.json&#39;,
config_path=&#39;colaboratory_config.json&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s that! No GPU necessary if you&amp;rsquo;re just generating text. You can generate samples (like during training) using &lt;code&gt;textgen.generate_samples()&lt;/code&gt;, generate a ton of samples at any temperature you like to a file using &lt;code&gt;textgen.generate_to_file()&lt;/code&gt;, or incorporate a generated text into a Python script (e.g. a Twitter bot) using &lt;code&gt;textgen.generate(1, return_as_list=True)[0]&lt;/code&gt; to store a text as a variable. You can view more of textgenrnn&amp;rsquo;s functions and capabilities in &lt;a href=&#34;https://github.com/minimaxir/textgenrnn/blob/master/docs/textgenrnn-demo.ipynb&#34; target=&#34;_blank&#34;&gt;this demo Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s some Shakespeare generated with a 50-minute-trained model at a temperature of 0.5:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LUCENTIO:
And then shall good grave to my wife thee;
Thou would the cause the brieved to me,
And let the place and then receives:
The rest you the foren to my ways him child,
And marry that will be a parties and so set me that be deeds
And then the heart and be so shall make the most as he and stand of seat.
GLOUCESTER:
Your father and madam, or shall for the people
And dead to make the truth, or a business
As we brother to the place her great the truth;
And that which to the smaster and her father,
I am I was see the sun have to the royal true.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not too bad, and it&amp;rsquo;s even close to &lt;a href=&#34;https://en.wikipedia.org/wiki/Iambic_pentameter&#34; target=&#34;_blank&#34;&gt;iambic pentameter&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;tweaking-the-model&#34;&gt;Tweaking the Model&lt;/h2&gt;
&lt;p&gt;The most important model configuration options above are &lt;code&gt;rnn_size&lt;/code&gt; and &lt;code&gt;rnn_layers&lt;/code&gt;: these determine the complexity of the network. Typically, you&amp;rsquo;ll see networks in tutorials be a single 128-cell or 256-cell network. However, textgenrnn&amp;rsquo;s architecture is slightly different as it has an attention layer which incorporates &lt;em&gt;all&lt;/em&gt; the preceding model layers. As a result, it&amp;rsquo;s much better to go deeper than wider (e.g. 4x128 is better than 1x512) unless you have a very large amount of text (&amp;gt;10MB). &lt;code&gt;rnn_bidirectional&lt;/code&gt; controls whether the recurrent neural network is bidirectional, that is, it processes the previous characters both forward &lt;em&gt;and&lt;/em&gt; backward (which works great if text follows specific rules, like Shakespeare&amp;rsquo;s character headings). &lt;code&gt;max_length&lt;/code&gt; determines the maximum number of characters for the network to use to predict the next character, which should be increased to let the network learn longer sequences, or decrease for shorter sequences.&lt;/p&gt;
&lt;p&gt;Training has a few helpful options as well. &lt;code&gt;num_epochs&lt;/code&gt; determines the number of full passes of the data; this can be tweaked if you want to train the model even more. &lt;code&gt;batch_size&lt;/code&gt; determines the number of model sequences to train in a step: typically, batch size for deep learning models is 32 or 128, but with a GPU, you can get a speed increase by saturating it with the given 1024 default. &lt;code&gt;train_size&lt;/code&gt; determines the proportion of character samples to train; setting it &lt;code&gt;&amp;lt; 1.0&lt;/code&gt; both speeds up each epoch, and prevents the model from cheating and being able to learn sequences verbatim. (You can set &lt;code&gt;&#39;validation&#39;: True&lt;/code&gt; to run the model on the unused data after each epoch to see if the model is overfitting).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try playing with the parameters more on a new text dataset.&lt;/p&gt;
&lt;h2 id=&#34;word-level-text-generation-with-reddit-data&#34;&gt;Word-Level Text Generation With Reddit Data&lt;/h2&gt;
&lt;p&gt;You might be asking &amp;ldquo;how do you obtain text data&amp;rdquo;? The popular text-generation use cases like lyric generation and movie scripts are copyright-protected so they&amp;rsquo;re harder to find, and even then, it might not be enough text data to train a new model upon (you typically want atleast 100,000 characters).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;, however, has &lt;em&gt;millions&lt;/em&gt; of submission titles which would be great to train for a model. I wrote a &lt;a href=&#34;https://github.com/minimaxir/subreddit-generator&#34; target=&#34;_blank&#34;&gt;helper script&lt;/a&gt; to automatically download the top &lt;em&gt;n&lt;/em&gt; Reddit submissions from a given subreddit over a given period of time. If you choose subreddits with similar linguistic styles in their titles, the subreddits will even blend together! Let&amp;rsquo;s play with the Top 20,000 Submissions in 2017 from each of &lt;a href=&#34;https://www.reddit.com/r/politics/&#34; target=&#34;_blank&#34;&gt;/r/politics&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/technology/&#34; target=&#34;_blank&#34;&gt;/r/technology&lt;/a&gt;, which results in a 3.3MB file: about 3x as much data as the Shakespeare plays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/reddit_data.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One last thing that textgenrnn can do that most char-rnn implementations can&amp;rsquo;t is generate a &lt;em&gt;word level&lt;/em&gt; model (thanks to Keras&amp;rsquo;s tokenizers), where the model uses the &lt;em&gt;n&lt;/em&gt; previous words/punctuation to predict the next word/punctuation. On the plus side, using only words prevents crazy typoes and since it predicts multiple &amp;ldquo;characters&amp;rdquo; at a time, &lt;code&gt;max_length&lt;/code&gt; can be reduced proportionally, dramatically speeding up training. There&amp;rsquo;s two downsides with this approach; since words are all lowercase and punctuation is its own token, the generated text cannot be immediately used without manual editing. Additionally, the model weights will be substantially larger than a character-level model since the word-level model has to store an embedding for each word (up to &lt;code&gt;max_words&lt;/code&gt;, which is 10,000 by default when the vocabulary size for a char-level model is 200-300).&lt;/p&gt;
&lt;p&gt;Another advantage of the Colaboratory notebook is that you can quickly adjust model parameters, upload a new file, and immediately start training it. We&amp;rsquo;ll set &lt;code&gt;&#39;line_delimited&#39;: True&lt;/code&gt; and &lt;code&gt;&#39;rnn_bidirectional&#39;: False&lt;/code&gt; since there aren&amp;rsquo;t specific rules. For word level training, let&amp;rsquo;s set &lt;code&gt;&#39;word_level&#39;: True&lt;/code&gt; and &lt;code&gt;&#39;max_length&#39;: 8&lt;/code&gt; to reflect the new training architecture. Since training length has been reduced to 1/5th, we can set &lt;code&gt;&#39;num_epochs&#39;: 50&lt;/code&gt; and &lt;code&gt;&#39;gen_epoch&#39;: 10&lt;/code&gt; to balance it out. Rerun the config cell to update parameters, upload the Reddit data file, and rerun training.&lt;/p&gt;
&lt;p&gt;The resulting model is much more well trained than the Shakespeare model, and here&amp;rsquo;s a few Reddit submission titles generated at a temperature of 1.0:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;report : 49 % of americans now believe all of the country ’ s effective
people like facebook like it &#39; s 650 of 1 %
uber accused of secretly - security popular service ( likely oklahoma )
equifax breach fallout : your salary is dead
sanders uses texas shooter &#39; s iphone sales
adobe videos will be used to sell the web
apple to hold cash for $ 500 service
fitbit just targeting solar energy
george bush &#39; s concept car ‘ goes for all the biggest controversy .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those look pretty good, although they may need a little editing before posting on social media.&lt;/p&gt;
&lt;h2 id=&#34;followup&#34;&gt;Followup&lt;/h2&gt;
&lt;p&gt;These examples only train the model for little time as a demo of textgenrnn&amp;rsquo;s fast learning; there&amp;rsquo;s nothing stopping you from increasing &lt;code&gt;num_epochs&lt;/code&gt; even more to further refine a model. However, from my experience, the training cell times out after &lt;strong&gt;4 hours&lt;/strong&gt;; set &lt;code&gt;num_epochs&lt;/code&gt; accordingly, although in my experience that&amp;rsquo;s all you need before the network converges.&lt;/p&gt;
&lt;p&gt;In practice, I used this Colaboratory notebook to train &lt;em&gt;many&lt;/em&gt; models for &lt;a href=&#34;https://www.reddit.com/r/SubredditNN/&#34; target=&#34;_blank&#34;&gt;/r/SubredditNN&lt;/a&gt;, a Reddit subreddit where only text-generating neural network bots trained on other subreddits. And the results are very funny:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/subredditnn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Although text generating neural networks aren&amp;rsquo;t at the point where they can &lt;a href=&#34;https://www.bloomberg.com/news/features/2018-05-17/i-tried-to-get-an-ai-to-write-this-story-paul-ford&#34; target=&#34;_blank&#34;&gt;write entire articles by themselves&lt;/a&gt;, there are still many opportunities to use it just for fun! And thanks to textgenrnn, it&amp;rsquo;s easy, fast, and cost-effective for anyone to do! Let me know if you make any interesting neural networks with textgenrnn and this Notebook!&lt;/p&gt;</description></item></channel></rss>