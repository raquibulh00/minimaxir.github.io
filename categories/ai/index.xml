<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on Max Woolf&#39;s Blog</title><link>https://minimaxir.com/categories/ai/</link><description>Recent content in AI on Max Woolf&#39;s Blog</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright Max Woolf &amp;copy; {year}</copyright><lastBuildDate>Mon, 30 Sep 2019 08:00:00 -0700</lastBuildDate><atom:link href="https://minimaxir.com/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>Experiments with Making Convincing AI-Generated Fake News</title><link>https://minimaxir.com/2019/09/ctrl-fake-news/</link><pubDate>Mon, 30 Sep 2019 08:00:00 -0700</pubDate><guid>https://minimaxir.com/2019/09/ctrl-fake-news/</guid><description>
&lt;p&gt;&lt;span&gt;&lt;style&gt;
blockquote {
padding-right: 1.25em !important;
}
&lt;/style&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/ctrl-fake-news/ctrl_demo_ani.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When &lt;a href=&#34;https://openai.com&#34; target=&#34;_blank&#34;&gt;OpenAI&lt;/a&gt; announced &lt;a href=&#34;https://openai.com/blog/better-language-models/&#34; target=&#34;_blank&#34;&gt;GPT-2&lt;/a&gt;, a robust text-generating AI model, they explicitly only released smaller, less robust versions of the model out of fear that the large model could be used to generate fake news. However, since OpenAI described most of the technical decisions needed to create the model &lt;a href=&#34;https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf&#34; target=&#34;_blank&#34;&gt;in the corresponding paper&lt;/a&gt;, it would be possible for others to create their own text generating Transformer models, and maybe even &lt;em&gt;improve&lt;/em&gt; on GPT-2 (with a sufficient budget!).&lt;/p&gt;
&lt;p&gt;In September, the &lt;a href=&#34;https://www.salesforce.com&#34; target=&#34;_blank&#34;&gt;Salesforce&lt;/a&gt; AI team released &lt;a href=&#34;https://github.com/salesforce/ctrl&#34; target=&#34;_blank&#34;&gt;CTRL&lt;/a&gt;, a Transformer-based text generating model with a twist; the model can generate text from specified domains by passing &lt;strong&gt;control codes&lt;/strong&gt; to the model. What caught my interest was a demo of domain style transfer in the &lt;a href=&#34;https://arxiv.org/abs/1909.05858&#34; target=&#34;_blank&#34;&gt;CTRL paper&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/ctrl-fake-news/ctrl_paper.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If the model is that robust to minor URL changes, what happens when you give it URLs that blatantly do not exist? Can the CTRL model create the &amp;ldquo;fake news&amp;rdquo; OpenAI was concerned about? Let&amp;rsquo;s put it to the test.&lt;/p&gt;
&lt;h2 id=&#34;an-overview-of-ctrl&#34;&gt;An Overview of CTRL&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;https://github.com/minimaxir/ctrl-gce&#34; target=&#34;_blank&#34;&gt;written a guide + scripts&lt;/a&gt; to setting the base CTRL model as cheaply as possible on Google Compute Engine with just a few commands. Additionally, the CTRL team has released a &lt;a href=&#34;https://colab.research.google.com/drive/1hVveBQShDru1Mjnhe4C21uQv4A2eH1tV&#34; target=&#34;_blank&#34;&gt;free Colaboratory Notebook&lt;/a&gt; which sets up and runs the CTRL model; however, the model is &lt;em&gt;so large&lt;/em&gt; it won&amp;rsquo;t fit into the memory of traditional GPUs, so the notebook does a trick to shrink it a bit which may impact generation performance.&lt;/p&gt;
&lt;p&gt;Like GPT-2, CTRL has a &lt;a href=&#34;https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html&#34; target=&#34;_blank&#34;&gt;Transformer&lt;/a&gt; architecture based on &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; and uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Byte_pair_encoding&#34; target=&#34;_blank&#34;&gt;byte pair encodings&lt;/a&gt; as its inputs and outputs, which are then decoded into readable text. CTRL has notable performance improvements as it&amp;rsquo;s trained on &lt;em&gt;three times as much data as GPT-2&lt;/em&gt;, including an &lt;a href=&#34;https://github.com/jcpeterson/openwebtext&#34; target=&#34;_blank&#34;&gt;open-sourced clone&lt;/a&gt; of GPT-2&amp;rsquo;s original dataset. And of course, it&amp;rsquo;s larger (1.6B hyperparameters) compared to the currently public GPT-2 (774M hyperparameters), which has significant effects on text quality.&lt;/p&gt;
&lt;p&gt;Most importantly, CTRL &lt;em&gt;requires&lt;/em&gt; a control code if you want to generate text, which allows for more deterministic output compared to GPT-2/&lt;a href=&#34;https://talktotransformer.com&#34; target=&#34;_blank&#34;&gt;TalkToTransformer&lt;/a&gt;. There are several fun control codes, such as &lt;code&gt;Questions&lt;/code&gt; if you want to ask the AI a question, or &lt;code&gt;Reviews&lt;/code&gt; if you want the AI to generate an &lt;a href=&#34;https://www.amazon.com&#34; target=&#34;_blank&#34;&gt;Amazon&lt;/a&gt; review. For this, we&amp;rsquo;ll only look at the &lt;code&gt;Links&lt;/code&gt; control code, which lets you provide a URL and/or a prompt for text generation.&lt;/p&gt;
&lt;p&gt;As the example from the paper shows, URLs contain a surprising amount of metadata. For example, let&amp;rsquo;s consider a &lt;a href=&#34;https://www.washingtonpost.com/powerpost/deal-reached-for-whistleblowers-testimony-house-intelligence-chairman-says/2019/09/29/01cade60-e2d1-11e9-b403-f738899982d2_story.html&#34; target=&#34;_blank&#34;&gt;random Washington Post URL&lt;/a&gt;: &lt;code&gt;https://www.washingtonpost.com/powerpost/deal-reached-for-whistleblowers-testimony-house-intelligence-chairman-says/2019/09/29/01cade60-e2d1-11e9-b403-f738899982d2_story.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s month/day/year information (&lt;code&gt;2019/09/29&lt;/code&gt;), a category (&lt;code&gt;powerpost&lt;/code&gt;), and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Clean_URL#Slug&#34; target=&#34;_blank&#34;&gt;URL slug&lt;/a&gt; (&lt;code&gt;deal-reached-for-whistleblowers-testimony-house-intelligence-chairman-says&lt;/code&gt;), typically present for SEO reasons, but in this case provides strong hints to the underlying content. The Transformer architecture is &lt;em&gt;surprisingly&lt;/em&gt; effective at extracting all this metadata, and using it to generate appropriate text.&lt;/p&gt;
&lt;h2 id=&#34;examples-of-fake-news&#34;&gt;Examples of Fake News&lt;/h2&gt;
&lt;p&gt;All of the following examples are generated using the full model with the default settings: 256 token length and a temperature of 0 (i.e. the model always selects the next token with the highest probability). I manually truncate the output once it finishes, but other than that, &lt;strong&gt;these AI-generated articles are not edited&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s address the elephant in the room: when people think of &amp;ldquo;fake news&amp;rdquo;, they think of President Donald Trump, who effectively codified the modern usage of the term. So let&amp;rsquo;s generate a fake news story about him with an innocuous topic rarely associated with him. For example, the video gaming phenomenon &lt;a href=&#34;https://www.epicgames.com/fortnite/home&#34; target=&#34;_blank&#34;&gt;Fortnite&lt;/a&gt;. All that&amp;rsquo;s needed is to tweak the slug (and optionally the date) in the earlier WaPo URL a bit and prepend the corresponding control code, resulting in &lt;code&gt;Links https://www.washingtonpost.com/powerpost/trump-likes-fortnite/2019/09/24/&lt;/code&gt;. Feed it to the model, and behold!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trump likes Fortnite&lt;/p&gt;
&lt;p&gt;President Trump, who has been known to play video games for hours at a time, is now playing the popular game “Fortnite” on his phone.&lt;/p&gt;
&lt;p&gt;The president was spotted watching the online battle royale game, which pits players against each other in an attempt to kill their opponents, while he sat down with House and Senate leaders Tuesday afternoon.&lt;/p&gt;
&lt;p&gt;“I like that it’s not just about shooting people but also having fun doing it,” said Trump.&lt;/p&gt;
&lt;p&gt;He then asked if anyone had played it before.&lt;/p&gt;
&lt;p&gt;“You know what, I don’t think I’ve ever seen that,” replied Rep. Steve Scalise, R-La.&lt;/p&gt;
&lt;p&gt;A White House official told reporters later Wednesday afternoon that Trump did indeed watch the game.&lt;/p&gt;
&lt;p&gt;“He watched it, yeah,” the official said.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The generated article is very realistic and follows the style of a typical WaPo article (lede, introduction, body, support, etc.), with proper descriptions of Trump and Fortnite, plus a story that matches the headline. Like GPT-2, there are redundancies in the generation (at the end), but it&amp;rsquo;s not something most readers would find suspicious in a casual read.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s tweak things a little. Instead of using &lt;code&gt;likes&lt;/code&gt; in the slug, what if we use &lt;code&gt;despises&lt;/code&gt;, so &lt;code&gt;trump-despises-fortnite&lt;/code&gt;. How well does the model adapt?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trump despises Fortnite&lt;/p&gt;
&lt;p&gt;The president of the United States has a new favorite video game: “Fortnite.”&lt;/p&gt;
&lt;p&gt;President Trump, who is known for his love of fast food and beer, was reportedly so excited about playing this game that he called it “the greatest thing in the world.”&lt;/p&gt;
&lt;p&gt;But according to an Axios report, Trump’s enthusiasm waned after learning how much time players spend on it.&lt;/p&gt;
&lt;p&gt;“He said it’s not even close to being as good as ‘Candy Crush,’ ” one source told the news outlet.&lt;/p&gt;
&lt;p&gt;In fact, the report said, Trump had been watching videos online while eating dinner with Japanese Prime Minister Shinzo Abe at Mar-a-Lago.&lt;/p&gt;
&lt;p&gt;According to Axios, Trump also complained about the game’s difficulty level — which can be adjusted by spending real money or virtual currency — saying it wasn’t challenging enough.&lt;/p&gt;
&lt;p&gt;“I don’t know why they made it hard,” Trump said.&lt;/p&gt;
&lt;p&gt;He then went off topic when asked if he’d play again.&lt;/p&gt;
&lt;p&gt;“No, I won’t.”&lt;/p&gt;
&lt;p&gt;A White House official later clarified that Trump didn’t say he wouldn’t play, but rather that he’s “not into it.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It adapts very well to the change in tone (even with a rhetorical lede!).&lt;/p&gt;
&lt;p&gt;Fake news doesn&amp;rsquo;t have to be politically-based. Such news in the financial sector could cause just as much chaos. What if it was reported that &lt;a href=&#34;https://www.apple.com&#34; target=&#34;_blank&#34;&gt;Apple&lt;/a&gt;, one of the largest companies in the world, went bankrupt? Put in &lt;code&gt;Links https://www.theverge.com/2019/2/24/20882491/apple-has-filed-for-bankruptcy&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apple has filed for bankruptcy.&lt;/p&gt;
&lt;p&gt;The company that made the iPhone and iPad is filing for bankruptcy, according to a report from Bloomberg.&lt;/p&gt;
&lt;p&gt;According to Bloomberg News, Apple&amp;rsquo;s board of directors voted unanimously on Friday morning in favor of an emergency plan designed to keep it afloat until its next quarterly earnings report.&lt;/p&gt;
&lt;p&gt;In order to avoid paying more than $128 million in back taxes, Apple will have to sell off assets like its Beats headphone business, which was valued at about $1 billion when it went public last year.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Apple said today that it plans to file for Chapter 11 protection under US Bankruptcy Court in Delaware this week,&amp;rdquo; Bloomberg reports.&lt;/p&gt;
&lt;p&gt;A source familiar with the matter told Reuters earlier this week that Apple had been considering selling some or all of its music streaming service iTunes Music Store as part of a restructuring plan.&lt;/p&gt;
&lt;p&gt;But the news comes just days after reports surfaced suggesting that Apple would be forced into liquidation.&lt;/p&gt;
&lt;p&gt;Last week, Bloomberg reported that Apple could soon announce layoffs if sales don&amp;rsquo;t pick up soon.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;We are working hard every day to deliver great products and services to our customers around the world,&amp;rdquo; Tim Cook, CEO of Apple, wrote in a letter to employees today.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, the model incorporates both bankruptcy terminology and Apple-based entities. There are minor factual errors (Beats is not public, Apple is not incorporated in Delaware), but casual readers would likely scan over that.&lt;/p&gt;
&lt;p&gt;Science is also a field with lots of fake discoveries. What if AI reported that &lt;a href=&#34;https://en.wikipedia.org/wiki/P_versus_NP_problem&#34; target=&#34;_blank&#34;&gt;P versus NP&lt;/a&gt;, a very famous problem in computer science, was finally solved? Let&amp;rsquo;s try &lt;code&gt;Links https://techcrunch.com/2029/09/24/mit-proves-p-equals-np&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIT proves P equals NP&lt;/p&gt;
&lt;p&gt;The University of Massachusetts Amherst has proven that the problem posed by factoring large numbers is NP-complete.&lt;/p&gt;
&lt;p&gt;In a paper published in Nature, researchers at MIT’s Computer Science and Artificial Intelligence Laboratory (CSAIL) have shown how to factor an integer using only two numbers, one for each digit — which means it takes just three operations on your brain.&lt;/p&gt;
&lt;p&gt;This isn’t quite as impressive as solving the problem, but it’s still pretty impressive.&lt;/p&gt;
&lt;p&gt;“Given any number n, we can find its product n times with polynomial time if there are no factors involved,” said lead author David DeWitt, who worked on this project while he was a graduate student there.&lt;/p&gt;
&lt;p&gt;But what about factorizing larger numbers?&lt;/p&gt;
&lt;p&gt;“We showed you could do it, but not without some extra effort,” DeWitt said.&lt;/p&gt;
&lt;p&gt;To prove this, they used a technique called Monte Carlo integration, where they simulated millions or billions of different inputs from thousands of computers running various versions of Java.&lt;/p&gt;
&lt;p&gt;They then ran their algorithm through all possible combinations of input values until it found the best one.&lt;/p&gt;
&lt;p&gt;“The result shows that even though our system doesn’t solve every single case, it does get close enough to be useful.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This instance is less factually correct (and it&amp;rsquo;s clickbaity!), but the topic behind the generated text is &lt;em&gt;complicated&lt;/em&gt; enough that only domain experts would be able to tell it&amp;rsquo;s not internally consistent.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also worth pointing out now that &lt;em&gt;the majority of the text generated so far is unique&lt;/em&gt;, and CTRL is not cheating by just outputting text from the source datasets. Even though Monte Carlo integration is &lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_integration&#34; target=&#34;_blank&#34;&gt;indeed a real thing&lt;/a&gt; that&amp;rsquo;s relatively obscure, Googling that description of it fails to turn up results.&lt;/p&gt;
&lt;p&gt;Lastly, fake news doesn&amp;rsquo;t have to be depressing or sow discord. What about &lt;em&gt;wholesome&lt;/em&gt; fake news? Such as&amp;hellip;the return of beloved television series &lt;a href=&#34;https://en.wikipedia.org/wiki/Firefly_(TV_series)&#34; target=&#34;_blank&#34;&gt;Firefly&lt;/a&gt;? One &lt;code&gt;Links https://www.hollywoodreporter.com/live-feed/fox-announces-firefly-season-2-revival-original-cast-returning-12343245&lt;/code&gt; later:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fox announces Firefly Season 2 revival, original cast returning&lt;/p&gt;
&lt;p&gt;The network has announced that the second season of Joss Whedon’s cult sci-fi series will return for a new run in 2018.&lt;/p&gt;
&lt;p&gt;“Fans have been asking us to bring back Firefly, and we couldn’t be more thrilled about this opportunity,” said Chris Albrecht, president of programming at Fox. “We are excited to continue our relationship with Joss, who is one of the most creative minds working today on television, as well as his amazing cast, which includes Nathan Fillion, Summer Glau, Alan Tudyk, Adam Baldwin, Sean Maher, Adrianne Palicki, Tricia Helfer, Jewel Staite, Michael Trucco, and many more.”&lt;/p&gt;
&lt;p&gt;In addition to Whedon himself, executive producers include Damon Lindelof, Maurissa Tancharoen, Vince Gilligan, David Fury, Jeffrey Bell, Greg Plageman, Scott M. Gimple, Heather Kadin, Andrew Chambliss, John Rogers, and Ron Moore.&lt;/p&gt;
&lt;p&gt;“The show was an instant hit when it debuted over 20 years ago, but its popularity only grew after the success of ‘Serenity,’ so we’re very pleased to welcome fans into another chapter of their lives,” added Feige.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is a &lt;em&gt;very&lt;/em&gt; stacked cast and crew, all of which (besides the original Firefly members) have acted/worked on sci-fi television series. The only major factual errors are that Chris Albrecht was at STARZ, not Fox, and Feige, presumably Kevin Feige of Marvel Studios, is not mentioned previously in the generated article.&lt;/p&gt;
&lt;p&gt;I know I&amp;rsquo;ll get criticism for highlighting a potentially dangerous application of AI text generation. My perspective is that it&amp;rsquo;s important to know what such tools are &lt;em&gt;capable&lt;/em&gt; of doing in order to more easily recognize fake news. The real problem with fake news isn&amp;rsquo;t the text itself: it&amp;rsquo;s the &lt;em&gt;distribution&lt;/em&gt; of the news on social media like &lt;a href=&#34;http://www.facebook.com&#34; target=&#34;_blank&#34;&gt;Facebook&lt;/a&gt; and &lt;a href=&#34;https://twitter.com&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;, where the platforms not only &lt;em&gt;incentivize&lt;/em&gt; it, but also fail to sufficiently punish deliberate, repeat offenders. It&amp;rsquo;s why journalism and awareness of fake news is extremely important.&lt;/p&gt;
&lt;p&gt;Some might comment &amp;ldquo;these generated texts aren&amp;rsquo;t convincing at all!&amp;rdquo;, but keep in mind that&amp;rsquo;s because the headline says upfront that they&amp;rsquo;re fake. Would you be able to identify it as a fake if a respected source impulsively tweeted it?&lt;/p&gt;</description></item><item><title>How To Make Custom AI-Generated Text With GPT-2</title><link>https://minimaxir.com/2019/09/howto-gpt2/</link><pubDate>Wed, 04 Sep 2019 08:00:00 -0700</pubDate><guid>https://minimaxir.com/2019/09/howto-gpt2/</guid><description>
&lt;p&gt;In February 2019, &lt;a href=&#34;https://openai.com&#34; target=&#34;_blank&#34;&gt;OpenAI&lt;/a&gt; released &lt;a href=&#34;https://openai.com/blog/better-language-models/&#34; target=&#34;_blank&#34;&gt;a paper&lt;/a&gt; describing GPT-2, a AI-based text-generation model based on the &lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34; target=&#34;_blank&#34;&gt;Transformer architecture&lt;/a&gt; and trained on massive amounts of text all around the internet. From a text-generation perspective, the included demos were very impressive: the text is coherent over a long horizon, and grammatical syntax and punctuation are near-perfect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/openai-demo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;At the same time, the Python code which allowed anyone to download the model (albeit smaller versions out of concern the full model can be abused to mass-generate fake news) and the &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; code to load the downloaded model and generate predictions was &lt;a href=&#34;https://github.com/openai/gpt-2&#34; target=&#34;_blank&#34;&gt;open-sourced on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Neil Shepperd created &lt;a href=&#34;https://github.com/nshepperd/gpt-2&#34; target=&#34;_blank&#34;&gt;a fork&lt;/a&gt; of OpenAI&amp;rsquo;s repo which contains additional code to allow &lt;em&gt;finetuning&lt;/em&gt; the existing OpenAI model on custom datasets. A &lt;a href=&#34;https://github.com/ak9250/gpt-2-colab&#34; target=&#34;_blank&#34;&gt;notebook&lt;/a&gt; was created soon after, which can be copied into &lt;a href=&#34;https://colab.research.google.com&#34; target=&#34;_blank&#34;&gt;Google Colaboratory&lt;/a&gt; and clones Shepperd&amp;rsquo;s repo to finetune GPT-2 backed by a free GPU. From there, the proliferation of GPT-2 generated text took off: researchers such as Gwern Branwen made &lt;a href=&#34;https://www.gwern.net/GPT-2&#34; target=&#34;_blank&#34;&gt;GPT-2 Poetry&lt;/a&gt; and Janelle Shane made &lt;a href=&#34;https://aiweirdness.com/post/183471928977/dd-character-bios-now-making-slightly-more&#34; target=&#34;_blank&#34;&gt;GPT-2 Dungeons and Dragons character bios&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I waited to see if anyone would make a tool to help streamline this finetuning and text generation workflow, a la &lt;a href=&#34;https://github.com/minimaxir/textgenrnn&#34; target=&#34;_blank&#34;&gt;textgenrnn&lt;/a&gt; which I had made for recurrent neural network-based text generation. Months later, no one did. So I did it myself. Enter &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple&#34; target=&#34;_blank&#34;&gt;gpt-2-simple&lt;/a&gt;, a Python package which wraps Shepperd&amp;rsquo;s finetuning code in a functional interface and adds &lt;em&gt;many&lt;/em&gt; utilities for model management and generation control.&lt;/p&gt;
&lt;p&gt;Thanks to gpt-2-simple and &lt;a href=&#34;https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce&#34; target=&#34;_blank&#34;&gt;this Colaboratory Notebook&lt;/a&gt;, you can easily finetune GPT-2 on your own dataset with a simple function, and generate text to your own specifications!&lt;/p&gt;
&lt;h2 id=&#34;how-gpt-2-works&#34;&gt;How GPT-2 Works&lt;/h2&gt;
&lt;p&gt;OpenAI has released three flavors of GPT-2 models to date: the &amp;ldquo;small&amp;rdquo; 124M parameter model (500MB on disk), the &amp;ldquo;medium&amp;rdquo; 355M model (1.5GB on disk), and recently the 774M model (3GB on disk). These models are &lt;em&gt;much&lt;/em&gt; larger than what you see in typical AI tutorials and are harder to wield: the &amp;ldquo;small&amp;rdquo; model hits GPU memory limits while finetuning with consumer GPUs, the &amp;ldquo;medium&amp;rdquo; model requires additional training techniques before it could be finetuned on server GPUs without going out-of-memory, and the &amp;ldquo;large&amp;rdquo; model &lt;em&gt;cannot be finetuned at all&lt;/em&gt; with current server GPUs before going OOM, even with those techniques.&lt;/p&gt;
&lt;p&gt;The actual Transformer architecture GPT-2 uses is very complicated to explain (here&amp;rsquo;s a &lt;a href=&#34;http://www.peterbloem.nl/blog/transformers&#34; target=&#34;_blank&#34;&gt;great lecture&lt;/a&gt;). For the purposes of finetuning, since we can&amp;rsquo;t modify the architecture, it&amp;rsquo;s easier to think of GPT-2 as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Black_box&#34; target=&#34;_blank&#34;&gt;black box&lt;/a&gt;, taking in inputs and providing outputs. Like &lt;a href=&#34;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&#34; target=&#34;_blank&#34;&gt;previous forms of text generators&lt;/a&gt;, the inputs are a sequence of tokens, and the outputs are the probability of the next token in the sequence, with these probabilities serving as weights for the AI to pick the next token in the sequence. In this case, both the input and output tokens are &lt;a href=&#34;https://en.wikipedia.org/wiki/Byte_pair_encoding&#34; target=&#34;_blank&#34;&gt;byte pair encodings&lt;/a&gt;, which instead of using character tokens (slower to train but includes case/formatting) or word tokens (faster to train but does not include case/formatting) like most RNN approaches, the inputs are &amp;ldquo;compressed&amp;rdquo; to the shortest combination of bytes including case/formatting, which serves as a compromise between both approaches but unfortunately adds randomness to the final generation length. The byte pair encodings are later decoded into readable text for human generation.&lt;/p&gt;
&lt;p&gt;The pretrained GPT-2 models were trained on websites linked from &lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;. As a result, the model has a very strong grasp of the English language, allowing this knowledge to transfer to other datasets and perform well with only a minor amount of additional finetuning. Due to the English bias in encoder construction, languages with non-Latin characters like Russian and &lt;a href=&#34;https://en.wikipedia.org/wiki/CJK_characters&#34; target=&#34;_blank&#34;&gt;CJK&lt;/a&gt; will perform poorly in finetuning.&lt;/p&gt;
&lt;p&gt;When finetuning GPT-2, I recommend using the 124M model (the default) as it&amp;rsquo;s the best balance of speed, size, and creativity. If you have large amounts of training data (&amp;gt;10 MB), then the 355M model may work better.&lt;/p&gt;
&lt;h2 id=&#34;gpt-2-simple-and-colaboratory&#34;&gt;gpt-2-simple And Colaboratory&lt;/h2&gt;
&lt;p&gt;In order to better utilize gpt-2-simple and showcase its features, I created my &lt;a href=&#34;https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce&#34; target=&#34;_blank&#34;&gt;own Colaboratory Notebook&lt;/a&gt;, which can be copied into your own Google account. A Colaboratory Notebook is effectively a &lt;a href=&#34;https://jupyter.org&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook&lt;/a&gt; running on a free (w/ a Google Account) virtual machine with an Nvidia server GPU attached (&lt;a href=&#34;https://twitter.com/BasedBlue/status/1164732922953379841&#34; target=&#34;_blank&#34;&gt;randomly&lt;/a&gt; a K80 or a T4; T4 is ideal) that normally can be cost-prohibitive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gpu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once open, the first cell (run by pressing Shift+Enter in the cell or mousing-over the cell and pressing the &amp;ldquo;Play&amp;rdquo; button) of the notebook installs gpt-2-simple and its dependencies, and loads the package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/imports.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Later in the notebook is &lt;code&gt;gpt2.download_gpt2()&lt;/code&gt; which downloads the requested model type to the Colaboratory VM (the models are hosted on Google&amp;rsquo;s servers, so it&amp;rsquo;s a &lt;em&gt;very&lt;/em&gt; fast download).&lt;/p&gt;
&lt;p&gt;Expanding the Colaboratory sidebar reveals a UI that you can use to upload files. For example, the &lt;a href=&#34;https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt&#34; target=&#34;_blank&#34;&gt;tinyshakespeare dataset&lt;/a&gt; (1MB) provided with the original &lt;a href=&#34;https://github.com/karpathy/char-rnn&#34; target=&#34;_blank&#34;&gt;char-rnn implementation&lt;/a&gt;. Upload a text file via the UI (you can drag and drop), run the &lt;code&gt;file_name = &#39;&amp;lt;xxx&amp;gt;&#39;&lt;/code&gt; cell with your filename changed in the cell.&lt;/p&gt;
&lt;p&gt;Now we can start finetuning! This finetuning cell loads the specified dataset and trains for the specified number of steps (the default of 1,000 steps is enough to allow distinct text to emerge and takes about 45 minutes, but you can increase the number of steps if necessary).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/finetuning.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;While the model is finetuning, the average training loss is output every-so-often to the cell. The &lt;em&gt;absolute value&lt;/em&gt; of the loss is not important (the output text quality is subjective), but if the average loss stops decreasing, that&amp;rsquo;s a sign the model has converged and additional training may not help improve the model.&lt;/p&gt;
&lt;p&gt;By default, your model is saved in the &lt;code&gt;checkpoint/run1&lt;/code&gt; folder, and you&amp;rsquo;ll need to use that folder to load the model as well (you can specify the &lt;code&gt;run_name&lt;/code&gt; when using other functions categorize finetuned models). If you want to export the model from Colaboratory, it&amp;rsquo;s recommended you do so via &lt;a href=&#34;https://www.google.com/drive/&#34; target=&#34;_blank&#34;&gt;Google Drive&lt;/a&gt; (as Colaboratory does not like exporting large files). Run the &lt;code&gt;gpt2.mount_gdrive()&lt;/code&gt; cell to mount your Google Drive in the Colaboratory VM, then run the &lt;code&gt;gpt2.copy_checkpoint_to_gdrive()&lt;/code&gt; cell. You can then download the compressed model folder from Google Drive and run the model wherever you want. Likewise, you can use the &lt;code&gt;gpt2.copy_checkpoint_from_gdrive()&lt;/code&gt; cell to retrieve a stored model and generate in the notebook.&lt;/p&gt;
&lt;p&gt;Speaking of generation, once you have a finetuned model, you can now generate custom text from it! By default, the &lt;code&gt;gpt2.generate()&lt;/code&gt; function will generate as much text as possible (1,024 tokens) with a little bit of randomness. An important caveat: &lt;em&gt;you will not get good generated text 100% of the time&lt;/em&gt;, even with a properly trained model (the OpenAI demo above took &lt;em&gt;25 tries&lt;/em&gt; to get good text!).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gen_long.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also increase the &lt;code&gt;temperature&lt;/code&gt; to increase &amp;ldquo;creativity&amp;rdquo; by allowing the network to more likely make suboptimal predictions, provide a &lt;code&gt;prefix&lt;/code&gt; to specify how exactly you want your text to begin. There are many other useful configuration parameters, such as &lt;code&gt;top_p&lt;/code&gt; for &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple/issues/51&#34; target=&#34;_blank&#34;&gt;nucleus sampling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gen_long_params.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As a bonus, you can bulk-generate text with gpt-2-simple by setting &lt;code&gt;nsamples&lt;/code&gt; (number of texts to generate total) and &lt;code&gt;batch_size&lt;/code&gt; (number of texts to generate at a time); the Colaboratory GPUs can support a &lt;code&gt;batch_size&lt;/code&gt; of up to 20, and you can generate these to a text file with &lt;code&gt;gpt2.generate_to_file(file_name)&lt;/code&gt; with the same parameters as &lt;code&gt;gpt2.generate()&lt;/code&gt;. You can download the generated file locally via the sidebar, and use those to easily save and share the generated texts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce&#34; target=&#34;_blank&#34;&gt;The notebook&lt;/a&gt; has many more functions as well, with more parameters and detailed explanations! The &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple&#34; target=&#34;_blank&#34;&gt;gpt-2-simple README&lt;/a&gt; lists additional features of gpt-2-simple if you want to use the model outside the notebook.&lt;/p&gt;
&lt;p&gt;(NB: Currently, you&amp;rsquo;ll need to reset the Notebook via Runtime → Restart Runtime to finetune a different model/dataset or load a different finetuned model.)&lt;/p&gt;
&lt;h2 id=&#34;gpt-2-for-short-texts&#34;&gt;GPT-2 For Short Texts&lt;/h2&gt;
&lt;p&gt;A weakness of GPT-2 and other out-of-the-box AI text generators is that they are built for longform content, and keep on generating text until you hit the specified length. Another reason I wanted to make gpt-2-simple was to add explicit processing tricks to the generated text to work around this issue for short texts. In this case, there are two additional parameters that can be passed to &lt;code&gt;gpt2.generate()&lt;/code&gt;: &lt;code&gt;truncate&lt;/code&gt; and &lt;code&gt;include_prefix&lt;/code&gt;. For example, if each short text begins with a &lt;code&gt;&amp;lt;|startoftext|&amp;gt;&lt;/code&gt; token and ends with a &lt;code&gt;&amp;lt;|endoftext|&amp;gt;&lt;/code&gt;, then setting &lt;code&gt;prefix=&#39;&amp;lt;|startoftext|&amp;gt;&#39;&lt;/code&gt;, &lt;code&gt;truncate=&amp;lt;|endoftext|&amp;gt;&#39;&lt;/code&gt;, and &lt;code&gt;include_prefix=False&lt;/code&gt;, and &lt;code&gt;length&lt;/code&gt; is sufficient, then gpt-2-simple will automatically extract the shortform texts, even when generating in batches.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s finetune a GPT-2 model on Reddit submission titles. This query, when run on &lt;a href=&#34;https://console.cloud.google.com/bigquery&#34; target=&#34;_blank&#34;&gt;BigQuery&lt;/a&gt; (for free), returns the top 16,000 titles by score between January and March 2019 for a given Reddit subreddit (in this case, &lt;a href=&#34;https://www.reddit.com/r/AskReddit/&#34; target=&#34;_blank&#34;&gt;/r/AskReddit&lt;/a&gt;) + minor text preprocessing, which can be downloaded locally as a 1.3 MB CSV (Save Results → CSV [local file]):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;#standardSQL
SELECT
REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(title, &#39;&amp;amp;amp;&#39;, &#39;&amp;amp;&#39;), &#39;&amp;amp;lt;&#39;, &#39;&amp;lt;&#39;), &#39;&amp;amp;gt;&#39;, &#39;&amp;gt;&#39;), &#39;�&#39;, &#39;&#39;) AS title
FROM
`fh-bigquery.reddit_posts.*`
WHERE
_TABLE_SUFFIX BETWEEN &#39;2019_01&#39; AND &#39;2019_03&#39;
AND LENGTH(title) &amp;gt;= 8
AND LOWER(subreddit) = &#39;askreddit&#39;
ORDER BY
score DESC
LIMIT
16000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With gpt-2-simple, using a single-column CSV like the one generated above as the input dataset will automatically add &lt;code&gt;&amp;lt;|startoftext|&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;|endoftext|&amp;gt;&lt;/code&gt; tokens appropriately. Finetune a new GPT-2 model as normal, and then generate with those additional parameters mentioned above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/gen_short.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth noting that despite a good amount of input data to the model, finetuned networks can easily &lt;em&gt;overfit&lt;/em&gt; on short form text: some of these example titles are very close to existing /r/AskReddit titles. Overfitting can be rectified by training for less time, or adding more input data. Make sure to double check that your generated text is unique!&lt;/p&gt;
&lt;p&gt;You can play with this Reddit-oriented variant in &lt;a href=&#34;https://colab.research.google.com/drive/1RugXCYDcMvSACYNt9j0kB6zzqRKzAbBn&#34; target=&#34;_blank&#34;&gt;this modified Colaboratory Notebook&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;making-gpt-2-apps&#34;&gt;Making GPT-2 Apps&lt;/h2&gt;
&lt;p&gt;There have already been cool, non-nefarious uses of GPT-2, such as Adam King&amp;rsquo;s &lt;a href=&#34;https://talktotransformer.com&#34; target=&#34;_blank&#34;&gt;TalkToTransformer&lt;/a&gt; which provides a UI for the 774M model (and has gone viral many times) and &lt;a href=&#34;https://tabnine.com&#34; target=&#34;_blank&#34;&gt;TabNine&lt;/a&gt;, which uses GPT-2 finetuned on GitHub code in order to create probabilistic code completion. On the &lt;a href=&#34;https://pytorch.org&#34; target=&#34;_blank&#34;&gt;PyTorch&lt;/a&gt; side, Huggingface has released a &lt;a href=&#34;https://github.com/huggingface/pytorch-transformers&#34; target=&#34;_blank&#34;&gt;Transformers client&lt;/a&gt; (w/ GPT-2 support) of their own, and also created apps such as &lt;a href=&#34;https://transformer.huggingface.co&#34; target=&#34;_blank&#34;&gt;Write With Transformer&lt;/a&gt; to serve as a text autocompleter.&lt;/p&gt;
&lt;p&gt;Many AI tutorials often show how to deploy a small model to a web service by using the &lt;a href=&#34;https://palletsprojects.com/p/flask/&#34; target=&#34;_blank&#34;&gt;Flask&lt;/a&gt; application framework. The problem with GPT-2 is that it&amp;rsquo;s such a huge model that most conventional advice won&amp;rsquo;t work well to get a performant app. And even if you do get it to run fast (e.g. by running the app on a GPU), it won&amp;rsquo;t be &lt;em&gt;cheap&lt;/em&gt;, especially if you want it to be resilient to a random surge of virality.&lt;/p&gt;
&lt;p&gt;With gpt-2-simple, the solution I came up with is &lt;a href=&#34;https://github.com/minimaxir/gpt-2-cloud-run&#34; target=&#34;_blank&#34;&gt;gpt-2-cloud-run&lt;/a&gt;; a small webapp intended to run GPT-2 via &lt;a href=&#34;https://cloud.google.com/run/&#34; target=&#34;_blank&#34;&gt;Google Cloud Run&lt;/a&gt; backed by gpt-2-simple. The advantage here is that Cloud Run only charges for compute used and can scale indefinitely if there&amp;rsquo;s a traffic surge; for casual use, it&amp;rsquo;s extremely cost effective compared to running a GPU 24/7. I&amp;rsquo;ve used Cloud Run to make a GPT-2 text generator for &lt;a href=&#34;https://minimaxir.com/apps/gpt2-reddit/&#34; target=&#34;_blank&#34;&gt;Reddit-wide submission titles&lt;/a&gt; and a GPT-2 generator for &lt;a href=&#34;https://minimaxir.com/apps/gpt2-mtg/&#34; target=&#34;_blank&#34;&gt;Magic: The Gathering cards&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/howto-gpt2/mtg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;attributing-ai-generated-text&#34;&gt;Attributing AI-Generated Text&lt;/h2&gt;
&lt;p&gt;One of the main reasons I developed textgenrnn and gpt-2-simple is to make AI text generation more &lt;em&gt;accessible&lt;/em&gt; as you do not need a strong AI or technical background to create fun stories. However, in the case of GPT-2, I&amp;rsquo;ve noticed an elevated amount of &amp;ldquo;I trained an AI to generate text&amp;rdquo; articles/Reddit posts/YouTube videos saying they used GPT-2 to train an AI, but not &lt;em&gt;how&lt;/em&gt; they trained the AI: especially suspicious since finetuning is not an out-of-the-box feature that OpenAI provides. The fact that Keaton Patti&amp;rsquo;s &lt;a href=&#34;https://twitter.com/KeatonPatti/status/1161284670601990146&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;I forced a bot&amp;rdquo; movie scripts&lt;/a&gt; (that aren&amp;rsquo;t written by a bot) frequently go megaviral due to that particular framing doesn&amp;rsquo;t help.&lt;/p&gt;
&lt;p&gt;Although it&amp;rsquo;s not legally required, I ask that anyone who shares generated text via gpt-2-simple add a link to the repo and/or Colaboratory notebook not just for attribution, but to &lt;em&gt;spread knowledge&lt;/em&gt; about the accessibility of AI text generation. It&amp;rsquo;s a technology that should be transparent, not obfuscated for personal gain.&lt;/p&gt;
&lt;h2 id=&#34;the-future-of-gpt-2&#34;&gt;The Future of GPT-2&lt;/h2&gt;
&lt;p&gt;Hopefully, this article gave you ideas on how to finetune and generate texts creatively. There&amp;rsquo;s still a &lt;em&gt;lot&lt;/em&gt; of untapped potential, and there are still many cool applications that have been untouched, and many cool datasets that haven&amp;rsquo;t been used for AI text generation. GPT-2 will likely be used more for mass-producing &lt;a href=&#34;https://twitter.com/Fred_Delicious/status/1166783214750445573&#34; target=&#34;_blank&#34;&gt;crazy erotica&lt;/a&gt; than fake news.&lt;/p&gt;
&lt;p&gt;However, GPT-2 and the Transformer architecture aren&amp;rsquo;t the end-game of AI text generation. Not by a long shot.&lt;/p&gt;</description></item><item><title>How to Quickly Train a Text-Generating Neural Network for Free</title><link>https://minimaxir.com/2018/05/text-neural-networks/</link><pubDate>Fri, 18 May 2018 09:00:00 -0700</pubDate><guid>https://minimaxir.com/2018/05/text-neural-networks/</guid><description>
&lt;p&gt;One of the more interesting applications of the neural network revolution is text generation. Most popular approaches are based off of Andrej Karpathy&amp;rsquo;s &lt;a href=&#34;https://github.com/karpathy/char-rnn&#34; target=&#34;_blank&#34;&gt;char-rnn architecture&lt;/a&gt;/&lt;a href=&#34;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt;, which teaches a recurrent neural network to be able to predict the next character in a sequence based on the previous &lt;em&gt;n&lt;/em&gt; characters. As a result, a sufficiently trained network can theoretically reproduce its input source material, but since properly-trained neural networks aren&amp;rsquo;t &lt;em&gt;perfect&lt;/em&gt;, the output can fall into a weird-but-good uncanny valley.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/textgenrnn_console.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Many internet tutorials for text-generation neural networks simply copy an existing char-rnn implementation while changing the input dataset. It&amp;rsquo;s one approach, but there&amp;rsquo;s an opportunity for improvement with modern deep learning tooling. Thanks to frameworks like &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/keras-team/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt;, I built &lt;a href=&#34;https://github.com/minimaxir/textgenrnn&#34; target=&#34;_blank&#34;&gt;textgenrnn&lt;/a&gt;, a &lt;a href=&#34;https://pypi.org/project/textgenrnn/#description&#34; target=&#34;_blank&#34;&gt;Python package&lt;/a&gt; which abstracts the process of creating and training such char-rnns to a &lt;em&gt;few lines of code&lt;/em&gt;, with numerous model architecture and training improvements such as &lt;a href=&#34;http://minimaxir.com/2017/04/char-embeddings/&#34; target=&#34;_blank&#34;&gt;character embeddings&lt;/a&gt;, attention-weighted averaging, and a decaying learning rate.&lt;/p&gt;
&lt;p&gt;A neat benefit of textgenrnn is that it can be easily used to train neural networks on a GPU very quickly, &lt;em&gt;for free&lt;/em&gt; using &lt;a href=&#34;https://colab.research.google.com/notebooks/welcome.ipynb&#34; target=&#34;_blank&#34;&gt;Google Colaboratory&lt;/a&gt;. I&amp;rsquo;ve &lt;a href=&#34;https://drive.google.com/file/d/1mMKGnVxirJnqDViH7BDJxFqWrsXlPSoK/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;created a notebook&lt;/a&gt; which lets you train your own network and generate text whenever you want with just a few clicks!&lt;/p&gt;
&lt;h2 id=&#34;your-first-text-generating-neural-network&#34;&gt;Your First Text-Generating Neural Network&lt;/h2&gt;
&lt;p&gt;Colaboratory is a notebook environment similar to &lt;a href=&#34;http://jupyter.org&#34; target=&#34;_blank&#34;&gt;Jupyter Notebooks&lt;/a&gt; used in other data science projects. However, Colaboratory notebooks are hosted in a short term virtual machine, with 2 vCPUs, 13GB memory, and a K80 GPU attached. For free. Normally, this configuration would &lt;a href=&#34;https://cloud.google.com/compute/pricing&#34; target=&#34;_blank&#34;&gt;cost&lt;/a&gt; $0.57/hr on Google Compute Engine; it sounds low, but adds up when you need to train model(s) for hours to get good results.&lt;/p&gt;
&lt;p&gt;First, I recommend copying the notebook to your own Drive so it&amp;rsquo;ll always be there (and switch to using Google Chrome if you aren&amp;rsquo;t). The Colaboratory VM contains Python 3 and common Python packages for machine learning such as TensorFlow. But you can install more packages directly in the notebook. Like textgenrnn! Just run this cell by clicking into the cell and click the &amp;ldquo;play&amp;rdquo; button (or use Shift + Enter) and it&amp;rsquo;ll take care of the rest:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/pip.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When training a new model, textgenrnn allows you to specify the size and complexity of the neural network with a wide variety of parameters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/config.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s keep these default parameters for now, so run that cell to load them into memory. Run the next cell, which prompts you to upload a file. &lt;em&gt;Any text file should work&lt;/em&gt;, even large text files! For this example, we&amp;rsquo;ll use a 1.1MB text file of Shakespeare plays also &lt;a href=&#34;https://github.com/karpathy/char-rnn/tree/master/data/tinyshakespeare&#34; target=&#34;_blank&#34;&gt;used in the char-rnn demos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/upload.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The next cell initializes an instance of textgenrnn and begins training a custom new text-generating neural network!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/train.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;textgenrnn automatically processes the input text into character sequences ready to train the network. After every 2 epochs (a full pass through the data), the network will generate sample text at different temperatures, which represent the &amp;ldquo;creativity&amp;rdquo; of the text (i.e. it allows the model to make increasingly suboptimal predictions, which can cause hilarity to ensue). I typically like generating text at a temperature of 0.5, but for very well-trained models, you can go up to 1.0.&lt;/p&gt;
&lt;p&gt;The quick model training speed comes from the VM&amp;rsquo;s GPU, which can perform the necessary mathematical operations much faster than with a CPU. However, in the case of recurrent neural networks, Keras recently added a &lt;a href=&#34;https://keras.io/layers/recurrent/#cudnnlstm&#34; target=&#34;_blank&#34;&gt;CuDNN implementation of RNNs&lt;/a&gt; like LSTMs, which can easily tap into the GPU-native code more easily and gain a &lt;em&gt;massive&lt;/em&gt; speed boost (&lt;a href=&#34;http://minimaxir.com/2017/11/benchmark-gpus/&#34; target=&#34;_blank&#34;&gt;about &lt;em&gt;7x as fast&lt;/em&gt;&lt;/a&gt;) compared to previous implementations! In all, for this example dataset and model architecture, training on a GPU took 5-6 minutes an epoch, while on a modern CPU, training took &lt;em&gt;1 hour and 24 minutes&lt;/em&gt; an epoch, a &lt;strong&gt;14x speedup&lt;/strong&gt; on the GPU!&lt;/p&gt;
&lt;p&gt;After training is complete, running the next cell will download three files: a &lt;code&gt;weights&lt;/code&gt; file, a &lt;code&gt;vocabulary&lt;/code&gt; file, and a &lt;code&gt;config&lt;/code&gt; file that are all needed to regenerate your model elsewhere.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/download.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For example, on your own personal computer. Just install textgenrnn + TensorFlow by inputting &lt;code&gt;pip3 install textgenrnn tensorflow&lt;/code&gt; into a terminal, change to the directory where the downloaded files are located, run &lt;code&gt;python3&lt;/code&gt;, and load the model using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textgenrnn import textgenrnn
textgen = textgenrnn(weights_path=&#39;colaboratory_weights.hdf5&#39;,
vocab_path=&#39;colaboratory_vocab.json&#39;,
config_path=&#39;colaboratory_config.json&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s that! No GPU necessary if you&amp;rsquo;re just generating text. You can generate samples (like during training) using &lt;code&gt;textgen.generate_samples()&lt;/code&gt;, generate a ton of samples at any temperature you like to a file using &lt;code&gt;textgen.generate_to_file()&lt;/code&gt;, or incorporate a generated text into a Python script (e.g. a Twitter bot) using &lt;code&gt;textgen.generate(1, return_as_list=True)[0]&lt;/code&gt; to store a text as a variable. You can view more of textgenrnn&amp;rsquo;s functions and capabilities in &lt;a href=&#34;https://github.com/minimaxir/textgenrnn/blob/master/docs/textgenrnn-demo.ipynb&#34; target=&#34;_blank&#34;&gt;this demo Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s some Shakespeare generated with a 50-minute-trained model at a temperature of 0.5:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LUCENTIO:
And then shall good grave to my wife thee;
Thou would the cause the brieved to me,
And let the place and then receives:
The rest you the foren to my ways him child,
And marry that will be a parties and so set me that be deeds
And then the heart and be so shall make the most as he and stand of seat.
GLOUCESTER:
Your father and madam, or shall for the people
And dead to make the truth, or a business
As we brother to the place her great the truth;
And that which to the smaster and her father,
I am I was see the sun have to the royal true.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not too bad, and it&amp;rsquo;s even close to &lt;a href=&#34;https://en.wikipedia.org/wiki/Iambic_pentameter&#34; target=&#34;_blank&#34;&gt;iambic pentameter&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;tweaking-the-model&#34;&gt;Tweaking the Model&lt;/h2&gt;
&lt;p&gt;The most important model configuration options above are &lt;code&gt;rnn_size&lt;/code&gt; and &lt;code&gt;rnn_layers&lt;/code&gt;: these determine the complexity of the network. Typically, you&amp;rsquo;ll see networks in tutorials be a single 128-cell or 256-cell network. However, textgenrnn&amp;rsquo;s architecture is slightly different as it has an attention layer which incorporates &lt;em&gt;all&lt;/em&gt; the preceding model layers. As a result, it&amp;rsquo;s much better to go deeper than wider (e.g. 4x128 is better than 1x512) unless you have a very large amount of text (&amp;gt;10MB). &lt;code&gt;rnn_bidirectional&lt;/code&gt; controls whether the recurrent neural network is bidirectional, that is, it processes the previous characters both forward &lt;em&gt;and&lt;/em&gt; backward (which works great if text follows specific rules, like Shakespeare&amp;rsquo;s character headings). &lt;code&gt;max_length&lt;/code&gt; determines the maximum number of characters for the network to use to predict the next character, which should be increased to let the network learn longer sequences, or decrease for shorter sequences.&lt;/p&gt;
&lt;p&gt;Training has a few helpful options as well. &lt;code&gt;num_epochs&lt;/code&gt; determines the number of full passes of the data; this can be tweaked if you want to train the model even more. &lt;code&gt;batch_size&lt;/code&gt; determines the number of model sequences to train in a step: typically, batch size for deep learning models is 32 or 128, but with a GPU, you can get a speed increase by saturating it with the given 1024 default. &lt;code&gt;train_size&lt;/code&gt; determines the proportion of character samples to train; setting it &lt;code&gt;&amp;lt; 1.0&lt;/code&gt; both speeds up each epoch, and prevents the model from cheating and being able to learn sequences verbatim. (You can set &lt;code&gt;&#39;validation&#39;: True&lt;/code&gt; to run the model on the unused data after each epoch to see if the model is overfitting).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try playing with the parameters more on a new text dataset.&lt;/p&gt;
&lt;h2 id=&#34;word-level-text-generation-with-reddit-data&#34;&gt;Word-Level Text Generation With Reddit Data&lt;/h2&gt;
&lt;p&gt;You might be asking &amp;ldquo;how do you obtain text data&amp;rdquo;? The popular text-generation use cases like lyric generation and movie scripts are copyright-protected so they&amp;rsquo;re harder to find, and even then, it might not be enough text data to train a new model upon (you typically want atleast 100,000 characters).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;, however, has &lt;em&gt;millions&lt;/em&gt; of submission titles which would be great to train for a model. I wrote a &lt;a href=&#34;https://github.com/minimaxir/subreddit-generator&#34; target=&#34;_blank&#34;&gt;helper script&lt;/a&gt; to automatically download the top &lt;em&gt;n&lt;/em&gt; Reddit submissions from a given subreddit over a given period of time. If you choose subreddits with similar linguistic styles in their titles, the subreddits will even blend together! Let&amp;rsquo;s play with the Top 20,000 Submissions in 2017 from each of &lt;a href=&#34;https://www.reddit.com/r/politics/&#34; target=&#34;_blank&#34;&gt;/r/politics&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/technology/&#34; target=&#34;_blank&#34;&gt;/r/technology&lt;/a&gt;, which results in a 3.3MB file: about 3x as much data as the Shakespeare plays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/reddit_data.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One last thing that textgenrnn can do that most char-rnn implementations can&amp;rsquo;t is generate a &lt;em&gt;word level&lt;/em&gt; model (thanks to Keras&amp;rsquo;s tokenizers), where the model uses the &lt;em&gt;n&lt;/em&gt; previous words/punctuation to predict the next word/punctuation. On the plus side, using only words prevents crazy typoes and since it predicts multiple &amp;ldquo;characters&amp;rdquo; at a time, &lt;code&gt;max_length&lt;/code&gt; can be reduced proportionally, dramatically speeding up training. There&amp;rsquo;s two downsides with this approach; since words are all lowercase and punctuation is its own token, the generated text cannot be immediately used without manual editing. Additionally, the model weights will be substantially larger than a character-level model since the word-level model has to store an embedding for each word (up to &lt;code&gt;max_words&lt;/code&gt;, which is 10,000 by default when the vocabulary size for a char-level model is 200-300).&lt;/p&gt;
&lt;p&gt;Another advantage of the Colaboratory notebook is that you can quickly adjust model parameters, upload a new file, and immediately start training it. We&amp;rsquo;ll set &lt;code&gt;&#39;line_delimited&#39;: True&lt;/code&gt; and &lt;code&gt;&#39;rnn_bidirectional&#39;: False&lt;/code&gt; since there aren&amp;rsquo;t specific rules. For word level training, let&amp;rsquo;s set &lt;code&gt;&#39;word_level&#39;: True&lt;/code&gt; and &lt;code&gt;&#39;max_length&#39;: 8&lt;/code&gt; to reflect the new training architecture. Since training length has been reduced to 1/5th, we can set &lt;code&gt;&#39;num_epochs&#39;: 50&lt;/code&gt; and &lt;code&gt;&#39;gen_epoch&#39;: 10&lt;/code&gt; to balance it out. Rerun the config cell to update parameters, upload the Reddit data file, and rerun training.&lt;/p&gt;
&lt;p&gt;The resulting model is much more well trained than the Shakespeare model, and here&amp;rsquo;s a few Reddit submission titles generated at a temperature of 1.0:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;report : 49 % of americans now believe all of the country ’ s effective
people like facebook like it &#39; s 650 of 1 %
uber accused of secretly - security popular service ( likely oklahoma )
equifax breach fallout : your salary is dead
sanders uses texas shooter &#39; s iphone sales
adobe videos will be used to sell the web
apple to hold cash for $ 500 service
fitbit just targeting solar energy
george bush &#39; s concept car ‘ goes for all the biggest controversy .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those look pretty good, although they may need a little editing before posting on social media.&lt;/p&gt;
&lt;h2 id=&#34;followup&#34;&gt;Followup&lt;/h2&gt;
&lt;p&gt;These examples only train the model for little time as a demo of textgenrnn&amp;rsquo;s fast learning; there&amp;rsquo;s nothing stopping you from increasing &lt;code&gt;num_epochs&lt;/code&gt; even more to further refine a model. However, from my experience, the training cell times out after &lt;strong&gt;4 hours&lt;/strong&gt;; set &lt;code&gt;num_epochs&lt;/code&gt; accordingly, although in my experience that&amp;rsquo;s all you need before the network converges.&lt;/p&gt;
&lt;p&gt;In practice, I used this Colaboratory notebook to train &lt;em&gt;many&lt;/em&gt; models for &lt;a href=&#34;https://www.reddit.com/r/SubredditNN/&#34; target=&#34;_blank&#34;&gt;/r/SubredditNN&lt;/a&gt;, a Reddit subreddit where only text-generating neural network bots trained on other subreddits. And the results are very funny:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/text-neural-networks/subredditnn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Although text generating neural networks aren&amp;rsquo;t at the point where they can &lt;a href=&#34;https://www.bloomberg.com/news/features/2018-05-17/i-tried-to-get-an-ai-to-write-this-story-paul-ford&#34; target=&#34;_blank&#34;&gt;write entire articles by themselves&lt;/a&gt;, there are still many opportunities to use it just for fun! And thanks to textgenrnn, it&amp;rsquo;s easy, fast, and cost-effective for anyone to do! Let me know if you make any interesting neural networks with textgenrnn and this Notebook!&lt;/p&gt;</description></item><item><title>Benchmarking Modern GPUs for Maximum Cloud Cost Efficiency in Deep Learning</title><link>https://minimaxir.com/2017/11/benchmark-gpus/</link><pubDate>Tue, 28 Nov 2017 08:30:00 -0700</pubDate><guid>https://minimaxir.com/2017/11/benchmark-gpus/</guid><description>
&lt;p&gt;A few months ago, I &lt;a href=&#34;http://minimaxir.com/2017/06/keras-cntk/&#34; target=&#34;_blank&#34;&gt;performed benchmarks&lt;/a&gt; of deep learning frameworks in the cloud, with a &lt;a href=&#34;http://minimaxir.com/2017/07/cpu-or-gpu/&#34; target=&#34;_blank&#34;&gt;followup&lt;/a&gt; focusing on the cost difference between using GPUs and CPUs. And just a few months later, the landscape has changed, with significant updates to the low-level &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34; target=&#34;_blank&#34;&gt;NVIDIA cuDNN&lt;/a&gt; library which powers the raw learning on the GPU, the &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/Microsoft/CNTK&#34; target=&#34;_blank&#34;&gt;CNTK&lt;/a&gt; deep learning frameworks, and the higher-level &lt;a href=&#34;https://github.com/fchollet/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt; framework which uses TensorFlow/CNTK as backends for easy deep learning model training.&lt;/p&gt;
&lt;p&gt;As a bonus to the framework updates, Google &lt;a href=&#34;https://cloudplatform.googleblog.com/2017/09/introducing-faster-GPUs-for-Google-Compute-Engine.html&#34; target=&#34;_blank&#34;&gt;recently released&lt;/a&gt; the newest generation of NVIDIA cloud GPUs, the Pascal-based P100, onto &lt;a href=&#34;https://cloud.google.com/compute/&#34; target=&#34;_blank&#34;&gt;Google Compute Engine&lt;/a&gt; which touts an up-to-10x performance increase to the current K80 GPUs used in cloud computing. As a bonus bonus, Google recently &lt;a href=&#34;https://cloudplatform.googleblog.com/2017/11/new-lower-prices-for-GPUs-and-preemptible-Local-SSDs.html&#34; target=&#34;_blank&#34;&gt;cut the prices&lt;/a&gt; of both K80 and P100 GPU instances by up to 36%.&lt;/p&gt;
&lt;p&gt;The results of my earlier benchmarks favored &lt;a href=&#34;https://cloud.google.com/preemptible-vms/&#34; target=&#34;_blank&#34;&gt;preemptible&lt;/a&gt; instances with many CPUs as the most cost efficient option (where a preemptable instance can only last for up to 24 hours and could end prematurely). A 36% price cut to GPU instances, in addition to the potential new benefits offered by software and GPU updates, however, might be enough to tip the cost-efficiency scales back in favor of GPUs. It&amp;rsquo;s a good idea to rerun the experiment with updated VMs and see what happens.&lt;/p&gt;
&lt;h2 id=&#34;benchmark-setup&#34;&gt;Benchmark Setup&lt;/h2&gt;
&lt;p&gt;As with the original benchmark, I set up a &lt;a href=&#34;https://github.com/minimaxir/keras-cntk-docker&#34; target=&#34;_blank&#34;&gt;Docker container&lt;/a&gt; containing the deep learning frameworks (based on cuDNN 6, the latest version of cuDNN natively supported by the frameworks) that can be used to train each model independently. The &lt;a href=&#34;https://github.com/minimaxir/keras-cntk-benchmark/tree/master/v2/test_files&#34; target=&#34;_blank&#34;&gt;Keras benchmark scripts&lt;/a&gt; run on the containers are based off of &lt;em&gt;real world&lt;/em&gt; use cases of deep learning.&lt;/p&gt;
&lt;p&gt;The 6 hardware/software configurations and Google Compute Engine &lt;a href=&#34;https://cloud.google.com/compute/pricing&#34; target=&#34;_blank&#34;&gt;pricings&lt;/a&gt; for the tests are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A K80 GPU (attached to a &lt;code&gt;n1-standard-1&lt;/code&gt; instance), tested with both TensorFlow (1.4) and CNTK (2.2): &lt;strong&gt;$0.4975 / hour&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A P100 GPU (attached to a &lt;code&gt;n1-standard-1&lt;/code&gt; instance), tested with both TensorFlow and CNTK: &lt;strong&gt;$1.5075 / hour&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A preemptable &lt;code&gt;n1-highcpu-32&lt;/code&gt; instance, with 32 vCPUs based on the Intel Skylake architecture, tested with TensorFlow only: &lt;strong&gt;$0.2400 / hour&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A preemptable &lt;code&gt;n1-highcpu-16&lt;/code&gt; instance, with 16 vCPUs based on the Intel Skylake architecture, tested with TensorFlow only: &lt;strong&gt;$0.1200 / hour&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A single K80 GPU uses &amp;frac12; a GPU board while a single P100 uses a full GPU board, which in an ideal world would suggest that the P100 is twice as fast at the K80 at minimum. But even so, the P100 configuration is about 3 times as expensive, so even if a model is trained in half the time, it may not necessarily be cheaper with the P100.&lt;/p&gt;
&lt;p&gt;Also, the CPU tests use TensorFlow &lt;em&gt;as installed via the recommended method&lt;/em&gt; through pip, since compiling the TensorFlow binary from scratch to take advantage of CPU instructions as &lt;a href=&#34;http://minimaxir.com/2017/07/cpu-or-gpu/&#34; target=&#34;_blank&#34;&gt;with my previous test&lt;/a&gt; is not a pragmatic workflow for casual use.&lt;/p&gt;
&lt;h2 id=&#34;benchmark-results&#34;&gt;Benchmark Results&lt;/h2&gt;
&lt;p&gt;When a fresh-out-of-a-AI-MOOC engineer wants to experiment with deep learning in the cloud, typically they use a K80 + TensorFlow setup, so we&amp;rsquo;ll use that as the &lt;em&gt;base configuration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For each model architecture and software/hardware configuration, I calculate the &lt;strong&gt;total training time relative to the base configuration instance training&lt;/strong&gt; for running the model training for the provided test script. In all cases, the P100 GPU &lt;em&gt;should&lt;/em&gt; perform better than the K80, and 32 vCPUs &lt;em&gt;should&lt;/em&gt; train faster than 16 vCPUs. The question is how &lt;em&gt;much&lt;/em&gt; faster?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start using the &lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34; target=&#34;_blank&#34;&gt;MNIST dataset&lt;/a&gt; of handwritten digits plus the common multilayer perceptron (MLP) architecture, with dense fully-connected layers. Lower training time is better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For this task, CNTK appears to be more effective than TensorFlow. Indeed, the P100 is faster than the K80 for the corresponding framework, although it&amp;rsquo;s not a dramatic difference. However, since the task is simple, the CPU performance is close to that of the GPU, which implies that the GPU is not as cost effective for a simple architecture.&lt;/p&gt;
&lt;p&gt;For each model architecture and configuration, I calculate a &lt;strong&gt;normalized training cost relative to the cost of the base configuration training&lt;/strong&gt;. Because GCE instance costs are prorated, we can simply calculate experiment cost by multiplying the total number of seconds the experiment runs by the cost of the instance (per second).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Unsurprisingly, CPUs are more cost effective. However, the P100 is more cost &lt;em&gt;ineffective&lt;/em&gt; for this task than the K80.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s look at the same dataset with a convolutional neural network (CNN) approach for digit classification. Since CNNs are typically used for computer vision tasks, new graphic card architectures are optimized for CNN workflows, so it will be interesting to see how the P100 performs compared to the K80:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Indeed, the P100 is twice as fast and the K80, but due to the huge cost premium, it&amp;rsquo;s not cost effective for this simple task. However, CPUs do not perform well on this task either, so notably the base configuration is the best configuration.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go deeper with CNNs and look at the &lt;a href=&#34;https://www.cs.toronto.edu/%7Ekriz/cifar.html&#34; target=&#34;_blank&#34;&gt;CIFAR-10&lt;/a&gt; image classification dataset, and a model which utilizes a deep covnet + a multilayer perceptron and ideal for image classification (similar to the &lt;a href=&#34;https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3&#34; target=&#34;_blank&#34;&gt;VGG-16&lt;/a&gt; architecture).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Similar results to that of a normal MLP. Nothing fancy.&lt;/p&gt;
&lt;p&gt;The Bidirectional long-short-term memory (LSTM) architecture is great for working with text data like IMDb reviews. When I did &lt;a href=&#34;http://minimaxir.com/2017/06/keras-cntk/&#34; target=&#34;_blank&#34;&gt;my first benchmark article&lt;/a&gt;, I noticed that CNTK performed significantly better than TensorFlow, as &lt;a href=&#34;https://news.ycombinator.com/item?id=14538086&#34; target=&#34;_blank&#34;&gt;commenters on Hacker News&lt;/a&gt; noted that TensorFlow uses an inefficient implementation of the LSTM on the GPU.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/cntk-old.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, with Keras&amp;rsquo;s &lt;a href=&#34;https://keras.io/layers/recurrent/#cudnnlstm&#34; target=&#34;_blank&#34;&gt;new CuDNNRNN layers&lt;/a&gt; which leverage cuDNN, this inefficiency may be fixed, so for the K80/P100 TensorFlow GPU configs, I use a CuDNNLSTM layer instead of a normal LSTM layer. So let&amp;rsquo;s take another look:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;WOAH.&lt;/em&gt; TensorFlow is now more than &lt;em&gt;three times as fast&lt;/em&gt; than CNTK! (And compared against my previous benchmark, TensorFlow on the K80 w/ the CuDNNLSTM is about &lt;em&gt;7x as fast&lt;/em&gt; as it once was!) Even the CPU-only versions of TensorFlow are faster than CNTK on the GPU now, which implies significant improvements in the ecosystem outside of the CuDNNLSTM layer itself. (And as a result, CPUs are still more cost efficient)&lt;/p&gt;
&lt;p&gt;Lastly, LSTM text generation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Friedrich_Nietzsche&#34; target=&#34;_blank&#34;&gt;Nietzsche&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://s3.amazonaws.com/text-datasets/nietzsche.txt&#34; target=&#34;_blank&#34;&gt;writings&lt;/a&gt; follows similar patterns to the other architectures, but without the drastic hit to the GPU.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/dl-cpu-gpu-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The biggest surprise of these new benchmarks is that there is no configuration where the P100 is the most cost-effective option, even though the P100 is indeed faster than the K80 in all tests. Although per &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34; target=&#34;_blank&#34;&gt;the cuDNN website&lt;/a&gt;, there is apparently only a 2x speed increase between the performance of the K80 and P100 using cuDNN 6, which is mostly consistent with the results of my benchmarks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/benchmark-gpus/cudnn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I did not include a multi-GPU configuration in the benchmark data visualizations above using Keras&amp;rsquo;s new &lt;code&gt;multi_gpu_model&lt;/code&gt; &lt;a href=&#34;https://keras.io/utils/#multi_gpu_model&#34; target=&#34;_blank&#34;&gt;function&lt;/a&gt; because in my testing, the multi-GPU training &lt;em&gt;was equal to or worse than a single GPU&lt;/em&gt; in all tests.&lt;/p&gt;
&lt;p&gt;Taking these together, it&amp;rsquo;s possible that the overhead introduced by parallel, advanced architectures &lt;em&gt;eliminates the benefits&lt;/em&gt; for &amp;ldquo;normal&amp;rdquo; deep learning workloads which do not fully saturate the GPU. Rarely do people talk about diminishing returns in GPU performance with deep learning.&lt;/p&gt;
&lt;p&gt;In the future, I want to benchmark deep learning performance against more advanced deep learning use cases such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Reinforcement_learning&#34; target=&#34;_blank&#34;&gt;reinforcement learning&lt;/a&gt; and deep CNNs like &lt;a href=&#34;https://github.com/tensorflow/models/tree/master/research/inception&#34; target=&#34;_blank&#34;&gt;Inception&lt;/a&gt;. But that doesn&amp;rsquo;t mean these benchmarks are not relevant; as stated during the benchmark setup, the GPUs were tested against typical deep learning use cases, and now we see the tradeoffs that result.&lt;/p&gt;
&lt;p&gt;In all, with the price cuts on GPU instances, cost-performance is often &lt;em&gt;on par&lt;/em&gt; with preemptable CPU instances, which is an advantage if you want to train models faster and not risk the instance being killed unexpectedly. And there is still a lot of competition in this space: &lt;a href=&#34;https://www.amazon.com&#34; target=&#34;_blank&#34;&gt;Amazon&lt;/a&gt; offers a &lt;code&gt;p2.xlarge&lt;/code&gt; &lt;a href=&#34;https://aws.amazon.com/ec2/spot/&#34; target=&#34;_blank&#34;&gt;Spot Instance&lt;/a&gt; with a K80 GPU for $0.15-$0.20 an hour, less than half of the corresponding Google Compute Engine K80 GPU instance, although with &lt;a href=&#34;https://aws.amazon.com/ec2/spot/details/&#34; target=&#34;_blank&#34;&gt;a few bidding caveats&lt;/a&gt; which I haven&amp;rsquo;t fully explored yet. Competition will drive GPU prices down even further, and training deep learning models will become even easier.&lt;/p&gt;
&lt;p&gt;And as the cuDNN chart above shows, things will get &lt;em&gt;very&lt;/em&gt; interesting once Volta-based GPUs like the V100 are generally available and the deep learning frameworks support cuDNN 7 by default.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE 12/17&lt;/strong&gt;: &lt;em&gt;As pointed out by &lt;a href=&#34;https://news.ycombinator.com/item?id=15941682&#34; target=&#34;_blank&#34;&gt;dantiberian on Hacker News&lt;/a&gt;, Google Compute Engine now supports &lt;a href=&#34;https://cloud.google.com/compute/docs/instances/preemptible#preemptible_with_gpu&#34; target=&#34;_blank&#34;&gt;preemptible GPUs&lt;/a&gt;, which was apparently added after this post went live. Preemptable GPUs are exactly half the price of normal GPUs (for both K80s and P100s; $0.73/hr and $0.22/hr respectively), so they&amp;rsquo;re about double the cost efficiency (when factoring in the cost of the base preemptable instance), which would put them squarely ahead of CPUs in all cases. (and since the CPU instances used here were also preemptable, it&amp;rsquo;s apples-to-apples)&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;All scripts for running the benchmark are available in &lt;a href=&#34;https://github.com/minimaxir/keras-cntk-benchmark/tree/master/v2&#34; target=&#34;_blank&#34;&gt;this GitHub repo&lt;/a&gt;. You can view the R/ggplot2 code used to process the logs and create the visualizations in &lt;a href=&#34;http://minimaxir.com/notebooks/benchmark-gpus/&#34; target=&#34;_blank&#34;&gt;this R Notebook&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Predicting the Success of a Reddit Submission with Deep Learning and Keras</title><link>https://minimaxir.com/2017/06/reddit-deep-learning/</link><pubDate>Mon, 26 Jun 2017 09:00:00 -0700</pubDate><guid>https://minimaxir.com/2017/06/reddit-deep-learning/</guid><description>
&lt;p&gt;I&amp;rsquo;ve been trying to figure out what makes a &lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt; submission &amp;ldquo;good&amp;rdquo; for years. If we assume the number of upvotes on a submission is a fair proxy for submission quality, optimizing a statistical model for Reddit data with submission score as a response variable might lead to interesting (and profitable) insights when transferred into other domains, such as Facebook Likes and Twitter Favorites.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/reddit-example.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;An important part of a Reddit submission is the submission &lt;strong&gt;title&lt;/strong&gt;. Like news headlines, a catchy title will make a user &lt;a href=&#34;http://minimaxir.com/2015/10/reddit-topwords/&#34; target=&#34;_blank&#34;&gt;more inclined&lt;/a&gt; to engage with a submission and potentially upvote.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-topwords/mean-054-Fitness.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;strong&gt;time when the submission is made&lt;/strong&gt; is &lt;a href=&#34;http://minimaxir.com/2015/10/reddit-bigquery/&#34; target=&#34;_blank&#34;&gt;important&lt;/a&gt;; submitting when user activity is the highest tends to lead to better results if you are trying to maximize exposure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-bigquery/reddit-bigquery-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The actual &lt;strong&gt;content&lt;/strong&gt; of the Reddit submission such as images/links to a website is likewise important, but good content is relatively difficult to optimize.&lt;/p&gt;
&lt;p&gt;Can the magic of deep learning reconcile these concepts and create a model which can predict if a submission is a good submission? Thanks to &lt;a href=&#34;https://github.com/fchollet/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt;, performing deep learning on a very large number of Reddit submissions is actually pretty easy. Performing it &lt;em&gt;well&lt;/em&gt; is a different story.&lt;/p&gt;
&lt;h2 id=&#34;getting-the-data-feature-engineering&#34;&gt;Getting the Data + Feature Engineering&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s difficult to retrieve the content of millions of Reddit submissions at scale (ethically), so let&amp;rsquo;s initially start by building a model using submissions on &lt;a href=&#34;https://www.reddit.com/r/AskReddit/&#34; target=&#34;_blank&#34;&gt;/r/AskReddit&lt;/a&gt;: Reddit&amp;rsquo;s largest subreddit which receives 8,000+ submissions each day. /r/AskReddit is a self-post only subreddit with no external links, allowing us to focus on only the submission title and timing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://minimaxir.com/2015/10/reddit-bigquery/&#34; target=&#34;_blank&#34;&gt;As always&lt;/a&gt;, we can collect large amounts of Reddit data from the public Reddit dataset on &lt;a href=&#34;https://cloud.google.com/bigquery/&#34; target=&#34;_blank&#34;&gt;BigQuery&lt;/a&gt;. The submission &lt;code&gt;title&lt;/code&gt; is available by default. The raw timestamp of the submission is also present, allowing us to extract the &lt;code&gt;hour&lt;/code&gt; of submission (adjusted to Eastern Standard Time) and &lt;code&gt;dayofweek&lt;/code&gt;, as used in the heatmap above. But why stop there? Since /r/AskReddit receives hundreds of submissions &lt;em&gt;every hour&lt;/em&gt; on average, we should look at the &lt;code&gt;minute&lt;/code&gt; level to see if there are any deeper trends (e.g. there are only 30 slots available on the first page of /new and since there is so much submission activity, it might be more advantageous to submit during off-peak times). Lastly, to account for potential changes in behavior as the year progresses, we should add a &lt;code&gt;dayofyear&lt;/code&gt; feature, where January 1st = 1, January 2nd = 2, etc which can also account for variance due to atypical days like holidays.&lt;/p&gt;
&lt;p&gt;Instead of predicting the raw number on upvotes of the Reddit submission (as the distribution of submission scores is heavily skewed), we should predict &lt;strong&gt;whether or not the submission is good&lt;/strong&gt;, shaping the problem as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Logistic_regression&#34; target=&#34;_blank&#34;&gt;logistic regression&lt;/a&gt;. In this case, let&amp;rsquo;s define a &amp;ldquo;good submission&amp;rdquo; as one whose score is equal to or above the &lt;strong&gt;50th percentile (median) of all submissions&lt;/strong&gt; in /r/AskReddit. Unfortunately, the median score ends up being &lt;strong&gt;2 points&lt;/strong&gt;; although &amp;ldquo;one upvote&amp;rdquo; might be a low threshold for a &amp;ldquo;good&amp;rdquo; submission, it splits the dataset into 64% bad submissions, 36% good submissions, and setting the percentile threshold higher will result in a very unbalanced dataset for model training (a score of 2+ also implies that the submission did not get downvoted to death, which is useful).&lt;/p&gt;
&lt;p&gt;Gathering all &lt;strong&gt;976,538 /r/AskReddit submissions&lt;/strong&gt; from January 2017 to April 2017 should be enough data for this project. Here&amp;rsquo;s the final BigQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;#standardSQL
SELECT id, title,
CAST(FORMAT_TIMESTAMP(&#39;%H&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS hour,
CAST(FORMAT_TIMESTAMP(&#39;%M&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS minute,
CAST(FORMAT_TIMESTAMP(&#39;%w&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS dayofweek,
CAST(FORMAT_TIMESTAMP(&#39;%j&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS dayofyear,
IF(PERCENT_RANK() OVER (ORDER BY score ASC) &amp;gt;= 0.50, 1, 0) as is_top_submission
FROM `fh-bigquery.reddit_posts.*`
WHERE (_TABLE_SUFFIX BETWEEN &#39;2017_01&#39; AND &#39;2017_04&#39;)
AND subreddit = &#39;AskReddit&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/bigquery.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;model-architecture&#34;&gt;Model Architecture&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;If you want to see the detailed data transformations and Keras code examples/outputs for this post, you can view &lt;a href=&#34;https://github.com/minimaxir/predict-reddit-submission-success/blob/master/predict_askreddit_submission_success_timing.ipynb&#34; target=&#34;_blank&#34;&gt;this Jupyter Notebook&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Text processing is a good use case for deep learning, as it can identify relationships between words where older methods like &lt;a href=&#34;https://en.wikipedia.org/wiki/Tf–idf&#34; target=&#34;_blank&#34;&gt;tf-idf&lt;/a&gt; can&amp;rsquo;t. Keras, a high level deep-learning framework on top of lower frameworks like &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt;, can easily convert a list of texts to a &lt;a href=&#34;https://keras.io/preprocessing/sequence/&#34; target=&#34;_blank&#34;&gt;padded sequence&lt;/a&gt; of &lt;a href=&#34;https://keras.io/preprocessing/text/&#34; target=&#34;_blank&#34;&gt;index tokens&lt;/a&gt; that can interact with deep learning models, along with many other benefits. Data scientists often use &lt;a href=&#34;https://en.wikipedia.org/wiki/Recurrent_neural_network&#34; target=&#34;_blank&#34;&gt;recurrent neural networks&lt;/a&gt; that can &amp;ldquo;learn&amp;rdquo; for classifying text. However &lt;a href=&#34;https://github.com/facebookresearch/fastText&#34; target=&#34;_blank&#34;&gt;fasttext&lt;/a&gt;, a newer algorithm from researchers at Facebook, can perform classification tasks at an &lt;a href=&#34;http://minimaxir.com/2017/06/keras-cntk/&#34; target=&#34;_blank&#34;&gt;order of magnitude faster&lt;/a&gt; training time than RNNs, with similar predictive performance.&lt;/p&gt;
&lt;p&gt;fasttext works by &lt;a href=&#34;https://arxiv.org/abs/1607.01759&#34; target=&#34;_blank&#34;&gt;averaging word vectors&lt;/a&gt;. In this Reddit model architecture inspired by the &lt;a href=&#34;https://github.com/fchollet/keras/blob/master/examples/imdb_fasttext.py&#34; target=&#34;_blank&#34;&gt;official Keras fasttext example&lt;/a&gt;, each word in a Reddit submission title (up to 20) is mapped to a 50-dimensional vector from an Embeddings layer of up to 40,000 words. The Embeddings layer is &lt;a href=&#34;https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html&#34; target=&#34;_blank&#34;&gt;initialized&lt;/a&gt; with &lt;a href=&#34;https://nlp.stanford.edu/projects/glove/&#34; target=&#34;_blank&#34;&gt;GloVe word embeddings&lt;/a&gt; pre-trained on billions of words to give the model a good start. All the word vectors for a given Reddit submission title are averaged together, and then a Dense fully-connected layer outputs a probability the given text is a good submission. The gradients then backpropagate and improve the word embeddings for future batches during training.&lt;/p&gt;
&lt;p&gt;Keras has a &lt;a href=&#34;https://keras.io/visualization/&#34; target=&#34;_blank&#34;&gt;convenient utility&lt;/a&gt; to visualize deep learning models:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/model_shapes-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, the first output above is the &lt;em&gt;auxiliary output&lt;/em&gt; for &lt;a href=&#34;https://en.wikipedia.org/wiki/Regularization_(mathematics)&#34; target=&#34;_blank&#34;&gt;regularizing&lt;/a&gt; the word embeddings; we still have to incorporate the submission timing data into the model.&lt;/p&gt;
&lt;p&gt;Each of the four timing features (hour, minute, day of week, day of year) receives its own Embeddings layer, outputting a 64D vector. This allows the features to learn latent characteristics which may be missed using traditional &lt;a href=&#34;http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html&#34; target=&#34;_blank&#34;&gt;one-hot encoding&lt;/a&gt; for categorical data in machine learning problems.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/model_shapes-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The 50D word average vector is concatenated with the four vectors above, resulting in a 306D vector. This combined vector is connected to another fully-connected layer which can account for hidden interactions between all five input features (plus &lt;a href=&#34;https://keras.io/layers/normalization/&#34; target=&#34;_blank&#34;&gt;batch normalization&lt;/a&gt;, which improves training speed for Dense layers). Then the model outputs a final probability prediction: the &lt;em&gt;main output&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/model_shapes-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The final model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/model.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All of this sounds difficult to implement, but Keras&amp;rsquo;s &lt;a href=&#34;https://keras.io/getting-started/functional-api-guide/&#34; target=&#34;_blank&#34;&gt;functional API&lt;/a&gt; ensures that adding each layer and linking them together can be done in a single line of code each.&lt;/p&gt;
&lt;h2 id=&#34;training-results&#34;&gt;Training Results&lt;/h2&gt;
&lt;p&gt;Because the model uses no recurrent layers, it trains fast enough on a CPU despite the large dataset size.&lt;/p&gt;
&lt;p&gt;We split the full dataset into 80%/20% training/test datasets, training the model on the former and testing the model against the latter. Keras trains a model with a simple &lt;code&gt;fit&lt;/code&gt; command and trains for 20 epochs, where one epoch represents an entire pass of the training set.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/fit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot happening in the console output due to the architecture, but the main metrics of interest are the &lt;code&gt;main_out_acc&lt;/code&gt;, the accuracy of the training set through the main output, and &lt;code&gt;val_main_out_acc&lt;/code&gt;, the accuracy of the test set. Ideally, the accuracy of both should increase as training progresses. However, the test accuracy &lt;em&gt;must&lt;/em&gt; be better than the 64% baseline (if we just say all /r/AskReddit submissions are bad), otherwise this model is unhelpful.&lt;/p&gt;
&lt;p&gt;Keras&amp;rsquo;s &lt;a href=&#34;https://keras.io/callbacks/#csvlogger&#34; target=&#34;_blank&#34;&gt;CSVLogger&lt;/a&gt; trivially logs all these metrics to a CSV file. Plotting the results of the 20 epochs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://minimaxir.com/img/reddit-deep-learning/predict-reddit-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The test accuracy does indeed beat the 64% baseline; however, test accuracy &lt;em&gt;decreases&lt;/em&gt; as training progresses. This is a sign of &lt;a href=&#34;https://en.wikipedia.org/wiki/Overfitting&#34; target=&#34;_blank&#34;&gt;overfitting&lt;/a&gt;, possibly due to the potential disparity between texts in the training and test sets. In deep learning, you can account for overfitting by adding &lt;a href=&#34;https://keras.io/layers/core/#dropout&#34; target=&#34;_blank&#34;&gt;Dropout&lt;/a&gt; to relevant layers, but in my testing it did not help.&lt;/p&gt;
&lt;h2 id=&#34;using-the-model-to-optimize-reddit-submissions&#34;&gt;Using The Model To Optimize Reddit Submissions&lt;/h2&gt;
&lt;p&gt;At the least, we now have a model that understands the latent characteristics of an /r/AskReddit submission. But how do you apply the model &lt;em&gt;in practical, real-world situations&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a random /r/AskReddit submission: &lt;a href=&#34;https://www.reddit.com/r/AskReddit/comments/5odcpd/which_movies_plot_would_drastically_change_if_you/&#34; target=&#34;_blank&#34;&gt;Which movie&amp;rsquo;s plot would drastically change if you removed a letter from its title?&lt;/a&gt;, submitted Monday, January 16th at 3:46 PM EST and receiving 4 upvotes (a &amp;ldquo;good&amp;rdquo; submission in context of this model). Plugging those input variables into the trained model results in a &lt;strong&gt;0.669&lt;/strong&gt; probability of it being considered a good submission, which is consistent with the true results.&lt;/p&gt;
&lt;p&gt;But what if we made &lt;em&gt;minor, iterative changes&lt;/em&gt; to the title while keeping the time submitted unchanged? Can we improve this probability?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Drastically&amp;rdquo; is a silly adjective; removing it and using the title &lt;strong&gt;Which movie&amp;rsquo;s plot would change if you removed a letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.682&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Removed&amp;rdquo; is &lt;a href=&#34;http://www.ef.edu/english-resources/english-grammar/conditional/&#34; target=&#34;_blank&#34;&gt;grammatically incorrect&lt;/a&gt;; fixing the issue and using the title &lt;strong&gt;Which movie&amp;rsquo;s plot would change if you remove a letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.692&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Which&amp;rdquo; is also &lt;a href=&#34;https://www.englishclub.com/vocabulary/wh-question-words.htm&#34; target=&#34;_blank&#34;&gt;grammatically incorrect&lt;/a&gt;; fixing the issue and using the title &lt;strong&gt;What movie&amp;rsquo;s plot would change if you remove a letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.732&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Although adjectives are sometimes redundant, they can add an intriguing emphasis; adding a &amp;ldquo;single&amp;rdquo; and using the title &lt;strong&gt;What movie&amp;rsquo;s plot would change if you remove a single letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.753&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Not bad for a little workshopping!&lt;/p&gt;
&lt;p&gt;Now that we have an improved title, we can find an optimal time to make the submission through brute force by calculating the probabilities for all combinations of hour, minute, and day of week (and offsetting the day of year appropriately). After doing so, I discovered that making the submission on the previous Sunday at 10:55 PM EST results in the maximum probability possible of being a good submission at &lt;strong&gt;0.841&lt;/strong&gt; (the other top submission times are at various other minutes during that hour; the best time on a different day is the following Tuesday at 4:05 AM EST with a probability of &lt;strong&gt;0.823&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;In all, this model of Reddit submission success prediction is a proof of concept; there are many, &lt;em&gt;many&lt;/em&gt; optimizations that can be done on the feature engineering side and on the data collection side (especially if we want to model subreddits other than /r/AskReddit). Predicting which submissions go viral instead of just predicting which submissions receive atleast one upvote is another, more advanced problem entirely.&lt;/p&gt;
&lt;p&gt;Thanks to the high-level abstractions and utility functions of Keras, I was able to prototype the initial model in an afternoon instead of the weeks/months required for academic papers and software applications in this area. At the least, this little experiment serves as an example of applying Keras to a real-world dataset, and the tradeoffs that result when deep learning can&amp;rsquo;t magically solve everything. But that doesn&amp;rsquo;t mean my experiments on the Reddit data were unproductive; on the contrary, I now have a few new clever ideas how to fix some of the issues discovered, which I hope to implement soon.&lt;/p&gt;
&lt;p&gt;Again, I strongly recommend reading the data transformations and Keras code examples in &lt;a href=&#34;https://github.com/minimaxir/predict-reddit-submission-success/blob/master/predict_askreddit_submission_success_timing.ipynb&#34; target=&#34;_blank&#34;&gt;this Jupyter Notebook&lt;/a&gt; for more information into the methodology, as building modern deep learning models is more intuitive and less arcane than what thought pieces on Medium imply.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;You can view the R and ggplot2 code used to visualize the model data in &lt;a href=&#34;http://minimaxir.com/notebooks/predict-reddit-submission-success/&#34; target=&#34;_blank&#34;&gt;this R Notebook&lt;/a&gt;, including 2D projections of the Embedding layers not in this article. You can also view the images/data used for this post in &lt;a href=&#34;https://github.com/minimaxir/predict-reddit-submission-success&#34; target=&#34;_blank&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You are free to use the data visualizations/model architectures from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!&lt;/em&gt;&lt;/p&gt;</description></item></channel></rss>