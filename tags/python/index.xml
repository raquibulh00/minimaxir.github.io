<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Max Woolf&#39;s Blog</title><link>/tags/python/</link><description>Recent content in Python on Max Woolf&#39;s Blog</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright Max Woolf &amp;copy; {year}</copyright><lastBuildDate>Fri, 18 May 2018 09:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Quickly Train a Text-Generating Neural Network for Free</title><link>/2018/05/text-neural-networks/</link><pubDate>Fri, 18 May 2018 09:00:00 +0000</pubDate><guid>/2018/05/text-neural-networks/</guid><description>
&lt;p&gt;One of the more interesting applications of the neural network revolution is text generation. Most popular approaches are based off of Andrej Karpathy&amp;rsquo;s &lt;a href=&#34;https://github.com/karpathy/char-rnn&#34; target=&#34;_blank&#34;&gt;char-rnn architecture&lt;/a&gt;/&lt;a href=&#34;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt;, which teaches a recurrent neural network to be able to predict the next character in a sequence based on the previous &lt;em&gt;n&lt;/em&gt; characters. As a result, a sufficiently trained network can theoretically reproduce its input source material, but since properly-trained neural networks aren&amp;rsquo;t &lt;em&gt;perfect&lt;/em&gt;, the output can fall into a weird-but-good uncanny valley.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/textgenrnn_console.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Many internet tutorials for text-generation neural networks simply copy an existing char-rnn implementation while changing the input dataset. It&amp;rsquo;s one approach, but there&amp;rsquo;s an opportunity for improvement with modern deep learning tooling. Thanks to frameworks like &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/keras-team/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt;, I built &lt;a href=&#34;https://github.com/minimaxir/textgenrnn&#34; target=&#34;_blank&#34;&gt;textgenrnn&lt;/a&gt;, a &lt;a href=&#34;https://pypi.org/project/textgenrnn/#description&#34; target=&#34;_blank&#34;&gt;Python package&lt;/a&gt; which abstracts the process of creating and training such char-rnns to a &lt;em&gt;few lines of code&lt;/em&gt;, with numerous model architecture and training improvements such as &lt;a href=&#34;http://minimaxir.com/2017/04/char-embeddings/&#34; target=&#34;_blank&#34;&gt;character embeddings&lt;/a&gt;, attention-weighted averaging, and a decaying learning rate.&lt;/p&gt;
&lt;p&gt;A neat benefit of textgenrnn is that it can be easily used to train neural networks on a GPU very quickly, &lt;em&gt;for free&lt;/em&gt; using &lt;a href=&#34;https://colab.research.google.com/notebooks/welcome.ipynb&#34; target=&#34;_blank&#34;&gt;Google Colaboratory&lt;/a&gt;. I&amp;rsquo;ve &lt;a href=&#34;https://drive.google.com/file/d/1mMKGnVxirJnqDViH7BDJxFqWrsXlPSoK/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;created a notebook&lt;/a&gt; which lets you train your own network and generate text whenever you want with just a few clicks!&lt;/p&gt;
&lt;h2 id=&#34;your-first-text-generating-neural-network&#34;&gt;Your First Text-Generating Neural Network&lt;/h2&gt;
&lt;p&gt;Colaboratory is a notebook environment similar to &lt;a href=&#34;http://jupyter.org&#34; target=&#34;_blank&#34;&gt;Jupyter Notebooks&lt;/a&gt; used in other data science projects. However, Colaboratory notebooks are hosted in a short term virtual machine, with 2 vCPUs, 13GB memory, and a K80 GPU attached. For free. Normally, this configuration would &lt;a href=&#34;https://cloud.google.com/compute/pricing&#34; target=&#34;_blank&#34;&gt;cost&lt;/a&gt; $0.57/hr on Google Compute Engine; it sounds low, but adds up when you need to train model(s) for hours to get good results.&lt;/p&gt;
&lt;p&gt;First, I recommend copying the notebook to your own Drive so it&amp;rsquo;ll always be there (and switch to using Google Chrome if you aren&amp;rsquo;t). The Colaboratory VM contains Python 3 and common Python packages for machine learning such as TensorFlow. But you can install more packages directly in the notebook. Like textgenrnn! Just run this cell by clicking into the cell and click the &amp;ldquo;play&amp;rdquo; button (or use Shift + Enter) and it&amp;rsquo;ll take care of the rest:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/pip.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When training a new model, textgenrnn allows you to specify the size and complexity of the neural network with a wide variety of parameters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/config.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s keep these default parameters for now, so run that cell to load them into memory. Run the next cell, which prompts you to upload a file. &lt;em&gt;Any text file should work&lt;/em&gt;, even large text files! For this example, we&amp;rsquo;ll use a 1.1MB text file of Shakespeare plays also &lt;a href=&#34;https://github.com/karpathy/char-rnn/tree/master/data/tinyshakespeare&#34; target=&#34;_blank&#34;&gt;used in the char-rnn demos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/upload.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The next cell initializes an instance of textgenrnn and begins training a custom new text-generating neural network!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/train.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;textgenrnn automatically processes the input text into character sequences ready to train the network. After every 2 epochs (a full pass through the data), the network will generate sample text at different temperatures, which represent the &amp;ldquo;creativity&amp;rdquo; of the text (i.e. it allows the model to make increasingly suboptimal predictions, which can cause hilarity to ensue). I typically like generating text at a temperature of 0.5, but for very well-trained models, you can go up to 1.0.&lt;/p&gt;
&lt;p&gt;The quick model training speed comes from the VM&amp;rsquo;s GPU, which can perform the necessary mathematical operations much faster than with a CPU. However, in the case of recurrent neural networks, Keras recently added a &lt;a href=&#34;https://keras.io/layers/recurrent/#cudnnlstm&#34; target=&#34;_blank&#34;&gt;CuDNN implementation of RNNs&lt;/a&gt; like LSTMs, which can easily tap into the GPU-native code more easily and gain a &lt;em&gt;massive&lt;/em&gt; speed boost (&lt;a href=&#34;http://minimaxir.com/2017/11/benchmark-gpus/&#34; target=&#34;_blank&#34;&gt;about &lt;em&gt;7x as fast&lt;/em&gt;&lt;/a&gt;) compared to previous implementations! In all, for this example dataset and model architecture, training on a GPU took 5-6 minutes an epoch, while on a modern CPU, training took &lt;em&gt;1 hour and 24 minutes&lt;/em&gt; an epoch, a &lt;strong&gt;14x speedup&lt;/strong&gt; on the GPU!&lt;/p&gt;
&lt;p&gt;After training is complete, running the next cell will download three files: a &lt;code&gt;weights&lt;/code&gt; file, a &lt;code&gt;vocabulary&lt;/code&gt; file, and a &lt;code&gt;config&lt;/code&gt; file that are all needed to regenerate your model elsewhere.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/download.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For example, on your own personal computer. Just install textgenrnn + TensorFlow by inputting &lt;code&gt;pip3 install textgenrnn tensorflow&lt;/code&gt; into a terminal, change to the directory where the downloaded files are located, run &lt;code&gt;python3&lt;/code&gt;, and load the model using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textgenrnn import textgenrnn
textgen = textgenrnn(weights_path=&#39;colaboratory_weights.hdf5&#39;,
vocab_path=&#39;colaboratory_vocab.json&#39;,
config_path=&#39;colaboratory_config.json&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s that! No GPU necessary if you&amp;rsquo;re just generating text. You can generate samples (like during training) using &lt;code&gt;textgen.generate_samples()&lt;/code&gt;, generate a ton of samples at any temperature you like to a file using &lt;code&gt;textgen.generate_to_file()&lt;/code&gt;, or incorporate a generated text into a Python script (e.g. a Twitter bot) using &lt;code&gt;textgen.generate(1, return_as_list=True)[0]&lt;/code&gt; to store a text as a variable. You can view more of textgenrnn&amp;rsquo;s functions and capabilities in &lt;a href=&#34;https://github.com/minimaxir/textgenrnn/blob/master/docs/textgenrnn-demo.ipynb&#34; target=&#34;_blank&#34;&gt;this demo Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s some Shakespeare generated with a 50-minute-trained model at a temperature of 0.5:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LUCENTIO:
And then shall good grave to my wife thee;
Thou would the cause the brieved to me,
And let the place and then receives:
The rest you the foren to my ways him child,
And marry that will be a parties and so set me that be deeds
And then the heart and be so shall make the most as he and stand of seat.
GLOUCESTER:
Your father and madam, or shall for the people
And dead to make the truth, or a business
As we brother to the place her great the truth;
And that which to the smaster and her father,
I am I was see the sun have to the royal true.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not too bad, and it&amp;rsquo;s even close to &lt;a href=&#34;https://en.wikipedia.org/wiki/Iambic_pentameter&#34; target=&#34;_blank&#34;&gt;iambic pentameter&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;tweaking-the-model&#34;&gt;Tweaking the Model&lt;/h2&gt;
&lt;p&gt;The most important model configuration options above are &lt;code&gt;rnn_size&lt;/code&gt; and &lt;code&gt;rnn_layers&lt;/code&gt;: these determine the complexity of the network. Typically, you&amp;rsquo;ll see networks in tutorials be a single 128-cell or 256-cell network. However, textgenrnn&amp;rsquo;s architecture is slightly different as it has an attention layer which incorporates &lt;em&gt;all&lt;/em&gt; the preceding model layers. As a result, it&amp;rsquo;s much better to go deeper than wider (e.g. 4x128 is better than 1x512) unless you have a very large amount of text (&amp;gt;10MB). &lt;code&gt;rnn_bidirectional&lt;/code&gt; controls whether the recurrent neural network is bidirectional, that is, it processes the previous characters both forward &lt;em&gt;and&lt;/em&gt; backward (which works great if text follows specific rules, like Shakespeare&amp;rsquo;s character headings). &lt;code&gt;max_length&lt;/code&gt; determines the maximum number of characters for the network to use to predict the next character, which should be increased to let the network learn longer sequences, or decrease for shorter sequences.&lt;/p&gt;
&lt;p&gt;Training has a few helpful options as well. &lt;code&gt;num_epochs&lt;/code&gt; determines the number of full passes of the data; this can be tweaked if you want to train the model even more. &lt;code&gt;batch_size&lt;/code&gt; determines the number of model sequences to train in a step: typically, batch size for deep learning models is 32 or 128, but with a GPU, you can get a speed increase by saturating it with the given 1024 default. &lt;code&gt;train_size&lt;/code&gt; determines the proportion of character samples to train; setting it &lt;code&gt;&amp;lt; 1.0&lt;/code&gt; both speeds up each epoch, and prevents the model from cheating and being able to learn sequences verbatim. (You can set &lt;code&gt;&#39;validation&#39;: True&lt;/code&gt; to run the model on the unused data after each epoch to see if the model is overfitting).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try playing with the parameters more on a new text dataset.&lt;/p&gt;
&lt;h2 id=&#34;word-level-text-generation-with-reddit-data&#34;&gt;Word-Level Text Generation With Reddit Data&lt;/h2&gt;
&lt;p&gt;You might be asking &amp;ldquo;how do you obtain text data&amp;rdquo;? The popular text-generation use cases like lyric generation and movie scripts are copyright-protected so they&amp;rsquo;re harder to find, and even then, it might not be enough text data to train a new model upon (you typically want atleast 100,000 characters).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;, however, has &lt;em&gt;millions&lt;/em&gt; of submission titles which would be great to train for a model. I wrote a &lt;a href=&#34;https://github.com/minimaxir/subreddit-generator&#34; target=&#34;_blank&#34;&gt;helper script&lt;/a&gt; to automatically download the top &lt;em&gt;n&lt;/em&gt; Reddit submissions from a given subreddit over a given period of time. If you choose subreddits with similar linguistic styles in their titles, the subreddits will even blend together! Let&amp;rsquo;s play with the Top 20,000 Submissions in 2017 from each of &lt;a href=&#34;https://www.reddit.com/r/politics/&#34; target=&#34;_blank&#34;&gt;/r/politics&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/technology/&#34; target=&#34;_blank&#34;&gt;/r/technology&lt;/a&gt;, which results in a 3.3MB file: about 3x as much data as the Shakespeare plays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/reddit_data.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One last thing that textgenrnn can do that most char-rnn implementations can&amp;rsquo;t is generate a &lt;em&gt;word level&lt;/em&gt; model (thanks to Keras&amp;rsquo;s tokenizers), where the model uses the &lt;em&gt;n&lt;/em&gt; previous words/punctuation to predict the next word/punctuation. On the plus side, using only words prevents crazy typoes and since it predicts multiple &amp;ldquo;characters&amp;rdquo; at a time, &lt;code&gt;max_length&lt;/code&gt; can be reduced proportionally, dramatically speeding up training. There&amp;rsquo;s two downsides with this approach; since words are all lowercase and punctuation is its own token, the generated text cannot be immediately used without manual editing. Additionally, the model weights will be substantially larger than a character-level model since the word-level model has to store an embedding for each word (up to &lt;code&gt;max_words&lt;/code&gt;, which is 10,000 by default when the vocabulary size for a char-level model is 200-300).&lt;/p&gt;
&lt;p&gt;Another advantage of the Colaboratory notebook is that you can quickly adjust model parameters, upload a new file, and immediately start training it. We&amp;rsquo;ll set &lt;code&gt;&#39;line_delimited&#39;: True&lt;/code&gt; and &lt;code&gt;&#39;rnn_bidirectional&#39;: False&lt;/code&gt; since there aren&amp;rsquo;t specific rules. For word level training, let&amp;rsquo;s set &lt;code&gt;&#39;word_level&#39;: True&lt;/code&gt; and &lt;code&gt;&#39;max_length&#39;: 8&lt;/code&gt; to reflect the new training architecture. Since training length has been reduced to 1/5th, we can set &lt;code&gt;&#39;num_epochs&#39;: 50&lt;/code&gt; and &lt;code&gt;&#39;gen_epoch&#39;: 10&lt;/code&gt; to balance it out. Rerun the config cell to update parameters, upload the Reddit data file, and rerun training.&lt;/p&gt;
&lt;p&gt;The resulting model is much more well trained than the Shakespeare model, and here&amp;rsquo;s a few Reddit submission titles generated at a temperature of 1.0:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;report : 49 % of americans now believe all of the country ’ s effective
people like facebook like it &#39; s 650 of 1 %
uber accused of secretly - security popular service ( likely oklahoma )
equifax breach fallout : your salary is dead
sanders uses texas shooter &#39; s iphone sales
adobe videos will be used to sell the web
apple to hold cash for $ 500 service
fitbit just targeting solar energy
george bush &#39; s concept car ‘ goes for all the biggest controversy .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those look pretty good, although they may need a little editing before posting on social media.&lt;/p&gt;
&lt;h2 id=&#34;followup&#34;&gt;Followup&lt;/h2&gt;
&lt;p&gt;These examples only train the model for little time as a demo of textgenrnn&amp;rsquo;s fast learning; there&amp;rsquo;s nothing stopping you from increasing &lt;code&gt;num_epochs&lt;/code&gt; even more to further refine a model. However, from my experience, the training cell times out after &lt;strong&gt;4 hours&lt;/strong&gt;; set &lt;code&gt;num_epochs&lt;/code&gt; accordingly, although in my experience that&amp;rsquo;s all you need before the network converges.&lt;/p&gt;
&lt;p&gt;In practice, I used this Colaboratory notebook to train &lt;em&gt;many&lt;/em&gt; models for &lt;a href=&#34;https://www.reddit.com/r/SubredditNN/&#34; target=&#34;_blank&#34;&gt;/r/SubredditNN&lt;/a&gt;, a Reddit subreddit where only text-generating neural network bots trained on other subreddits. And the results are very funny:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/text-neural-networks/subredditnn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Although text generating neural networks aren&amp;rsquo;t at the point where they can &lt;a href=&#34;https://www.bloomberg.com/news/features/2018-05-17/i-tried-to-get-an-ai-to-write-this-story-paul-ford&#34; target=&#34;_blank&#34;&gt;write entire articles by themselves&lt;/a&gt;, there are still many opportunities to use it just for fun! And thanks to textgenrnn, it&amp;rsquo;s easy, fast, and cost-effective for anyone to do! Let me know if you make any interesting neural networks with textgenrnn and this Notebook!&lt;/p&gt;</description></item><item><title>Benchmarking Modern GPUs for Maximum Cloud Cost Efficiency in Deep Learning</title><link>/2017/11/benchmark-gpus/</link><pubDate>Tue, 28 Nov 2017 08:30:00 +0000</pubDate><guid>/2017/11/benchmark-gpus/</guid><description>
&lt;p&gt;A few months ago, I &lt;a href=&#34;http://minimaxir.com/2017/06/keras-cntk/&#34; target=&#34;_blank&#34;&gt;performed benchmarks&lt;/a&gt; of deep learning frameworks in the cloud, with a &lt;a href=&#34;http://minimaxir.com/2017/07/cpu-or-gpu/&#34; target=&#34;_blank&#34;&gt;followup&lt;/a&gt; focusing on the cost difference between using GPUs and CPUs. And just a few months later, the landscape has changed, with significant updates to the low-level &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34; target=&#34;_blank&#34;&gt;NVIDIA cuDNN&lt;/a&gt; library which powers the raw learning on the GPU, the &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/Microsoft/CNTK&#34; target=&#34;_blank&#34;&gt;CNTK&lt;/a&gt; deep learning frameworks, and the higher-level &lt;a href=&#34;https://github.com/fchollet/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt; framework which uses TensorFlow/CNTK as backends for easy deep learning model training.&lt;/p&gt;
&lt;p&gt;As a bonus to the framework updates, Google &lt;a href=&#34;https://cloudplatform.googleblog.com/2017/09/introducing-faster-GPUs-for-Google-Compute-Engine.html&#34; target=&#34;_blank&#34;&gt;recently released&lt;/a&gt; the newest generation of NVIDIA cloud GPUs, the Pascal-based P100, onto &lt;a href=&#34;https://cloud.google.com/compute/&#34; target=&#34;_blank&#34;&gt;Google Compute Engine&lt;/a&gt; which touts an up-to-10x performance increase to the current K80 GPUs used in cloud computing. As a bonus bonus, Google recently &lt;a href=&#34;https://cloudplatform.googleblog.com/2017/11/new-lower-prices-for-GPUs-and-preemptible-Local-SSDs.html&#34; target=&#34;_blank&#34;&gt;cut the prices&lt;/a&gt; of both K80 and P100 GPU instances by up to 36%.&lt;/p&gt;
&lt;p&gt;The results of my earlier benchmarks favored &lt;a href=&#34;https://cloud.google.com/preemptible-vms/&#34; target=&#34;_blank&#34;&gt;preemptible&lt;/a&gt; instances with many CPUs as the most cost efficient option (where a preemptable instance can only last for up to 24 hours and could end prematurely). A 36% price cut to GPU instances, in addition to the potential new benefits offered by software and GPU updates, however, might be enough to tip the cost-efficiency scales back in favor of GPUs. It&amp;rsquo;s a good idea to rerun the experiment with updated VMs and see what happens.&lt;/p&gt;
&lt;h2 id=&#34;benchmark-setup&#34;&gt;Benchmark Setup&lt;/h2&gt;
&lt;p&gt;As with the original benchmark, I set up a &lt;a href=&#34;https://github.com/minimaxir/keras-cntk-docker&#34; target=&#34;_blank&#34;&gt;Docker container&lt;/a&gt; containing the deep learning frameworks (based on cuDNN 6, the latest version of cuDNN natively supported by the frameworks) that can be used to train each model independently. The &lt;a href=&#34;https://github.com/minimaxir/keras-cntk-benchmark/tree/master/v2/test_files&#34; target=&#34;_blank&#34;&gt;Keras benchmark scripts&lt;/a&gt; run on the containers are based off of &lt;em&gt;real world&lt;/em&gt; use cases of deep learning.&lt;/p&gt;
&lt;p&gt;The 6 hardware/software configurations and Google Compute Engine &lt;a href=&#34;https://cloud.google.com/compute/pricing&#34; target=&#34;_blank&#34;&gt;pricings&lt;/a&gt; for the tests are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A K80 GPU (attached to a &lt;code&gt;n1-standard-1&lt;/code&gt; instance), tested with both TensorFlow (1.4) and CNTK (2.2): &lt;strong&gt;$0.4975 / hour&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A P100 GPU (attached to a &lt;code&gt;n1-standard-1&lt;/code&gt; instance), tested with both TensorFlow and CNTK: &lt;strong&gt;$1.5075 / hour&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A preemptable &lt;code&gt;n1-highcpu-32&lt;/code&gt; instance, with 32 vCPUs based on the Intel Skylake architecture, tested with TensorFlow only: &lt;strong&gt;$0.2400 / hour&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A preemptable &lt;code&gt;n1-highcpu-16&lt;/code&gt; instance, with 16 vCPUs based on the Intel Skylake architecture, tested with TensorFlow only: &lt;strong&gt;$0.1200 / hour&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A single K80 GPU uses &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; a GPU board while a single P100 uses a full GPU board, which in an ideal world would suggest that the P100 is twice as fast at the K80 at minimum. But even so, the P100 configuration is about 3 times as expensive, so even if a model is trained in half the time, it may not necessarily be cheaper with the P100.&lt;/p&gt;
&lt;p&gt;Also, the CPU tests use TensorFlow &lt;em&gt;as installed via the recommended method&lt;/em&gt; through pip, since compiling the TensorFlow binary from scratch to take advantage of CPU instructions as &lt;a href=&#34;http://minimaxir.com/2017/07/cpu-or-gpu/&#34; target=&#34;_blank&#34;&gt;with my previous test&lt;/a&gt; is not a pragmatic workflow for casual use.&lt;/p&gt;
&lt;h2 id=&#34;benchmark-results&#34;&gt;Benchmark Results&lt;/h2&gt;
&lt;p&gt;When a fresh-out-of-a-AI-MOOC engineer wants to experiment with deep learning in the cloud, typically they use a K80 + TensorFlow setup, so we&amp;rsquo;ll use that as the &lt;em&gt;base configuration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For each model architecture and software/hardware configuration, I calculate the &lt;strong&gt;total training time relative to the base configuration instance training&lt;/strong&gt; for running the model training for the provided test script. In all cases, the P100 GPU &lt;em&gt;should&lt;/em&gt; perform better than the K80, and 32 vCPUs &lt;em&gt;should&lt;/em&gt; train faster than 16 vCPUs. The question is how &lt;em&gt;much&lt;/em&gt; faster?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start using the &lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34; target=&#34;_blank&#34;&gt;MNIST dataset&lt;/a&gt; of handwritten digits plus the common multilayer perceptron (MLP) architecture, with dense fully-connected layers. Lower training time is better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For this task, CNTK appears to be more effective than TensorFlow. Indeed, the P100 is faster than the K80 for the corresponding framework, although it&amp;rsquo;s not a dramatic difference. However, since the task is simple, the CPU performance is close to that of the GPU, which implies that the GPU is not as cost effective for a simple architecture.&lt;/p&gt;
&lt;p&gt;For each model architecture and configuration, I calculate a &lt;strong&gt;normalized training cost relative to the cost of the base configuration training&lt;/strong&gt;. Because GCE instance costs are prorated, we can simply calculate experiment cost by multiplying the total number of seconds the experiment runs by the cost of the instance (per second).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Unsurprisingly, CPUs are more cost effective. However, the P100 is more cost &lt;em&gt;ineffective&lt;/em&gt; for this task than the K80.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s look at the same dataset with a convolutional neural network (CNN) approach for digit classification. Since CNNs are typically used for computer vision tasks, new graphic card architectures are optimized for CNN workflows, so it will be interesting to see how the P100 performs compared to the K80:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Indeed, the P100 is twice as fast and the K80, but due to the huge cost premium, it&amp;rsquo;s not cost effective for this simple task. However, CPUs do not perform well on this task either, so notably the base configuration is the best configuration.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go deeper with CNNs and look at the &lt;a href=&#34;https://www.cs.toronto.edu/%7Ekriz/cifar.html&#34; target=&#34;_blank&#34;&gt;CIFAR-10&lt;/a&gt; image classification dataset, and a model which utilizes a deep covnet + a multilayer perceptron and ideal for image classification (similar to the &lt;a href=&#34;https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3&#34; target=&#34;_blank&#34;&gt;VGG-16&lt;/a&gt; architecture).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Similar results to that of a normal MLP. Nothing fancy.&lt;/p&gt;
&lt;p&gt;The Bidirectional long-short-term memory (LSTM) architecture is great for working with text data like IMDb reviews. When I did &lt;a href=&#34;http://minimaxir.com/2017/06/keras-cntk/&#34; target=&#34;_blank&#34;&gt;my first benchmark article&lt;/a&gt;, I noticed that CNTK performed significantly better than TensorFlow, as &lt;a href=&#34;https://news.ycombinator.com/item?id=14538086&#34; target=&#34;_blank&#34;&gt;commenters on Hacker News&lt;/a&gt; noted that TensorFlow uses an inefficient implementation of the LSTM on the GPU.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/cntk-old.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, with Keras&amp;rsquo;s &lt;a href=&#34;https://keras.io/layers/recurrent/#cudnnlstm&#34; target=&#34;_blank&#34;&gt;new CuDNNRNN layers&lt;/a&gt; which leverage cuDNN, this inefficiency may be fixed, so for the K80/P100 TensorFlow GPU configs, I use a CuDNNLSTM layer instead of a normal LSTM layer. So let&amp;rsquo;s take another look:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;WOAH.&lt;/em&gt; TensorFlow is now more than &lt;em&gt;three times as fast&lt;/em&gt; than CNTK! (And compared against my previous benchmark, TensorFlow on the K80 w/ the CuDNNLSTM is about &lt;em&gt;7x as fast&lt;/em&gt; as it once was!) Even the CPU-only versions of TensorFlow are faster than CNTK on the GPU now, which implies significant improvements in the ecosystem outside of the CuDNNLSTM layer itself. (And as a result, CPUs are still more cost efficient)&lt;/p&gt;
&lt;p&gt;Lastly, LSTM text generation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Friedrich_Nietzsche&#34; target=&#34;_blank&#34;&gt;Nietzsche&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://s3.amazonaws.com/text-datasets/nietzsche.txt&#34; target=&#34;_blank&#34;&gt;writings&lt;/a&gt; follows similar patterns to the other architectures, but without the drastic hit to the GPU.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/dl-cpu-gpu-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The biggest surprise of these new benchmarks is that there is no configuration where the P100 is the most cost-effective option, even though the P100 is indeed faster than the K80 in all tests. Although per &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34; target=&#34;_blank&#34;&gt;the cuDNN website&lt;/a&gt;, there is apparently only a 2x speed increase between the performance of the K80 and P100 using cuDNN 6, which is mostly consistent with the results of my benchmarks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/benchmark-gpus/cudnn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I did not include a multi-GPU configuration in the benchmark data visualizations above using Keras&amp;rsquo;s new &lt;code&gt;multi_gpu_model&lt;/code&gt; &lt;a href=&#34;https://keras.io/utils/#multi_gpu_model&#34; target=&#34;_blank&#34;&gt;function&lt;/a&gt; because in my testing, the multi-GPU training &lt;em&gt;was equal to or worse than a single GPU&lt;/em&gt; in all tests.&lt;/p&gt;
&lt;p&gt;Taking these together, it&amp;rsquo;s possible that the overhead introduced by parallel, advanced architectures &lt;em&gt;eliminates the benefits&lt;/em&gt; for &amp;ldquo;normal&amp;rdquo; deep learning workloads which do not fully saturate the GPU. Rarely do people talk about diminishing returns in GPU performance with deep learning.&lt;/p&gt;
&lt;p&gt;In the future, I want to benchmark deep learning performance against more advanced deep learning use cases such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Reinforcement_learning&#34; target=&#34;_blank&#34;&gt;reinforcement learning&lt;/a&gt; and deep CNNs like &lt;a href=&#34;https://github.com/tensorflow/models/tree/master/research/inception&#34; target=&#34;_blank&#34;&gt;Inception&lt;/a&gt;. But that doesn&amp;rsquo;t mean these benchmarks are not relevant; as stated during the benchmark setup, the GPUs were tested against typical deep learning use cases, and now we see the tradeoffs that result.&lt;/p&gt;
&lt;p&gt;In all, with the price cuts on GPU instances, cost-performance is often &lt;em&gt;on par&lt;/em&gt; with preemptable CPU instances, which is an advantage if you want to train models faster and not risk the instance being killed unexpectedly. And there is still a lot of competition in this space: &lt;a href=&#34;https://www.amazon.com&#34; target=&#34;_blank&#34;&gt;Amazon&lt;/a&gt; offers a &lt;code&gt;p2.xlarge&lt;/code&gt; &lt;a href=&#34;https://aws.amazon.com/ec2/spot/&#34; target=&#34;_blank&#34;&gt;Spot Instance&lt;/a&gt; with a K80 GPU for $0.15-$0.20 an hour, less than half of the corresponding Google Compute Engine K80 GPU instance, although with &lt;a href=&#34;https://aws.amazon.com/ec2/spot/details/&#34; target=&#34;_blank&#34;&gt;a few bidding caveats&lt;/a&gt; which I haven&amp;rsquo;t fully explored yet. Competition will drive GPU prices down even further, and training deep learning models will become even easier.&lt;/p&gt;
&lt;p&gt;And as the cuDNN chart above shows, things will get &lt;em&gt;very&lt;/em&gt; interesting once Volta-based GPUs like the V100 are generally available and the deep learning frameworks support cuDNN 7 by default.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE &lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;17&lt;/sub&gt;&lt;/strong&gt;: &lt;em&gt;As pointed out by &lt;a href=&#34;https://news.ycombinator.com/item?id=15941682&#34; target=&#34;_blank&#34;&gt;dantiberian on Hacker News&lt;/a&gt;, Google Compute Engine now supports &lt;a href=&#34;https://cloud.google.com/compute/docs/instances/preemptible#preemptible_with_gpu&#34; target=&#34;_blank&#34;&gt;preemptible GPUs&lt;/a&gt;, which was apparently added after this post went live. Preemptable GPUs are exactly half the price of normal GPUs (for both K80s and P100s; $0.73/hr and $0.22/hr respectively), so they&amp;rsquo;re about double the cost efficiency (when factoring in the cost of the base preemptable instance), which would put them squarely ahead of CPUs in all cases. (and since the CPU instances used here were also preemptable, it&amp;rsquo;s apples-to-apples)&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;All scripts for running the benchmark are available in &lt;a href=&#34;https://github.com/minimaxir/keras-cntk-benchmark/tree/master/v2&#34; target=&#34;_blank&#34;&gt;this GitHub repo&lt;/a&gt;. You can view the R/ggplot2 code used to process the logs and create the visualizations in &lt;a href=&#34;http://minimaxir.com/notebooks/benchmark-gpus/&#34; target=&#34;_blank&#34;&gt;this R Notebook&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Making Magic: the GIFening</title><link>/2017/11/magic-the-gifening/</link><pubDate>Tue, 07 Nov 2017 08:10:00 +0000</pubDate><guid>/2017/11/magic-the-gifening/</guid><description>
&lt;p&gt;After working at &lt;a href=&#34;https://www.buzzfeed.com/&#34; target=&#34;_blank&#34;&gt;BuzzFeed&lt;/a&gt; for a few months, I&amp;rsquo;m now an expert in the proper usage of GIFs. My favorite GIF tool is the &lt;a href=&#34;https://giphy.com&#34; target=&#34;_blank&#34;&gt;/giphy&lt;/a&gt; command in &lt;a href=&#34;https://slack.com&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt;, which &lt;a href=&#34;https://get.slack.help/hc/en-us/articles/204714258-Add-Giphy-search-to-Slack&#34; target=&#34;_blank&#34;&gt;puts a random GIF&lt;/a&gt; according to a given phrase into the chat, with better-than-expected appropriateness of the phrase to the GIF.&lt;/p&gt;
&lt;p&gt;Completely unrelated, I recently rediscovered &lt;a href=&#34;https://github.com/Zulko/moviepy&#34; target=&#34;_blank&#34;&gt;MoviePy&lt;/a&gt;, a Python library for programmatically editing videos and GIFs without requiring an expensive and slow video editing program. I had played with MoviePy a bit in 2014 when it was &lt;a href=&#34;http://zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/#&#34; target=&#34;_blank&#34;&gt;first released&lt;/a&gt; and &lt;a href=&#34;https://news.ycombinator.com/item?id=7121104&#34; target=&#34;_blank&#34;&gt;became viral&lt;/a&gt;, but couldn&amp;rsquo;t think of a creative application for the library at the time.&lt;/p&gt;
&lt;p&gt;On a boring weekend I had a silly idea: why not create a program to superimpose appropriate GIFs onto &lt;a href=&#34;https://magic.wizards.com/en&#34; target=&#34;_blank&#34;&gt;Magic: the Gathering&lt;/a&gt; cards using these two tools? And even better, why not &lt;em&gt;automate&lt;/em&gt; both the creation of the card GIFs and the tweeting of a new GIF every few hours?&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/sxqKUYHmfv&#34;&gt;pic.twitter.com/sxqKUYHmfv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Magic: The GIFening (@MTGIFening) &lt;a href=&#34;https://twitter.com/MTGIFening/status/913993793052880897?ref_src=twsrc%5Etfw&#34;&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As it turns out, creating a Twitter bot to tweet Magic card GIFs is &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening&#34; target=&#34;_blank&#34;&gt;easy to implement&lt;/a&gt;, but with a few interesting caveats. The end result is &lt;a href=&#34;https://twitter.com/MTGIFening&#34; target=&#34;_blank&#34;&gt;@MTGIFening&lt;/a&gt;. Here&amp;rsquo;s how I typically create my crazy apps, step by step.&lt;/p&gt;
&lt;h2 id=&#34;feasibility-analysis&#34;&gt;Feasibility Analysis&lt;/h2&gt;
&lt;p&gt;Like all my data analysis projects, I checked if it&amp;rsquo;s possible to complete the project in a way that won&amp;rsquo;t suck up a lot of free time hacking out convoluted solutions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can I easily get a list of all Magic cards?&lt;/strong&gt; Yes, via &lt;a href=&#34;https://mtgjson.com&#34; target=&#34;_blank&#34;&gt;MTG JSON&lt;/a&gt;, which has a downloadable JSON dump of all Magic cards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can I easily get random GIFs from GIPHY?&lt;/strong&gt; Yes, there is a /random endpoint in the &lt;a href=&#34;https://developers.giphy.com&#34; target=&#34;_blank&#34;&gt;GIPHY API&lt;/a&gt; which returns a random GIF for a specified phrase, like the /giphy Slack command. The GIPHY API requires registration, but has generous rate limits (10k requests/day).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can I easily composite a GIF onto an image with MoviePy?&lt;/strong&gt; Yes, compositing is a &lt;em&gt;primary use case&lt;/em&gt; for the library, with many tutorials in the documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can I easily get an image for a specified Magic card?&lt;/strong&gt; Unsure. The official tool for viewing Magic card images is &lt;a href=&#34;http://gatherer.wizards.com/Pages/Default.aspx&#34; target=&#34;_blank&#34;&gt;Gatherer&lt;/a&gt;. After checking the image source for the cards, each card image in Gatherer has a URL that follows this schema: &lt;code&gt;http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=XXXXX&amp;amp;type=card&lt;/code&gt;. That&amp;rsquo;s easy to understand, but what&amp;rsquo;s a multiverseid?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is there a mapping of multiverseid to Magic cards from MTG JSON?&lt;/strong&gt; Yes, the multiverseid for each Magic card is &lt;a href=&#34;https://mtgjson.com/documentation.html&#34; target=&#34;_blank&#34;&gt;present as a field&lt;/a&gt; in the &amp;ldquo;All Sets&amp;rdquo; dataset (but not the &amp;ldquo;All Cards&amp;rdquo; dataset oddly). A quick manual check showed that using the multiverseid from the MTG JSON dataset results in the correct image from Gatherer.&lt;/p&gt;
&lt;p&gt;Everything looked good to me. Let&amp;rsquo;s dive right in, &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commits/master&#34; target=&#34;_blank&#34;&gt;commit by commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementing-magic-the-gifening&#34;&gt;Implementing Magic: The GIFening&lt;/h2&gt;
&lt;p&gt;The first thing I did was process the Magic card data, although for this project I limit the type of cards to Instants and Sorceries, which in Magic game mechanics represent &amp;ldquo;actions&amp;rdquo; and are more suitable for GIFs. &lt;em&gt;For each set, retrieve the cards in the set; for each card, if it&amp;rsquo;s an Instant/Sorcery, log its name and multiverseid&lt;/em&gt;. Thanks to the magic of Python, this pseudocode is close to the &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commit/3f626ae5d49a567322c6237210ab554281d462f4&#34; target=&#34;_blank&#34;&gt;actual code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next objective was to implement the GIPHY API to get a GIF. The very first thing I did is add a local secrets file containing my personal API key for GIPHY, and &lt;em&gt;immediately&lt;/em&gt; log the secrets file in a &lt;code&gt;.gitignore&lt;/code&gt; so I don&amp;rsquo;t accidentally leak it. GIPHY has an &lt;a href=&#34;https://developers.giphy.com/explorer/&#34; target=&#34;_blank&#34;&gt;API Explorer&lt;/a&gt; which allows developers to quickly test an example input phrase and see corresponding output from the API. For example, here&amp;rsquo;s part of what the API returns for &lt;a href=&#34;http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=151108&#34; target=&#34;_blank&#34;&gt;Invert the Skies&lt;/a&gt; (although since it&amp;rsquo;s the /random endpoint, your results may vary):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;image_url&amp;quot;: &amp;quot;https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.gif&amp;quot;,
&amp;quot;image_mp4_url&amp;quot;: &amp;quot;https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.mp4&amp;quot;,
&amp;quot;image_frames&amp;quot;: &amp;quot;31&amp;quot;,
&amp;quot;image_width&amp;quot;: &amp;quot;480&amp;quot;,
&amp;quot;image_height&amp;quot;: &amp;quot;270&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;image_url&lt;/code&gt; corresponds to the &lt;a href=&#34;https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.gif&#34; target=&#34;_blank&#34;&gt;raw GIF&lt;/a&gt; unsurprisingly, but as a bonus, GIPHY also includes a link to a &lt;a href=&#34;https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.mp4&#34; target=&#34;_blank&#34;&gt;MP4 video&lt;/a&gt; of the GIF, which has a much smaller file size and is better to use for compositing. The API output also includes the width and height (in pixels) of the GIF. The art in a Magic card follows a 4:3 &lt;a href=&#34;https://en.wikipedia.org/wiki/Aspect_ratio_(image)&#34; target=&#34;_blank&#34;&gt;aspect ratio&lt;/a&gt;, i.e. the width divided by the height equals 1.33. If the dimensions of the GIF are too far outside that ratio, resizing the GIFs to fit the Magic art frame will result in noticeable distortion. I minimized this distortion by checking and seeing if the random GIF has a width:height ratio between 1.2 and 1.6 before accepting it. Since there&amp;rsquo;s a chance for failure (along with potential unknown bugs that the random GIF could hit), I added a limit to the number of attempts to retrieve an appropriate GIF. All done in &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commit/c2e4b6b9d58d1aa360f6f67a049ec962d0430b91&#34; target=&#34;_blank&#34;&gt;one commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting the card image from Gatherer is &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commit/c92440cd459640da9346cf31a79e768ac8641ea9&#34; target=&#34;_blank&#34;&gt;trivial&lt;/a&gt;, so then I worked on combining the GIF and the card image. MoviePy has a &lt;a href=&#34;http://zulko.github.io/moviepy/getting_started/compositing.html&#34; target=&#34;_blank&#34;&gt;good tutorial&lt;/a&gt; for specifying the position of one clip onto another by specifying the upper-left corner of the bottom-image where the GIF will be placed, while simultaneously resizing the GIF to a given width and height.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/magic-the-gifening/videoWH.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I manually zoomed into the card image using a photo editor (&lt;a href=&#34;http://www.pixelmator.com/mac/&#34; target=&#34;_blank&#34;&gt;Pixelmator&lt;/a&gt;) to find the upper-left corner of the card art:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/magic-the-gifening/zoomin.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this case, the pixel coordinates for the upper-left corner of the card art is &lt;code&gt;(17,35)&lt;/code&gt; The upper-right and bottom-left corners can be used to determine the target width and height of the GIF respectively, and can be found the same way. Simply composite the Magic card with the resized-and-positioned GIF, set the duration of the &amp;ldquo;new&amp;rdquo; GIF to that of the source GIF, and &lt;code&gt;write_gif&lt;/code&gt;. &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commit/55a52ddfc7f43d128c08c8a243254e08a171de5e&#34; target=&#34;_blank&#34;&gt;That&amp;rsquo;s that&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;To finish things up, I wrote a script to load all the cards from the processed card list into memory, select a card at random, use the helper functions to retrieve a GIPHY GIF and composite it with the card, then upload the resulting GIF to Twitter. I haven&amp;rsquo;t worked with the Twitter API in awhile; a quick Google search for a modern Twitter API client in Python returns &lt;a href=&#34;https://github.com/ryanmcgrath/twython&#34; target=&#34;_blank&#34;&gt;Twython&lt;/a&gt;, which conveniently includes an example on &lt;a href=&#34;https://twython.readthedocs.io/en/latest/usage/advanced_usage.html#updating-status-with-image&#34; target=&#34;_blank&#34;&gt;how to upload an image to Twitter&lt;/a&gt;! And after running the script a few times, the full workflow indeed works!&lt;/p&gt;
&lt;p&gt;Not bad for a couple hours of scripting. But I was not close to finished.&lt;/p&gt;
&lt;h2 id=&#34;the-endless-fun-of-qa&#34;&gt;The Endless Fun of QA&lt;/h2&gt;
&lt;p&gt;One of the reasons I enjoy doing silly projects (especially silly data projects) is because I tend to hit unsexy edge cases which typical development blogs and tutorials rarely discuss. In this case, I quickly found that the Twitter API has a &lt;a href=&#34;https://developer.twitter.com/en/docs/media/upload-media/overview&#34; target=&#34;_blank&#34;&gt;5 MB limit&lt;/a&gt; on image uploads, which is a problem as the resulting GIFs are huge and often randomly exceed that limit (looking back on it, there is a different endpoint intended for GIF uploads, counterintuitively).&lt;/p&gt;
&lt;p&gt;In actuality, GIFs on Twitter are actually displayed as videos, in order to save bandwidth. Since Twitter transcodes uploaded GIFs anyways, it makes more sense to upload &lt;em&gt;audioless videos&lt;/em&gt; instead of GIFs (and as a bonus, after the death of Vine, Twitter will auto-loop videos less than 6 seconds).&lt;/p&gt;
&lt;p&gt;Creating videos is easy to do with MoviePy, just do a &lt;code&gt;write_videofile&lt;/code&gt; instead of &lt;code&gt;write_gif&lt;/code&gt;, and use Twython&amp;rsquo;s video uploading example to upload. The result is an &amp;ldquo;unknown&amp;rdquo; error on upload. I verify by uploading the video manually to Twitter&amp;hellip;and the Twitter UI fails to recognize it as a video. But the video itself plays fine in QuickTime. This is the annoying type of coding problem that&amp;rsquo;s too specific for &lt;a href=&#34;https://stackoverflow.com&#34; target=&#34;_blank&#34;&gt;Stack Overflow&lt;/a&gt; to provide help. After a bit of trial and error involving video codecs and settings, the solution was to pass a &lt;code&gt;-pix_fmt yuv420p&lt;/code&gt; parameter to the video encoder because Twitter apparently only likes legacy video container formats. Oh well. It worked, and both Twitter manual and API uploads worked successfully.&lt;/p&gt;
&lt;p&gt;I also ran into an issue where Twitter refused to accept supershort video, where the source GIF was only a couple frames. A solution is to loop the GIF to atleast 2 seconds if it&amp;rsquo;s shorter, which somehow fixed that problem.&lt;/p&gt;
&lt;p&gt;(As I was writing this post a month later, I discovered that both of these video upload constraints &lt;a href=&#34;https://developer.twitter.com/en/docs/media/upload-media/uploading-media/media-best-practices&#34; target=&#34;_blank&#34;&gt;are indeed covered in the Twitter documentation&lt;/a&gt;, which makes me look very silly in retrospect!)&lt;/p&gt;
&lt;p&gt;These changes fixed most of the upload issues. However, when writing the initial script, I forgot that the borders of Magic cards have &lt;a href=&#34;https://mtg.gamepedia.com/Card_frame&#34; target=&#34;_blank&#34;&gt;changed over the years&lt;/a&gt;, which also changed the position and size of the card art. &lt;strong&gt;Is there a way to check when a card was printed?&lt;/strong&gt; Yes, the &amp;ldquo;All Sets&amp;rdquo; dataset contains the release date of the set, so with that, I can &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commit/0dfb678f1955f50b54b632e57087df847ec16f05&#34; target=&#34;_blank&#34;&gt;hard code&lt;/a&gt; the dates of sets where the borders changed, and note the border type at printing time. I then used Pixelmator again to note the new art dimensions for that type of border, and used conditional statements to retrieve the correct dimensions for the type of border when compositing.&lt;/p&gt;
&lt;p&gt;Lastly, I added general &lt;code&gt;try/catch&lt;/code&gt; error handling to prevent the script from breaking fatally and to try again with a different card if it does. That covers most of the edge cases!&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;After running the script many times after all the fixes in place, I felt the Twitter account was good to go. The initial results showed a lot of promise:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/BsZ7eIcunl&#34;&gt;pic.twitter.com/BsZ7eIcunl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Magic: The GIFening (@MTGIFening) &lt;a href=&#34;https://twitter.com/MTGIFening/status/913981726182981632?ref_src=twsrc%5Etfw&#34;&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/picJJk6mBm&#34;&gt;pic.twitter.com/picJJk6mBm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Magic: The GIFening (@MTGIFening) &lt;a href=&#34;https://twitter.com/MTGIFening/status/912525635632775168?ref_src=twsrc%5Etfw&#34;&gt;September 26, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Surprisingly, the script was able to generate &lt;em&gt;visual puns&lt;/em&gt; in cards, completely by chance!&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/AnpzU8xVho&#34;&gt;pic.twitter.com/AnpzU8xVho&lt;/a&gt;&lt;/p&gt;&amp;mdash; Magic: The GIFening (@MTGIFening) &lt;a href=&#34;https://twitter.com/MTGIFening/status/913972922330497024?ref_src=twsrc%5Etfw&#34;&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/01vGRcq2Mj&#34;&gt;pic.twitter.com/01vGRcq2Mj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Magic: The GIFening (@MTGIFening) &lt;a href=&#34;https://twitter.com/MTGIFening/status/913987002235740160?ref_src=twsrc%5Etfw&#34;&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The next step was to automate the script to run and post Tweets at a specific time interval. After experimenting a bit, I found that &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening/commit/f355d5e80503c67c6e1a0e5fd1b744faf3cf8223&#34; target=&#34;_blank&#34;&gt;the best solution&lt;/a&gt; was to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Cron&#34; target=&#34;_blank&#34;&gt;cron job&lt;/a&gt; in a &lt;a href=&#34;https://www.docker.com/what-docker&#34; target=&#34;_blank&#34;&gt;Docker container&lt;/a&gt; containing the script and its dependencies, for complicated reasons which will require another blog post to explain.&lt;/p&gt;
&lt;p&gt;After letting Magic: the GIFening run for a few days without fatal issues, I decided to publicize the Twitter account and posted it to the &lt;a href=&#34;https://www.reddit.com/r/magicTCG/comments/7598g5/i_made_a_twitter_bot_which_tweets_magic_cards/&#34; target=&#34;_blank&#34;&gt;/r/MagicTCG subreddit&lt;/a&gt; and &lt;a href=&#34;https://news.ycombinator.com/item?id=15449955&#34; target=&#34;_blank&#34;&gt;Hacker News&lt;/a&gt;. To my surprise, the project performed extremely well on both with 100+ upvotes on each, and the &lt;a href=&#34;https://github.com/minimaxir/magic-the-gifening&#34; target=&#34;_blank&#34;&gt;GitHub repo&lt;/a&gt; itself received 100+ Stars.&lt;/p&gt;
&lt;p&gt;In all, making Magic: the GIFening was a fun project. In retrospect, talking though the commits made me realize I performed many bad coding practices in a haste to get the project done ASAP (specifically, checking to see if certain edge cases are documented, violating &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;, and forgetting to remove specific types of cards like &lt;a href=&#34;https://twitter.com/MTGIFening/status/924969160307744769&#34; target=&#34;_blank&#34;&gt;split cards&lt;/a&gt;). Obviously there isn&amp;rsquo;t a multimillion-dollar startup opportunity in creating random GIFs of Magic cards, but I&amp;rsquo;ll fix a few remaining issues and keep the Twitter bot running.&lt;/p&gt;</description></item><item><title>Predicting the Success of a Reddit Submission with Deep Learning and Keras</title><link>/2017/06/reddit-deep-learning/</link><pubDate>Mon, 26 Jun 2017 09:00:00 +0000</pubDate><guid>/2017/06/reddit-deep-learning/</guid><description>
&lt;p&gt;I&amp;rsquo;ve been trying to figure out what makes a &lt;a href=&#34;https://www.reddit.com&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt; submission &amp;ldquo;good&amp;rdquo; for years. If we assume the number of upvotes on a submission is a fair proxy for submission quality, optimizing a statistical model for Reddit data with submission score as a response variable might lead to interesting (and profitable) insights when transferred into other domains, such as Facebook Likes and Twitter Favorites.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/reddit-example.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;An important part of a Reddit submission is the submission &lt;strong&gt;title&lt;/strong&gt;. Like news headlines, a catchy title will make a user &lt;a href=&#34;http://minimaxir.com/2015/10/reddit-topwords/&#34; target=&#34;_blank&#34;&gt;more inclined&lt;/a&gt; to engage with a submission and potentially upvote.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-topwords/mean-054-Fitness.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;strong&gt;time when the submission is made&lt;/strong&gt; is &lt;a href=&#34;http://minimaxir.com/2015/10/reddit-bigquery/&#34; target=&#34;_blank&#34;&gt;important&lt;/a&gt;; submitting when user activity is the highest tends to lead to better results if you are trying to maximize exposure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-bigquery/reddit-bigquery-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The actual &lt;strong&gt;content&lt;/strong&gt; of the Reddit submission such as images/links to a website is likewise important, but good content is relatively difficult to optimize.&lt;/p&gt;
&lt;p&gt;Can the magic of deep learning reconcile these concepts and create a model which can predict if a submission is a good submission? Thanks to &lt;a href=&#34;https://github.com/fchollet/keras&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt;, performing deep learning on a very large number of Reddit submissions is actually pretty easy. Performing it &lt;em&gt;well&lt;/em&gt; is a different story.&lt;/p&gt;
&lt;h2 id=&#34;getting-the-data-feature-engineering&#34;&gt;Getting the Data + Feature Engineering&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s difficult to retrieve the content of millions of Reddit submissions at scale (ethically), so let&amp;rsquo;s initially start by building a model using submissions on &lt;a href=&#34;https://www.reddit.com/r/AskReddit/&#34; target=&#34;_blank&#34;&gt;/r/AskReddit&lt;/a&gt;: Reddit&amp;rsquo;s largest subreddit which receives 8,000+ submissions each day. /r/AskReddit is a self-post only subreddit with no external links, allowing us to focus on only the submission title and timing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://minimaxir.com/2015/10/reddit-bigquery/&#34; target=&#34;_blank&#34;&gt;As always&lt;/a&gt;, we can collect large amounts of Reddit data from the public Reddit dataset on &lt;a href=&#34;https://cloud.google.com/bigquery/&#34; target=&#34;_blank&#34;&gt;BigQuery&lt;/a&gt;. The submission &lt;code&gt;title&lt;/code&gt; is available by default. The raw timestamp of the submission is also present, allowing us to extract the &lt;code&gt;hour&lt;/code&gt; of submission (adjusted to Eastern Standard Time) and &lt;code&gt;dayofweek&lt;/code&gt;, as used in the heatmap above. But why stop there? Since /r/AskReddit receives hundreds of submissions &lt;em&gt;every hour&lt;/em&gt; on average, we should look at the &lt;code&gt;minute&lt;/code&gt; level to see if there are any deeper trends (e.g. there are only 30 slots available on the first page of /new and since there is so much submission activity, it might be more advantageous to submit during off-peak times). Lastly, to account for potential changes in behavior as the year progresses, we should add a &lt;code&gt;dayofyear&lt;/code&gt; feature, where January 1st = 1, January 2nd = 2, etc which can also account for variance due to atypical days like holidays.&lt;/p&gt;
&lt;p&gt;Instead of predicting the raw number on upvotes of the Reddit submission (as the distribution of submission scores is heavily skewed), we should predict &lt;strong&gt;whether or not the submission is good&lt;/strong&gt;, shaping the problem as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Logistic_regression&#34; target=&#34;_blank&#34;&gt;logistic regression&lt;/a&gt;. In this case, let&amp;rsquo;s define a &amp;ldquo;good submission&amp;rdquo; as one whose score is equal to or above the &lt;strong&gt;50th percentile (median) of all submissions&lt;/strong&gt; in /r/AskReddit. Unfortunately, the median score ends up being &lt;strong&gt;2 points&lt;/strong&gt;; although &amp;ldquo;one upvote&amp;rdquo; might be a low threshold for a &amp;ldquo;good&amp;rdquo; submission, it splits the dataset into 64% bad submissions, 36% good submissions, and setting the percentile threshold higher will result in a very unbalanced dataset for model training (a score of 2+ also implies that the submission did not get downvoted to death, which is useful).&lt;/p&gt;
&lt;p&gt;Gathering all &lt;strong&gt;976,538 /r/AskReddit submissions&lt;/strong&gt; from January 2017 to April 2017 should be enough data for this project. Here&amp;rsquo;s the final BigQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;#standardSQL
SELECT id, title,
CAST(FORMAT_TIMESTAMP(&#39;%H&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS hour,
CAST(FORMAT_TIMESTAMP(&#39;%M&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS minute,
CAST(FORMAT_TIMESTAMP(&#39;%w&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS dayofweek,
CAST(FORMAT_TIMESTAMP(&#39;%j&#39;, TIMESTAMP_SECONDS(created_utc), &#39;America/New_York&#39;) AS INT64) AS dayofyear,
IF(PERCENT_RANK() OVER (ORDER BY score ASC) &amp;gt;= 0.50, 1, 0) as is_top_submission
FROM `fh-bigquery.reddit_posts.*`
WHERE (_TABLE_SUFFIX BETWEEN &#39;2017_01&#39; AND &#39;2017_04&#39;)
AND subreddit = &#39;AskReddit&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/bigquery.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;model-architecture&#34;&gt;Model Architecture&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;If you want to see the detailed data transformations and Keras code examples/outputs for this post, you can view &lt;a href=&#34;https://github.com/minimaxir/predict-reddit-submission-success/blob/master/predict_askreddit_submission_success_timing.ipynb&#34; target=&#34;_blank&#34;&gt;this Jupyter Notebook&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Text processing is a good use case for deep learning, as it can identify relationships between words where older methods like &lt;a href=&#34;https://en.wikipedia.org/wiki/Tf–idf&#34; target=&#34;_blank&#34;&gt;tf-idf&lt;/a&gt; can&amp;rsquo;t. Keras, a high level deep-learning framework on top of lower frameworks like &lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt;, can easily convert a list of texts to a &lt;a href=&#34;https://keras.io/preprocessing/sequence/&#34; target=&#34;_blank&#34;&gt;padded sequence&lt;/a&gt; of &lt;a href=&#34;https://keras.io/preprocessing/text/&#34; target=&#34;_blank&#34;&gt;index tokens&lt;/a&gt; that can interact with deep learning models, along with many other benefits. Data scientists often use &lt;a href=&#34;https://en.wikipedia.org/wiki/Recurrent_neural_network&#34; target=&#34;_blank&#34;&gt;recurrent neural networks&lt;/a&gt; that can &amp;ldquo;learn&amp;rdquo; for classifying text. However &lt;a href=&#34;https://github.com/facebookresearch/fastText&#34; target=&#34;_blank&#34;&gt;fasttext&lt;/a&gt;, a newer algorithm from researchers at Facebook, can perform classification tasks at an &lt;a href=&#34;http://minimaxir.com/2017/06/keras-cntk/&#34; target=&#34;_blank&#34;&gt;order of magnitude faster&lt;/a&gt; training time than RNNs, with similar predictive performance.&lt;/p&gt;
&lt;p&gt;fasttext works by &lt;a href=&#34;https://arxiv.org/abs/1607.01759&#34; target=&#34;_blank&#34;&gt;averaging word vectors&lt;/a&gt;. In this Reddit model architecture inspired by the &lt;a href=&#34;https://github.com/fchollet/keras/blob/master/examples/imdb_fasttext.py&#34; target=&#34;_blank&#34;&gt;official Keras fasttext example&lt;/a&gt;, each word in a Reddit submission title (up to 20) is mapped to a 50-dimensional vector from an Embeddings layer of up to 40,000 words. The Embeddings layer is &lt;a href=&#34;https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html&#34; target=&#34;_blank&#34;&gt;initialized&lt;/a&gt; with &lt;a href=&#34;https://nlp.stanford.edu/projects/glove/&#34; target=&#34;_blank&#34;&gt;GloVe word embeddings&lt;/a&gt; pre-trained on billions of words to give the model a good start. All the word vectors for a given Reddit submission title are averaged together, and then a Dense fully-connected layer outputs a probability the given text is a good submission. The gradients then backpropagate and improve the word embeddings for future batches during training.&lt;/p&gt;
&lt;p&gt;Keras has a &lt;a href=&#34;https://keras.io/visualization/&#34; target=&#34;_blank&#34;&gt;convenient utility&lt;/a&gt; to visualize deep learning models:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/model_shapes-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, the first output above is the &lt;em&gt;auxiliary output&lt;/em&gt; for &lt;a href=&#34;https://en.wikipedia.org/wiki/Regularization_(mathematics)&#34; target=&#34;_blank&#34;&gt;regularizing&lt;/a&gt; the word embeddings; we still have to incorporate the submission timing data into the model.&lt;/p&gt;
&lt;p&gt;Each of the four timing features (hour, minute, day of week, day of year) receives its own Embeddings layer, outputting a 64D vector. This allows the features to learn latent characteristics which may be missed using traditional &lt;a href=&#34;http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html&#34; target=&#34;_blank&#34;&gt;one-hot encoding&lt;/a&gt; for categorical data in machine learning problems.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/model_shapes-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The 50D word average vector is concatenated with the four vectors above, resulting in a 306D vector. This combined vector is connected to another fully-connected layer which can account for hidden interactions between all five input features (plus &lt;a href=&#34;https://keras.io/layers/normalization/&#34; target=&#34;_blank&#34;&gt;batch normalization&lt;/a&gt;, which improves training speed for Dense layers). Then the model outputs a final probability prediction: the &lt;em&gt;main output&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/model_shapes-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The final model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/model.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All of this sounds difficult to implement, but Keras&amp;rsquo;s &lt;a href=&#34;https://keras.io/getting-started/functional-api-guide/&#34; target=&#34;_blank&#34;&gt;functional API&lt;/a&gt; ensures that adding each layer and linking them together can be done in a single line of code each.&lt;/p&gt;
&lt;h2 id=&#34;training-results&#34;&gt;Training Results&lt;/h2&gt;
&lt;p&gt;Because the model uses no recurrent layers, it trains fast enough on a CPU despite the large dataset size.&lt;/p&gt;
&lt;p&gt;We split the full dataset into 80%/20% training/test datasets, training the model on the former and testing the model against the latter. Keras trains a model with a simple &lt;code&gt;fit&lt;/code&gt; command and trains for 20 epochs, where one epoch represents an entire pass of the training set.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/fit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot happening in the console output due to the architecture, but the main metrics of interest are the &lt;code&gt;main_out_acc&lt;/code&gt;, the accuracy of the training set through the main output, and &lt;code&gt;val_main_out_acc&lt;/code&gt;, the accuracy of the test set. Ideally, the accuracy of both should increase as training progresses. However, the test accuracy &lt;em&gt;must&lt;/em&gt; be better than the 64% baseline (if we just say all /r/AskReddit submissions are bad), otherwise this model is unhelpful.&lt;/p&gt;
&lt;p&gt;Keras&amp;rsquo;s &lt;a href=&#34;https://keras.io/callbacks/#csvlogger&#34; target=&#34;_blank&#34;&gt;CSVLogger&lt;/a&gt; trivially logs all these metrics to a CSV file. Plotting the results of the 20 epochs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reddit-deep-learning/predict-reddit-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The test accuracy does indeed beat the 64% baseline; however, test accuracy &lt;em&gt;decreases&lt;/em&gt; as training progresses. This is a sign of &lt;a href=&#34;https://en.wikipedia.org/wiki/Overfitting&#34; target=&#34;_blank&#34;&gt;overfitting&lt;/a&gt;, possibly due to the potential disparity between texts in the training and test sets. In deep learning, you can account for overfitting by adding &lt;a href=&#34;https://keras.io/layers/core/#dropout&#34; target=&#34;_blank&#34;&gt;Dropout&lt;/a&gt; to relevant layers, but in my testing it did not help.&lt;/p&gt;
&lt;h2 id=&#34;using-the-model-to-optimize-reddit-submissions&#34;&gt;Using The Model To Optimize Reddit Submissions&lt;/h2&gt;
&lt;p&gt;At the least, we now have a model that understands the latent characteristics of an /r/AskReddit submission. But how do you apply the model &lt;em&gt;in practical, real-world situations&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a random /r/AskReddit submission: &lt;a href=&#34;https://www.reddit.com/r/AskReddit/comments/5odcpd/which_movies_plot_would_drastically_change_if_you/&#34; target=&#34;_blank&#34;&gt;Which movie&amp;rsquo;s plot would drastically change if you removed a letter from its title?&lt;/a&gt;, submitted Monday, January 16th at 3:46 PM EST and receiving 4 upvotes (a &amp;ldquo;good&amp;rdquo; submission in context of this model). Plugging those input variables into the trained model results in a &lt;strong&gt;0.669&lt;/strong&gt; probability of it being considered a good submission, which is consistent with the true results.&lt;/p&gt;
&lt;p&gt;But what if we made &lt;em&gt;minor, iterative changes&lt;/em&gt; to the title while keeping the time submitted unchanged? Can we improve this probability?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Drastically&amp;rdquo; is a silly adjective; removing it and using the title &lt;strong&gt;Which movie&amp;rsquo;s plot would change if you removed a letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.682&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Removed&amp;rdquo; is &lt;a href=&#34;http://www.ef.edu/english-resources/english-grammar/conditional/&#34; target=&#34;_blank&#34;&gt;grammatically incorrect&lt;/a&gt;; fixing the issue and using the title &lt;strong&gt;Which movie&amp;rsquo;s plot would change if you remove a letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.692&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Which&amp;rdquo; is also &lt;a href=&#34;https://www.englishclub.com/vocabulary/wh-question-words.htm&#34; target=&#34;_blank&#34;&gt;grammatically incorrect&lt;/a&gt;; fixing the issue and using the title &lt;strong&gt;What movie&amp;rsquo;s plot would change if you remove a letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.732&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Although adjectives are sometimes redundant, they can add an intriguing emphasis; adding a &amp;ldquo;single&amp;rdquo; and using the title &lt;strong&gt;What movie&amp;rsquo;s plot would change if you remove a single letter from its title?&lt;/strong&gt; results in a greater probability of &lt;strong&gt;0.753&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Not bad for a little workshopping!&lt;/p&gt;
&lt;p&gt;Now that we have an improved title, we can find an optimal time to make the submission through brute force by calculating the probabilities for all combinations of hour, minute, and day of week (and offsetting the day of year appropriately). After doing so, I discovered that making the submission on the previous Sunday at 10:55 PM EST results in the maximum probability possible of being a good submission at &lt;strong&gt;0.841&lt;/strong&gt; (the other top submission times are at various other minutes during that hour; the best time on a different day is the following Tuesday at 4:05 AM EST with a probability of &lt;strong&gt;0.823&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;In all, this model of Reddit submission success prediction is a proof of concept; there are many, &lt;em&gt;many&lt;/em&gt; optimizations that can be done on the feature engineering side and on the data collection side (especially if we want to model subreddits other than /r/AskReddit). Predicting which submissions go viral instead of just predicting which submissions receive atleast one upvote is another, more advanced problem entirely.&lt;/p&gt;
&lt;p&gt;Thanks to the high-level abstractions and utility functions of Keras, I was able to prototype the initial model in an afternoon instead of the weeks/months required for academic papers and software applications in this area. At the least, this little experiment serves as an example of applying Keras to a real-world dataset, and the tradeoffs that result when deep learning can&amp;rsquo;t magically solve everything. But that doesn&amp;rsquo;t mean my experiments on the Reddit data were unproductive; on the contrary, I now have a few new clever ideas how to fix some of the issues discovered, which I hope to implement soon.&lt;/p&gt;
&lt;p&gt;Again, I strongly recommend reading the data transformations and Keras code examples in &lt;a href=&#34;https://github.com/minimaxir/predict-reddit-submission-success/blob/master/predict_askreddit_submission_success_timing.ipynb&#34; target=&#34;_blank&#34;&gt;this Jupyter Notebook&lt;/a&gt; for more information into the methodology, as building modern deep learning models is more intuitive and less arcane than what thought pieces on Medium imply.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;You can view the R and ggplot2 code used to visualize the model data in &lt;a href=&#34;http://minimaxir.com/notebooks/predict-reddit-submission-success/&#34; target=&#34;_blank&#34;&gt;this R Notebook&lt;/a&gt;, including 2D projections of the Embedding layers not in this article. You can also view the images/data used for this post in &lt;a href=&#34;https://github.com/minimaxir/predict-reddit-submission-success&#34; target=&#34;_blank&#34;&gt;this GitHub repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You are free to use the data visualizations/model architectures from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Advantages of Using R Notebooks For Data Analysis Instead of Jupyter Notebooks</title><link>/2017/06/r-notebooks/</link><pubDate>Tue, 06 Jun 2017 08:30:00 +0000</pubDate><guid>/2017/06/r-notebooks/</guid><description>
&lt;p&gt;&lt;a href=&#34;http://jupyter.org&#34; target=&#34;_blank&#34;&gt;Jupyter Notebooks&lt;/a&gt;, formerly known as &lt;a href=&#34;https://ipython.org/notebook.html&#34; target=&#34;_blank&#34;&gt;IPython Notebooks&lt;/a&gt;, are ubiquitous in modern data analysis. The Notebook format allows statistical code and its output to be viewed on any computer in a logical and &lt;em&gt;reproducible&lt;/em&gt; manner, avoiding both the confusion caused by unclear code and the inevitable &amp;ldquo;it only works on my system&amp;rdquo; curse.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/jupyterdemo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In Jupyter Notebooks, each block of Python input code executes in its own cell, and the output of the block appears inline; this allows the user to iterate on the results, both to make the data transformations explicit and to and make sure the results are as expected.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/jupyter.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In addition to code blocks, Jupyter Notebooks support &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt; cells, allowing for more detailed write-ups with easy formatting. The final Notebook can be exported as a HTML file displayable in a browser, or the raw Notebook file can be shared and &lt;a href=&#34;https://github.com/blog/1995-github-jupyter-notebooks-3&#34; target=&#34;_blank&#34;&gt;rendered&lt;/a&gt; on sites like &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. Although Jupyter is a Python application, it can run kernels of &lt;a href=&#34;https://irkernel.github.io&#34; target=&#34;_blank&#34;&gt;non-Python languages&lt;/a&gt;, such as &lt;a href=&#34;https://www.r-project.org&#34; target=&#34;_blank&#34;&gt;R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over the years, there have a been a few new competitors in the reproducible data analysis field, such as &lt;a href=&#34;http://beakernotebook.com/features&#34; target=&#34;_blank&#34;&gt;Beaker Notebook&lt;/a&gt; and, for heavy-duty business problems, &lt;a href=&#34;https://zeppelin.apache.org&#34; target=&#34;_blank&#34;&gt;Apache Zeppelin&lt;/a&gt;. However, today we&amp;rsquo;ll look at the relatively new &lt;a href=&#34;http://rmarkdown.rstudio.com/r_notebooks.html&#34; target=&#34;_blank&#34;&gt;R Notebooks&lt;/a&gt;, and how they help improve the workflows of common data analysis in ways Jupyter Notebooks can&amp;rsquo;t without third-party extensions.&lt;/p&gt;
&lt;h2 id=&#34;about-r-notebooks&#34;&gt;About R Notebooks&lt;/h2&gt;
&lt;p&gt;R Notebooks are a format maintained by &lt;a href=&#34;https://www.rstudio.com&#34; target=&#34;_blank&#34;&gt;RStudio&lt;/a&gt;, which develops and maintains a large number of open source R packages and tools, most notably the free-for-consumer RStudio R IDE. More specifically, R Notebooks are an extension of the earlier &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; target=&#34;_blank&#34;&gt;R Markdown&lt;/a&gt; &lt;code&gt;.Rmd&lt;/code&gt; format, useful for rendering analyses into HTML/PDFs, or other cool formats like &lt;a href=&#34;http://rmarkdown.rstudio.com/tufte_handout_format.html&#34; target=&#34;_blank&#34;&gt;Tufte handouts&lt;/a&gt; or even &lt;a href=&#34;https://bookdown.org&#34; target=&#34;_blank&#34;&gt;books&lt;/a&gt;. The default output of an R Notebook file is a &lt;code&gt;.nb.html&lt;/code&gt; file, which can be viewed as a webpage on any system. (&lt;a href=&#34;https://rpubs.com&#34; target=&#34;_blank&#34;&gt;RPubs&lt;/a&gt; has many examples of R Notebooks, although I recommend using &lt;a href=&#34;https://pages.github.com&#34; target=&#34;_blank&#34;&gt;GitHub Pages&lt;/a&gt; to host notebooks publicly).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/RNotebookAnimation.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Instead of having separate cells for code and text, a R Markdown file is all plain text. The cells are indicated by three backticks and a gray background in RStudio, which makes it easy to enter a code block, easy to identify code blocks at a glance, and easy to execute a notebook block-by-block. Each cell also has a green indicator bar which shows which code is running and which code is queued, line-by-line.&lt;/p&gt;
&lt;p&gt;For Notebook files, a HTML webpage is automatically generated whenever the file is saved, which can immediately be viewed in any browser (the generated webpage stores the cell output and any necessary dependencies).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/notebooktest.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;R Notebooks can only be created and edited in RStudio, but this is a case where tight vertical integration of open-source software is a good thing. Among many other features, RStudio includes a file manager, a function help, a variable explorer, and a project manager; all of which make analysis much easier and faster as opposed to the browser-only Jupyter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/rstudio.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve made many, many Jupyter Notebooks and R Notebooks &lt;a href=&#34;http://minimaxir.com/data-portfolio&#34; target=&#34;_blank&#34;&gt;over the years&lt;/a&gt;, which has given me insight into the strengths and weaknesses of both formats. Here are a few native features of R Notebooks which present an objective advantage over Jupyter Notebooks, particularly those not highlighted in the documentation:&lt;/p&gt;
&lt;h2 id=&#34;version-control&#34;&gt;Version Control&lt;/h2&gt;
&lt;p&gt;Version control of files with tools such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Git&#34; target=&#34;_blank&#34;&gt;git&lt;/a&gt; is important as it both maintains an explorable database of changes to the code files and also improves collaboration by using a centralized server (e.g. GitHub) where anyone with access to the repository can pull and push changes to the code. In the data science world, large startups such as &lt;a href=&#34;https://stripe.com/blog/reproducible-research&#34; target=&#34;_blank&#34;&gt;Stripe&lt;/a&gt; and &lt;a href=&#34;https://medium.com/airbnb-engineering/scaling-knowledge-at-airbnb-875d73eff091&#34; target=&#34;_blank&#34;&gt;Airbnb&lt;/a&gt; have seen a lot of success with this approach.&lt;/p&gt;
&lt;p&gt;RStudio incidentally has a native git client for tracking and committing changes to a &lt;code&gt;.Rmd&lt;/code&gt; file, which is easy since &lt;code&gt;.Rmd&lt;/code&gt; files are effectively plain text files where you can see differences between versions at a per-line level. (You may not want to store the changes to the generated &lt;code&gt;.nb.html&lt;/code&gt; Notebook since they will be large and redundant to the changes made in the corresponding &lt;code&gt;.Rmd&lt;/code&gt;; I recommend adding a &lt;code&gt;*.nb.html&lt;/code&gt; rule to a &lt;code&gt;.gitignore&lt;/code&gt; file during analysis).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/git.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.ipynb&lt;/code&gt; Jupyter Notebook files are blobs of JSON that also store cell output, which will result in large diffs if you keep them in version control and make any changes which result in different output. This can cause the git database to balloon and makes reading per-line diffs hard if not impossible.&lt;/p&gt;
&lt;p&gt;On Hacker News, the version control issues in Jupyter are &lt;a href=&#34;https://news.ycombinator.com/item?id=14034341&#34; target=&#34;_blank&#34;&gt;a common complaint&lt;/a&gt;, however a Jupyter developer noted of a possibility of &lt;a href=&#34;https://news.ycombinator.com/item?id=14035158&#34; target=&#34;_blank&#34;&gt;working with RStudio&lt;/a&gt; on solving this issue.&lt;/p&gt;
&lt;h2 id=&#34;inline-code-rendering&#34;&gt;Inline Code Rendering&lt;/h2&gt;
&lt;p&gt;A common practice in Jupyter Notebooks is to print common values as a part of a write-up or testing statistical code. In Jupyter Notebooks, if you want to verify the number of rows in a dataset for exploratory data analysis, you have to add an appropriate print statement to the cell to get the number &lt;code&gt;n&lt;/code&gt; rows, and then add a Markdown cell to redundantly describe what you just print in the output.&lt;/p&gt;
&lt;p&gt;In R Notebooks, you can skip a step by calling such print statements in-line in the Markdown text, which will then be rendered with the Notebook. This also avoids hard-coding such numbers in the Markdown text if you change the data beforehand (e.g. parameter tuning) or if the values are nontrivial to calculate by hand.&lt;/p&gt;
&lt;p&gt;For example, these lines of R Markdown from my &lt;a href=&#34;http://minimaxir.com/notebooks/first-comment/&#34; target=&#34;_blank&#34;&gt;Reddit First Comment Notebook&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/inline.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;translate into:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/reddit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;metadata&#34;&gt;Metadata&lt;/h2&gt;
&lt;p&gt;R Notebooks are configured with a &lt;a href=&#34;http://yaml.org&#34; target=&#34;_blank&#34;&gt;YAML&lt;/a&gt; header, which can include common attributes such as title, author, date published, and other relevant options. These fields will then be configured correctly in the metadata for HTML/PDF/Handouts output. Here&amp;rsquo;s an example from &lt;a href=&#34;http://minimaxir.com/notebooks/amazon-spark/&#34; target=&#34;_blank&#34;&gt;one of my notebooks&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title: &amp;quot;Playing with 80 Million Amazon Product Review Ratings Using Apache Spark&amp;quot;
author: &amp;quot;Max Woolf (@minimaxir)&amp;quot;
date: &amp;quot;January 2nd, 2017&amp;quot;
output:
html_notebook:
highlight: tango
mathjax: null
number_sections: yes
theme: spacelab
toc: yes
toc_float: yes
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Said metadata features are &lt;a href=&#34;https://github.com/ipython/ipython/issues/6073&#34; target=&#34;_blank&#34;&gt;often requested but unimplemented&lt;/a&gt; in Jupyter.&lt;/p&gt;
&lt;h2 id=&#34;notebook-theming&#34;&gt;Notebook Theming&lt;/h2&gt;
&lt;p&gt;As noted in the example metadata above, R Notebooks allow extensive theming. Jupyter Notebooks do &lt;a href=&#34;https://github.com/dunovank/jupyter-themes&#34; target=&#34;_blank&#34;&gt;support themes&lt;/a&gt;, but with a third-party Python package, or placing custom CSS in an &lt;a href=&#34;https://stackoverflow.com/a/32158550&#34; target=&#34;_blank&#34;&gt;odd location&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like Jupyter Notebooks, the front-end of browser-based R Notebooks is based off of the &lt;a href=&#34;http://getbootstrap.com&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt; HTML framework. R Notebooks, however, allow you to natively select the style of code syntax highlighting via &lt;code&gt;highlight&lt;/code&gt; (similar options as &lt;a href=&#34;https://help.farbox.com/pygments.html&#34; target=&#34;_blank&#34;&gt;pygments&lt;/a&gt;) and also the entire Bootstrap theme via &lt;code&gt;theme&lt;/code&gt; (with a selection from the excellent &lt;a href=&#34;https://bootswatch.com&#34; target=&#34;_blank&#34;&gt;Bootswatch&lt;/a&gt; themes by &lt;a href=&#34;https://twitter.com/thomashpark&#34; target=&#34;_blank&#34;&gt;Thomas Park&lt;/a&gt;), giving your Notebook a unique look without adding dependencies.&lt;/p&gt;
&lt;h2 id=&#34;data-tables&#34;&gt;Data Tables&lt;/h2&gt;
&lt;p&gt;When you print a data frame in a Jupyter Notebook, the output appears as a standard &lt;em&gt;boring&lt;/em&gt; HTML table:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/htmltable.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No cell block output is ever truncated. Accidentally printing an entire 100,000+ row table to a Jupyter Notebook is a mistake you only make &lt;em&gt;once&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;R Notebook tables are pretty tables with pagination for both rows and columns, and can support large amounts of data if necessary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/rtable.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The R Notebook output table also includes the data type of the column, which is helpful for debugging unexpected issues where a column has an unintended data type (e.g. a numeric &lt;code&gt;&amp;lt;dbl&amp;gt;&lt;/code&gt; column or a datetime &lt;code&gt;&amp;lt;S3: POSIXct&amp;gt;&lt;/code&gt; column is parsed as a text-based &lt;code&gt;&amp;lt;chr&amp;gt;&lt;/code&gt; column).&lt;/p&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;p&gt;A Table of Contents always helps navigating, particularly in a PDF export. Jupyter Notebooks &lt;a href=&#34;https://github.com/minrk/ipython_extensions&#34; target=&#34;_blank&#34;&gt;requires an extension&lt;/a&gt; for a ToC, while R Notebooks will natively create one from section headers (controllable via &lt;code&gt;toc&lt;/code&gt; and &lt;code&gt;number_sections&lt;/code&gt;). An optional &lt;code&gt;toc_float&lt;/code&gt; parameter causes the Table of Contents to float on the left in the browser, making it always accessible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/notebookheader.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In conclusion, R Notebooks haven&amp;rsquo;t received much publicity since the benefits aren&amp;rsquo;t immediately obvious, but for the purpose of reproducible analyses, the breadth of native features allows for excellent utility while avoiding dependency hell. Running R in an R Notebook is a significantly better experience than running R in a Jupyter Notebook. The advantages present in R Notebooks can also provide guidance for feature development in other Notebook software, which improves the data analysis ecosystem as a whole.&lt;/p&gt;
&lt;p&gt;However, there&amp;rsquo;s an elephant in the room&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;what-about-python&#34;&gt;What About Python?&lt;/h2&gt;
&lt;p&gt;So you might be thinking &amp;ldquo;an R Notebook forces you to use R, but &lt;em&gt;serious&lt;/em&gt; data science work is done using Python!&amp;rdquo; Plot twist: you can use Python in an R Notebook!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-notebooks/python.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well, sort of. The Python session ends after the cell executes, making it unhelpful for tasks other than &lt;em&gt;ad hoc&lt;/em&gt; scripts.&lt;/p&gt;
&lt;p&gt;The topic on whether R or Python is better for data analysis is a &lt;a href=&#34;https://news.ycombinator.com/item?id=14056098&#34; target=&#34;_blank&#34;&gt;common&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/item?id=13239530&#34; target=&#34;_blank&#34;&gt;religious&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/item?id=12301996&#34; target=&#34;_blank&#34;&gt;flamewar&lt;/a&gt; topic which is best saved for a separate blog post (tl;dr: I disagree with the paraphrased quote above in that both languages have their advantages and you&amp;rsquo;ll benefit significantly from knowing both ecosystems).&lt;/p&gt;
&lt;p&gt;And I wouldn&amp;rsquo;t count R out of &amp;ldquo;serious data science&amp;rdquo;. You can use R &lt;a href=&#34;http://spark.rstudio.com&#34; target=&#34;_blank&#34;&gt;seamlessly&lt;/a&gt; with big data tools like &lt;a href=&#34;https://spark.apache.org&#34; target=&#34;_blank&#34;&gt;Apache Spark&lt;/a&gt;, and R can &lt;a href=&#34;https://rstudio.github.io/keras/&#34; target=&#34;_blank&#34;&gt;now&lt;/a&gt; use &lt;a href=&#34;https://keras.io&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt;/&lt;a href=&#34;https://www.tensorflow.org&#34; target=&#34;_blank&#34;&gt;TensorFlow&lt;/a&gt; for deep learning with near-API-parity to the Python version. &lt;em&gt;Hmm&lt;/em&gt;.&lt;/p&gt;</description></item></channel></rss>