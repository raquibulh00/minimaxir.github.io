<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[minimaxir | Max Woolf's Blog]]></title>
  <link href="https://minimaxir.com/rss.xml" rel="self"/>
  <link href="https://minimaxir.com/"/>
  <updated>2018-07-23T20:55:02-07:00</updated>
  <id>https://minimaxir.com/</id>
  <author>
    <name><![CDATA[Max Woolf]]></name>
    <email><![CDATA[max@minimaxir.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analyzing IMDb Data The Intended Way, with R and ggplot2]]></title>
    <link href="https://minimaxir.com/2018/07/imdb-data-analysis/"/>
    <updated>2018-07-16T09:45:00-07:00</updated>
    <id>https://minimaxir.com/2018/07/imdb-data-analysis</id>
    <content type="html"><![CDATA[<p><a href="https://www.imdb.com">IMDb</a>, the Internet Movie Database, has been a popular source for data analysis and visualizations over the years. The combination of user ratings for movies and detailed movie metadata have always been fun to <a href="http://minimaxir.com/2016/01/movie-revenue-ratings/">play with</a>.</p>

<p><img src="/img/movie-revenue-ratings/box-office-rating-5.png" alt=""></p>

<p>There are a number of tools to help get IMDb data, such as <a href="https://github.com/alberanid/imdbpy">IMDbPY</a>, which makes it easy to programmatically scrape IMDb by pretending it&rsquo;s a website user and extracting the relevant data from the page&rsquo;s HTML output. While it <em>works</em>, web scraping public data is a gray area in terms of legality; many large websites have a Terms of Service which forbids scraping, and can potentially send a DMCA take-down notice to websites redistributing scraped data.</p>

<p>IMDb has <a href="https://help.imdb.com/article/imdb/general-information/can-i-use-imdb-data-in-my-software/G5JTRESSHJBBHTGX#">data licensing terms</a> which forbid scraping and require an attribution in the form of a <strong>Information courtesy of IMDb (http://www.imdb.com). Used with permission.</strong> statement, and has also <a href="https://www.kaggle.com/tmdb/tmdb-movie-metadata/home">DMCAed a Kaggle IMDb dataset</a> to hone the point. </p>

<p>However, there is good news! IMDb publishes an <a href="https://www.imdb.com/interfaces/">official dataset</a> for casual data analysis! And it&rsquo;s now very accessible, just choose a dataset and download (now with no hoops to jump through), and the files are in the standard <a href="https://en.wikipedia.org/wiki/Tab-separated_values">TSV format</a>.</p>

<p><img src="/img/imdb-data-analysis/datasets.png" alt=""></p>

<p>The uncompressed files are pretty large; not &ldquo;big data&rdquo; large (it fits into computer memory), but Excel will explode if you try to open them in it. You have to play with the data <em>smartly</em>, and both <a href="https://www.r-project.org">R</a> and <a href="https://ggplot2.tidyverse.org/reference/index.html">ggplot2</a> have neat tricks to do just that.</p>

<h2>First Steps</h2>

<p>R is a popular programming language for statistical analysis. One of the most popular series of external packages is the <code>tidyverse</code> package, which automatically imports the <code>ggplot2</code> data visualization library and other useful packages which we&rsquo;ll get to one-by-one. We&rsquo;ll also use <code>scales</code> which we&rsquo;ll use later for prettier number formatting. First we&rsquo;ll load these packages:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">scales</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p>And now we can load a TSV downloaded from IMDb using the <code>read_tsv</code> function from <code>readr</code> (a tidyverse package), which does what the name implies, at a much faster speed than base R (+ a couple other parameters to handle data encoding). Let&rsquo;s start with the <code>ratings</code> file:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_ratings</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s1">'title.ratings.tsv'</span><span class="p">,</span><span class="w"> </span><span class="n">na</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"\\N"</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">''</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p>We can preview what&rsquo;s in the loaded data using <code>dplyr</code> (a tidyverse package), which is what we&rsquo;ll be using to manipulate data for this analysis. dplyr allows you to pipe commands, making it easy to create a sequence of manipulation commands. For now, we&rsquo;ll use <code>head()</code>, which displays the top few rows of the data frame.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_ratings</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">head</span><span class="p">()</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/ratings.png" alt=""></p>

<p>Each of the <strong>873k rows</strong> corresponds to a single movie, an ID for the movie, its average rating (from 1 to 10), and the number of votes which contribute to that average. Since we have two numeric variables, why not test out ggplot2 by creating a scatterplot mapping them? ggplot2 takes in a data frame and names of columns as aesthetics, then you specify what type of shape to plot (a &ldquo;geom&rdquo;). Passing the plot to <code>ggsave</code> saves it as a standalone, high-quality data visualization.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_ratings</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">numVotes</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">averageRating</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_point</span><span class="p">()</span><span class="w">

</span><span class="n">ggsave</span><span class="p">(</span><span class="s2">"imdb-0.png"</span><span class="p">,</span><span class="w"> </span><span class="n">plot</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/imdb-0.png" alt=""></p>

<p>Here is nearly <em>1 million</em> points on a single chart; definitely don&rsquo;t try to do that in Excel! However, it&rsquo;s not a <em>useful</em> chart since all the points are opaque and we&rsquo;re not sure what the spatial density of points is. One approach to fix this issue is to create a heat map of points, which ggplot can do natively with <code>geom_bin2d</code>. We can color the heat map with the <a href="https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html">viridis</a> colorblind-friendly palettes <a href="https://ggplot2.tidyverse.org/reference/scale_viridis.html">just introduced</a> into ggplot2. We should also tweak the axes; the x-axis should be scaled logarithmically with <code>scale_x_log10</code> since there are many movies with high numbers of votes and we can format those numbers with the <code>comma</code> function from the <code>scales</code> package (we can format the scale with <code>comma</code> too). For the y-axis, we can add explicit number breaks for each rating; R can do this neatly by setting the breaks to <code>1:10</code>. Putting it all together: </p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_ratings</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">numVotes</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">averageRating</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_bin2d</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_x_log10</span><span class="p">(</span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comma</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_fill_viridis_c</span><span class="p">(</span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comma</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/imdb-1.png" alt=""></p>

<p>Not bad, although it unfortunately confirms that IMDb follows a <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/FourPointScale">Four Point Scale</a> where average ratings tend to fall between 6 — 9.</p>

<h2>Mapping Movies to Ratings</h2>

<p>You may be asking &ldquo;which ratings correspond to which movies?&rdquo; That&rsquo;s what the <code>tconst</code> field is for. But first, let&rsquo;s load the  title data from <code>title.basics.tsv</code> into <code>df_basics</code> and take a look as before.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_basics</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s1">'title.basics.tsv'</span><span class="p">,</span><span class="w"> </span><span class="n">na</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"\\N"</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">''</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/basics1.png" alt="">
<img src="/img/imdb-data-analysis/basics2.png" alt=""></p>

<p>We have some neat movie metadata. Notably, this table has a <code>tconst</code> field as well. Therefore, we can <em>join</em> the two tables together, adding the movie information to the corresponding row in the rating table (in this case, a left join is more appropriate than an inner/full join)</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_ratings</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_ratings</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">left_join</span><span class="p">(</span><span class="n">df_basics</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p>Runtime minutes sounds interesting. Could there be a relationship between the length of a movie and its average rating on IMDb? Let&rsquo;s make a heat map plot again, but with a few tweaks. With the new metadata, we can <code>filter</code> the table to remove bad points; let&rsquo;s keep movies only (as IMDb data also contains <em>television show data</em>), with a runtime &lt; 3 hours, and which have received atleast 10 votes by users to remove extraneous movies). X-axis should be tweaked to display the minutes-values in hours. The fill viridis palette can be changed to another one in the family (I personally like <code>inferno</code>).</p>

<p>More importantly, let&rsquo;s discuss plot theming. If you want a minimalistic theme, add a <code>theme_minimal</code> to the plot, and you can pass a <code>base_family</code> to change the default font on the plot and a <code>base_size</code> to change the font size. The <code>labs</code> function lets you add labels to the plot (which you should <em>always</em> do); you have your <code>title</code>, <code>x</code>, and <code>y</code> parameters, but you can also add a <code>subtitle</code>, a <code>caption</code> for attribution, and a <code>color</code>/<code>fill</code> to name the scale. Putting it all together:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_ratings</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">runtimeMinutes</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">180</span><span class="p">,</span><span class="w"> </span><span class="n">titleType</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"movie"</span><span class="p">,</span><span class="w"> </span><span class="n">numVotes</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">10</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">runtimeMinutes</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">averageRating</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_bin2d</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_x_continuous</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">180</span><span class="p">,</span><span class="w"> </span><span class="m">60</span><span class="p">),</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">3</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_fill_viridis_c</span><span class="p">(</span><span class="n">option</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"inferno"</span><span class="p">,</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comma</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">theme_minimal</span><span class="p">(</span><span class="n">base_family</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Source Sans Pro"</span><span class="p">,</span><span class="w"> </span><span class="n">base_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Relationship between Movie Runtime and Average Mobie Rating"</span><span class="p">,</span><span class="w">
               </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Data from IMDb retrieved July 4th, 2018"</span><span class="p">,</span><span class="w">
               </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Runtime (Hours)"</span><span class="p">,</span><span class="w">
               </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Average User Rating"</span><span class="p">,</span><span class="w">
               </span><span class="n">caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Max Woolf — minimaxir.com"</span><span class="p">,</span><span class="w">
               </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"# Movies"</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/imdb-2b.png" alt=""></p>

<p>Now that&rsquo;s pretty nice-looking for only a few lines of code! Albeit unhelpful, as there doesn&rsquo;t appear to be a correlation.</p>

<p><em>(Note: for the rest of this post, the theming/labels code will be omitted for convenience)</em></p>

<p>How about movie ratings vs. the year the movie was made? It&rsquo;s a similar plot code-wise to the one above (one perk about <code>ggplot2</code> is that there&rsquo;s no shame in reusing chart code!), but we can add a <code>geom_smooth</code>, which adds a nonparametric trendline with confidence bands for the trend; since we have a large amount of data, the bands are very tight. We can also fix the problem of &ldquo;empty&rdquo; bins by setting the color fill scale to logarithmic scaling. And since we&rsquo;re adding a black trendline, let&rsquo;s change the viridis palette to <code>plasma</code> for better contrast.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_ratings</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">titleType</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"movie"</span><span class="p">,</span><span class="w"> </span><span class="n">numVotes</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">10</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">startYear</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">averageRating</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_bin2d</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"black"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_x_continuous</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_fill_viridis_c</span><span class="p">(</span><span class="n">option</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"plasma"</span><span class="p">,</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">comma</span><span class="p">,</span><span class="w"> </span><span class="n">trans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'log10'</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/imdb-4.png" alt=""></p>

<p>Unfortunately, this trend hasn&rsquo;t changed much either, although the presence of average ratings outside the Four Point Scale has increased over time.</p>

<h2>Mapping Lead Actors to Movies</h2>

<p>Now that we have a handle on working with the IMDb data, let&rsquo;s try playing with the larger datasets. Since they take up a lot of computer memory, we only want to persist data we actually might use. After looking at the schema provided with the official datasets, the only really useful metadata about the actors is their birth year, so let&rsquo;s load that, but only keep both actors/actresses (using the fast <code>str_detect</code> function from <code>stringr</code>, another tidyverse package) and the relevant fields.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_actors</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s1">'name.basics.tsv'</span><span class="p">,</span><span class="w"> </span><span class="n">na</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"\\N"</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">''</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                </span><span class="n">filter</span><span class="p">(</span><span class="n">str_detect</span><span class="p">(</span><span class="n">primaryProfession</span><span class="p">,</span><span class="w"> </span><span class="s2">"actor|actress"</span><span class="p">))</span><span class="w">  </span><span class="o">%&gt;%</span><span class="w">
                </span><span class="n">select</span><span class="p">(</span><span class="n">nconst</span><span class="p">,</span><span class="w"> </span><span class="n">primaryName</span><span class="p">,</span><span class="w"> </span><span class="n">birthYear</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/actor.png" alt=""></p>

<p>The principals dataset, the large 1.28GB TSV, is the most interesting. It&rsquo;s an unnested list of the credited persons in each movie, with an <code>ordering</code> indicating their rank (where <code>1</code> means first, <code>2</code> means second, etc.).</p>

<p><img src="/img/imdb-data-analysis/principals.png" alt=""></p>

<p>For this analysis, let&rsquo;s only look at the <strong>lead actors/actresses</strong>; specifically, for each movie (identified by the <code>tconst</code> value), filter the dataset to where the <code>ordering</code> value is the lowest (in this case, the person at rank <code>1</code> may not necessarily be an actor/actress).  </p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_principals</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s1">'title.principals.tsv'</span><span class="p">,</span><span class="w"> </span><span class="n">na</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"\\N"</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">''</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">filter</span><span class="p">(</span><span class="n">str_detect</span><span class="p">(</span><span class="n">category</span><span class="p">,</span><span class="w"> </span><span class="s2">"actor|actress"</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">tconst</span><span class="p">,</span><span class="w"> </span><span class="n">ordering</span><span class="p">,</span><span class="w"> </span><span class="n">nconst</span><span class="p">,</span><span class="w"> </span><span class="n">category</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">tconst</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">filter</span><span class="p">(</span><span class="n">ordering</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nf">min</span><span class="p">(</span><span class="n">ordering</span><span class="p">))</span><span class="w">
</span></code></pre></div>
<p>Both datasets have a <code>nconst</code> field, so let&rsquo;s join them together. And then join <em>that</em> to the ratings table earlier via <code>tconst</code>.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_principals</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_principals</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">left_join</span><span class="p">(</span><span class="n">df_actors</span><span class="p">)</span><span class="w">
</span><span class="n">df_ratings</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_ratings</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">left_join</span><span class="p">(</span><span class="n">df_principals</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p>Now we have a fully denormalized dataset in <code>df_ratings</code>. Since we now have the movie release year and the birth year of the lead actor, we can now infer <em>the age of the lead actor at the movie release</em>. With that goal, filter out the data on the criteria we&rsquo;ve used for earlier data visualizations, plus only keeping rows which have an actor&rsquo;s birth year.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_ratings_movies</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_ratings</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                        </span><span class="n">filter</span><span class="p">(</span><span class="n">titleType</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"movie"</span><span class="p">,</span><span class="w"> </span><span class="o">!</span><span class="nf">is.na</span><span class="p">(</span><span class="n">birthYear</span><span class="p">),</span><span class="w"> </span><span class="n">numVotes</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                        </span><span class="n">mutate</span><span class="p">(</span><span class="n">age_lead</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">startYear</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">birthYear</span><span class="p">)</span><span class="w"> 
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/denorm1.png" alt="">
<img src="/img/imdb-data-analysis/denorm2.png" alt=""></p>

<h2>Plotting Ages</h2>

<p>Age discrimination in movie casting has been a recurring issue in Hollywood; in fact, in 2017 <a href="https://www.hollywoodreporter.com/thr-esq/judge-pauses-enforcement-imdb-age-censorship-law-978797">a law was signed</a> to force IMDb to remove an actor&rsquo;s age upon request, which in February 2018 was <a href="https://www.hollywoodreporter.com/thr-esq/californias-imdb-age-censorship-law-declared-unconstitutional-1086540">ruled to be unconstitutional</a>.</p>

<p>Have the ages of movie leads changed over time? For this example,  we&rsquo;ll use a <a href="https://ggplot2.tidyverse.org/reference/geom_ribbon.html">ribbon plot</a> to plot the ranges of ages of movie leads. A simple way to do that is, for each year, calculate the 25th <a href="https://en.wikipedia.org/wiki/Percentile">percentile</a> of the ages, the 50th percentile (i.e. the median), and the 75th percentile, where the 25th and 75th percentiles are the ribbon bounds and the line represents the median.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_actor_ages</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_ratings_movies</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                  </span><span class="n">group_by</span><span class="p">(</span><span class="n">startYear</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                  </span><span class="n">summarize</span><span class="p">(</span><span class="n">low_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">age_lead</span><span class="p">,</span><span class="w"> </span><span class="m">0.25</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="o">=</span><span class="nb">T</span><span class="p">),</span><span class="w">
                            </span><span class="n">med_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">age_lead</span><span class="p">,</span><span class="w"> </span><span class="m">0.50</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="o">=</span><span class="nb">T</span><span class="p">),</span><span class="w">
                            </span><span class="n">high_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">age_lead</span><span class="p">,</span><span class="w"> </span><span class="m">0.75</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="o">=</span><span class="nb">T</span><span class="p">))</span><span class="w">
</span></code></pre></div>
<p>Plotting it with ggplot2 is surprisingly simple, although you need to use different y aesthetics for the ribbon and the overlapping line.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_actor_ages</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">startYear</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">1920</span><span class="p">)</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">startYear</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_ribbon</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low_age</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">high_age</span><span class="p">),</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_line</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">med_age</span><span class="p">))</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/imdb-8.png" alt=""></p>

<p>Turns out that in the 2000&rsquo;s, the median age of lead actors  started to <em>increase</em>? Both the upper and lower bounds increased too. That doesn&rsquo;t coalesce with the age discrimination complaints.</p>

<p>Another aspect of these complaints is gender, as female actresses tend to be younger than male actors. Thanks to the magic of ggplot2 and dplyr, separating actors/actresses is relatively simple: add gender (encoded in <code>category</code>) as a grouping variable, add it as a color/fill aesthetic in ggplot, and set colors appropriately (I recommend the <a href="http://colorbrewer2.org/">ColorBrewer</a> qualitative palettes for categorical variables).</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_actor_ages_lead</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_ratings_movies</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                  </span><span class="n">group_by</span><span class="p">(</span><span class="n">startYear</span><span class="p">,</span><span class="w"> </span><span class="n">category</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                  </span><span class="n">summarize</span><span class="p">(</span><span class="n">low_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">age_lead</span><span class="p">,</span><span class="w"> </span><span class="m">0.25</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">),</span><span class="w">
                            </span><span class="n">med_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">age_lead</span><span class="p">,</span><span class="w"> </span><span class="m">0.50</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">),</span><span class="w">
                            </span><span class="n">high_age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">age_lead</span><span class="p">,</span><span class="w"> </span><span class="m">0.75</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">))</span><span class="w">

</span><span class="n">plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_actor_ages_lead</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">startYear</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">1920</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">startYear</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">category</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">category</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_ribbon</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low_age</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">high_age</span><span class="p">),</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">geom_line</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">med_age</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_fill_brewer</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Set1"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
          </span><span class="n">scale_color_brewer</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Set1"</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/imdb-9.png" alt=""></p>

<p>There&rsquo;s about a 10-year gap between the ages of male and female leads, and the gap doesn&rsquo;t change overtime. But both start to rise at the same time.</p>

<p>One possible explanation for this behavior is actor reuse: if Hollywood keeps casting the same actor/actresses, by construction the ages of the leads will start to steadily increase. Let&rsquo;s verify that: with our list of movies and their lead actors, for each lead actor, order all their movies by release year, and add a ranking for the #th time that actor has been a lead actor. This is possible through the use of <code>row_number</code> in dplyr, and <a href="https://cran.r-project.org/web/packages/dplyr/vignettes/window-functions.html">window functions</a> like <code>row_number</code> are data science&rsquo;s most useful secret.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df_ratings_movies_nth</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_ratings_movies</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                      </span><span class="n">group_by</span><span class="p">(</span><span class="n">nconst</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                      </span><span class="n">arrange</span><span class="p">(</span><span class="n">startYear</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                      </span><span class="n">mutate</span><span class="p">(</span><span class="n">nth_lead</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">row_number</span><span class="p">())</span><span class="w">
</span></code></pre></div>
<p><img src="/img/imdb-data-analysis/row_number.png" alt=""></p>

<p>One more ribbon plot later (w/ same code as above + custom y-axis breaks):</p>

<p><img src="/img/imdb-data-analysis/imdb-12.png" alt=""></p>

<p>Huh. The median and upper-bound #th time has <em>dropped</em> over time? Hollywood has been promoting more newcomers as leads? That&rsquo;s not what I expected!</p>

<p>More work definitely needs to be done in this area. In the meantime, the official IMDb datasets are a lot more robust than I thought they would be! And I only used a fraction of the datasets; the rest tie into TV shows, which are a bit messier. Hopefully you&rsquo;ve seen a good taste of the power of R and ggplot2 for playing with big-but-not-big data!</p>

<hr>

<p><em>You can view the R and ggplot used to create the data visualizations in <a href="http://minimaxir.com/notebooks/imdb-data-analysis/">this R Notebook</a>, which includes many visualizations not used in this post. You can also view the images/code used for this post in <a href="https://github.com/minimaxir/imdb-data-analysis">this GitHub repository</a></em>.</p>

<p><em>You are free to use the data visualizations from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Quickly Train a Text-Generating Neural Network for Free]]></title>
    <link href="https://minimaxir.com/2018/05/text-neural-networks/"/>
    <updated>2018-05-18T09:00:00-07:00</updated>
    <id>https://minimaxir.com/2018/05/text-neural-networks</id>
    <content type="html"><![CDATA[<p>One of the more interesting applications of the neural network revolution is text generation. Most popular approaches are based off of Andrej Karpathy&rsquo;s <a href="https://github.com/karpathy/char-rnn">char-rnn architecture</a>/<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">blog post</a>, which teaches a recurrent neural network to be able to predict the next character in a sequence based on the previous <em>n</em> characters. As a result, a sufficiently trained network can theoretically reproduce its input source material, but since properly-trained neural networks aren&rsquo;t <em>perfect</em>, the output can fall into a weird-but-good uncanny valley.</p>

<p><img src="/img/text-neural-networks/textgenrnn_console.gif" alt=""></p>

<p>Many internet tutorials for text-generation neural networks simply copy an existing char-rnn implementation while changing the input dataset. It&rsquo;s one approach, but there&rsquo;s an opportunity for improvement with modern deep learning tooling. Thanks to frameworks like <a href="https://www.tensorflow.org">TensorFlow</a> and <a href="https://github.com/keras-team/keras">Keras</a>, I built <a href="https://github.com/minimaxir/textgenrnn">textgenrnn</a>, a <a href="https://pypi.org/project/textgenrnn/#description">Python package</a> which abstracts the process of creating and training such char-rnns to a <em>few lines of code</em>, with numerous model architecture and training improvements such as <a href="http://minimaxir.com/2017/04/char-embeddings/">character embeddings</a>, attention-weighted averaging, and a decaying learning rate.</p>

<p>A neat benefit of textgenrnn is that it can be easily used to train neural networks on a GPU very quickly, <em>for free</em> using <a href="https://colab.research.google.com/notebooks/welcome.ipynb">Google Colaboratory</a>. I&rsquo;ve <a href="https://drive.google.com/file/d/1mMKGnVxirJnqDViH7BDJxFqWrsXlPSoK/view?usp=sharing">created a notebook</a> which lets you train your own network and generate text whenever you want with just a few clicks!</p>

<h2>Your First Text-Generating Neural Network</h2>

<p>Colaboratory is a notebook environment similar to <a href="http://jupyter.org">Jupyter Notebooks</a> used in other data science projects. However, Colaboratory notebooks are hosted in a short term virtual machine, with 2 vCPUs, 13GB memory, and a K80 GPU attached. For free. Normally, this configuration would <a href="https://cloud.google.com/compute/pricing">cost</a> $0.57/hr on Google Compute Engine; it sounds low, but adds up when you need to train model(s) for hours to get good results.</p>

<p>First, I recommend copying the notebook to your own Drive so it&rsquo;ll always be there (and switch to using Google Chrome if you aren&rsquo;t). The Colaboratory VM contains Python 3 and common Python packages for machine learning such as TensorFlow. But you can install more packages directly in the notebook. Like textgenrnn! Just run this cell by clicking into the cell and click the &ldquo;play&rdquo; button (or use Shift + Enter) and it&rsquo;ll take care of the rest:</p>

<p><img src="/img/text-neural-networks/pip.png" alt=""></p>

<p>When training a new model, textgenrnn allows you to specify the size and complexity of the neural network with a wide variety of parameters:</p>

<p><img src="/img/text-neural-networks/config.png" alt=""></p>

<p>Let&rsquo;s keep these default parameters for now, so run that cell to load them into memory. Run the next cell, which prompts you to upload a file. <em>Any text file should work</em>, even large text files! For this example, we&rsquo;ll use a 1.1MB text file of Shakespeare plays also <a href="https://github.com/karpathy/char-rnn/tree/master/data/tinyshakespeare">used in the char-rnn demos</a>.</p>

<p><img src="/img/text-neural-networks/upload.png" alt=""></p>

<p>The next cell initializes an instance of textgenrnn and begins training a custom new text-generating neural network!</p>

<p><img src="/img/text-neural-networks/train.png" alt=""></p>

<p>textgenrnn automatically processes the input text into character sequences ready to train the network. After every 2 epochs (a full pass through the data), the network will generate sample text at different temperatures, which represent the &ldquo;creativity&rdquo; of the text (i.e. it allows the model to make increasingly suboptimal predictions, which can cause hilarity to ensue). I typically like generating text at a temperature of 0.5, but for very well-trained models, you can go up to 1.0.</p>

<p>The quick model training speed comes from the VM&rsquo;s GPU, which can perform the necessary mathematical operations much faster than with a CPU. However, in the case of recurrent neural networks, Keras recently added a <a href="https://keras.io/layers/recurrent/#cudnnlstm">CuDNN implementation of RNNs</a> like LSTMs, which can easily tap into the GPU-native code more easily and gain a <em>massive</em> speed boost (<a href="http://minimaxir.com/2017/11/benchmark-gpus/">about <em>7x as fast</em></a>) compared to previous implementations! In all, for this example dataset and model architecture, training on a GPU took 5-6 minutes an epoch, while on a modern CPU, training took <em>1 hour and 24 minutes</em> an epoch, a <strong>14x speedup</strong> on the GPU!</p>

<p>After training is complete, running the next cell will download three files: a <code>weights</code> file, a <code>vocabulary</code> file, and a <code>config</code> file that are all needed to regenerate your model elsewhere.</p>

<p><img src="/img/text-neural-networks/download.png" alt=""></p>

<p>For example, on your own personal computer. Just install textgenrnn + TensorFlow by inputting <code>pip3 install textgenrnn tensorflow</code> into a terminal, change to the directory where the downloaded files are located, run <code>python3</code>, and load the model using:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">textgenrnn</span> <span class="kn">import</span> <span class="n">textgenrnn</span>
<span class="n">textgen</span> <span class="o">=</span> <span class="n">textgenrnn</span><span class="p">(</span><span class="n">weights_path</span><span class="o">=</span><span class="s">'colaboratory_weights.hdf5'</span><span class="p">,</span>
                       <span class="n">vocab_path</span><span class="o">=</span><span class="s">'colaboratory_vocab.json'</span><span class="p">,</span>
                       <span class="n">config_path</span><span class="o">=</span><span class="s">'colaboratory_config.json'</span><span class="p">)</span>
</code></pre></div>
<p>And that&rsquo;s that! No GPU necessary if you&rsquo;re just generating text. You can generate samples (like during training) using <code>textgen.generate_samples()</code>, generate a ton of samples at any temperature you like to a file using <code>textgen.generate_to_file()</code>, or incorporate a generated text into a Python script (e.g. a Twitter bot) using <code>textgen.generate(1, return_as_list=True)[0]</code> to store a text as a variable. You can view more of textgenrnn&rsquo;s functions and capabilities in <a href="https://github.com/minimaxir/textgenrnn/blob/master/docs/textgenrnn-demo.ipynb">this demo Jupyter Notebook</a>.</p>

<p>Here&rsquo;s some Shakespeare generated with a 50-minute-trained model at a temperature of 0.5:</p>
<div class="highlight"><pre><code class="language-" data-lang="">LUCENTIO:
And then shall good grave to my wife thee;
Thou would the cause the brieved to me,
And let the place and then receives:
The rest you the foren to my ways him child,
And marry that will be a parties and so set me that be deeds
And then the heart and be so shall make the most as he and stand of seat.

GLOUCESTER:
Your father and madam, or shall for the people
And dead to make the truth, or a business
As we brother to the place her great the truth;
And that which to the smaster and her father,
I am I was see the sun have to the royal true.
</code></pre></div>
<p>Not too bad, and it&rsquo;s even close to <a href="https://en.wikipedia.org/wiki/Iambic_pentameter">iambic pentameter</a>!</p>

<h2>Tweaking the Model</h2>

<p>The most important model configuration options above are <code>rnn_size</code> and <code>rnn_layers</code>: these determine the complexity of the network. Typically, you&rsquo;ll see networks in tutorials be a single 128-cell or 256-cell network. However, textgenrnn&rsquo;s architecture is slightly different as it has an attention layer which incorporates <em>all</em> the preceding model layers. As a result, it&rsquo;s  much better to go deeper than wider (e.g. 4x128 is better than 1x512) unless you have a very large amount of text (&gt;10MB). <code>rnn_bidirectional</code> controls whether the recurrent neural network is bidirectional, that is, it processes  the previous characters both forward <em>and</em> backward (which works great if text follows specific rules, like Shakespeare&rsquo;s character headings). <code>max_length</code> determines the maximum number of characters for the network to use to predict the next character, which should be increased to let the network learn longer sequences, or decrease for shorter sequences.</p>

<p>Training has a few helpful options as well. <code>num_epochs</code> determines the number of full passes of the data; this can be tweaked if you want to train the model even more. <code>batch_size</code> determines the number of model sequences to train in a step: typically, batch size for deep learning models is 32 or 128, but with a GPU, you can get a speed increase by saturating it with the given 1024 default. <code>train_size</code> determines the proportion of character samples to train; setting it <code>&lt; 1.0</code> both speeds up each epoch, and prevents the model from cheating and being able to learn sequences verbatim. (You can set <code>&#39;validation&#39;: True</code> to run the model on the unused data after each epoch to see if the model is overfitting).</p>

<p>Let&rsquo;s try playing with the parameters more on a new text dataset.</p>

<h2>Word-Level Text Generation With Reddit Data</h2>

<p>You might be asking &ldquo;how do you obtain text data&rdquo;? The popular text-generation use cases like lyric generation and movie scripts are copyright-protected so they&rsquo;re harder to find, and even then, it might not be enough text data to train a new model upon (you typically want atleast 100,000 characters).</p>

<p><a href="https://www.reddit.com">Reddit</a>, however, has <em>millions</em> of submission titles which would be great to train for a model. I wrote a <a href="https://github.com/minimaxir/subreddit-generator">helper script</a> to automatically download the top <em>n</em> Reddit submissions from a given subreddit over a given period of time. If you choose subreddits with similar linguistic styles in their titles, the subreddits will even blend together! Let&rsquo;s play with the Top 20,000 Submissions in 2017 from each of <a href="https://www.reddit.com/r/politics/">/r/politics</a> and <a href="https://www.reddit.com/r/technology/">/r/technology</a>, which results in a 3.3MB file: about 3x as much data as the Shakespeare plays.</p>

<p><img src="/img/text-neural-networks/reddit_data.png" alt=""></p>

<p>One last thing that textgenrnn can do that most char-rnn implementations can&rsquo;t is generate a <em>word level</em> model (thanks to Keras&rsquo;s tokenizers), where the model uses the <em>n</em> previous words/punctuation to predict the next word/punctuation. On the plus side, using only words prevents crazy typoes and since it predicts multiple &ldquo;characters&rdquo; at a time, <code>max_length</code> can be reduced proportionally, dramatically speeding up training. There&rsquo;s two downsides with this approach; since words are all lowercase and punctuation is its own token, the generated text cannot be immediately used without manual editing. Additionally, the model weights will be substantially larger than a character-level model since the word-level model has to store an embedding for each word (up to <code>max_words</code>, which is 10,000 by default when the vocabulary size for a char-level model is 200-300).</p>

<p>Another advantage of the Colaboratory notebook is that you can quickly adjust model parameters, upload a new file, and immediately start training it. We&rsquo;ll set <code>&#39;line_delimited&#39;: True</code> and <code>&#39;rnn_bidirectional&#39;: False</code> since there aren&rsquo;t specific rules. For word level training, let&rsquo;s set <code>&#39;word_level&#39;: True</code> and <code>&#39;max_length&#39;: 8</code> to reflect the new training architecture. Since training length has been reduced to 1/5th, we can set <code>&#39;num_epochs&#39;: 50</code> and <code>&#39;gen_epoch&#39;: 10</code> to balance it out. Rerun the config cell to update parameters, upload the Reddit data file, and rerun training.</p>

<p>The resulting model is much more well trained than the Shakespeare model, and here&rsquo;s a few Reddit submission titles generated at a temperature of 1.0:</p>
<div class="highlight"><pre><code class="language-" data-lang="">report : 49 % of americans now believe all of the country ’ s effective

people like facebook like it ' s 650 of 1 %

uber accused of secretly - security popular service ( likely oklahoma )

equifax breach fallout : your salary is dead

sanders uses texas shooter ' s iphone sales

adobe videos will be used to sell the web

apple to hold cash for $ 500 service

fitbit just targeting solar energy

george bush ' s concept car ‘ goes for all the biggest controversy .
</code></pre></div>
<p>Those look pretty good, although they may need a little editing before posting on social media.</p>

<h2>Followup</h2>

<p>These examples only train the model for little time as a demo of textgenrnn&rsquo;s fast learning; there&rsquo;s nothing stopping you from increasing <code>num_epochs</code> even more to further refine a model. However, from my experience, the training cell times out after <strong>4 hours</strong>; set <code>num_epochs</code> accordingly, although in my experience that&rsquo;s all you need before the network converges.</p>

<p>In practice, I used this Colaboratory notebook to train <em>many</em> models for <a href="https://www.reddit.com/r/SubredditNN/">/r/SubredditNN</a>, a Reddit subreddit where only text-generating neural network bots trained on other subreddits. And the results are very funny:</p>

<p><img src="/img/text-neural-networks/subredditnn.png" alt=""></p>

<p>Although text generating neural networks aren&rsquo;t at the point where they can <a href="https://www.bloomberg.com/news/features/2018-05-17/i-tried-to-get-an-ai-to-write-this-story-paul-ford">write entire articles by themselves</a>, there are still many opportunities to use it just for fun! And thanks to textgenrnn, it&rsquo;s easy, fast, and cost-effective for anyone to do! Let me know if you make any interesting neural networks with textgenrnn and this Notebook!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing One Million NCAA Basketball Shots]]></title>
    <link href="https://minimaxir.com/2018/03/basketball-shots/"/>
    <updated>2018-03-19T09:20:00-07:00</updated>
    <id>https://minimaxir.com/2018/03/basketball-shots</id>
    <content type="html"><![CDATA[<p>So <a href="https://www.ncaa.com/march-madness">March Madness</a> is happing right now. In celebration, <a href="https://www.google.com">Google</a> uploaded <a href="https://console.cloud.google.com/launcher/details/ncaa-bb-public/ncaa-basketball">massive basketball datasets</a> from the <a href="https://www.ncaa.com">NCAA</a> and <a href="https://www.sportradar.com/">Sportradar</a> to <a href="https://cloud.google.com/bigquery/">BigQuery</a> for anyone to query and experiment. After learning that the <a href="https://www.reddit.com/r/bigquery/comments/82nz17/dataset_statistics_for_ncaa_mens_and_womens/">dataset had location data</a> on where basketball shots were made on the court, I played with it and a couple hours later, I created a decent heat map data visualization. The next day, I <a href="https://www.reddit.com/r/dataisbeautiful/comments/837qnu/heat_map_of_1058383_basketball_shots_from_ncaa/">posted it</a> to Reddit&rsquo;s <a href="https://www.reddit.com/r/dataisbeautiful">/r/dataisbeautiful subreddit</a> where it earned about <strong>40,000 upvotes</strong>. (!?)</p>

<p>Let&rsquo;s dig a little deeper. Although visualizing basketball shots has been <a href="http://www.slate.com/blogs/browbeat/2012/03/06/mapping_the_nba_how_geography_can_teach_players_where_to_shoot.html">done</a> <a href="http://toddwschneider.com/posts/ballr-interactive-nba-shot-charts-with-r-and-shiny/">before</a>, this time we have access to an order of magnitude more public data to do some really cool stuff.</p>

<h2>Full Court</h2>

<p>The Sportradar play-by-play table on BigQuery <code>mbb_pbp_sr</code> has more than 1 million NCAA men&rsquo;s basketball shots since the 2013-2014 season, with more being added now during March Madness. Here&rsquo;s a heat map of the locations where those shots were made on the full basketball court:</p>

<p><img src="/img/basketball-shots/ncaa_count_attempts_unlog.png" alt=""></p>

<p>We can clearly see at a glance that the majority of shots are made right in front of the basket. For 3-point shots, the center and the corners have higher numbers of shot attempts than the other areas. But not much else since the data is so spatially skewed: setting the bin color scale to logarithmic makes trends more apparent and helps things go viral on Reddit.</p>

<p><img src="/img/basketball-shots/ncaa_count_attempts.png" alt=""></p>

<p>Now there&rsquo;s more going on here: shot behavior is clearly symmetric on each side of the court, and there&rsquo;s a small gap between the 3-point line and where 3-pt shots are typically made, likely to ensure that it it&rsquo;s not accidentally ruled as a 2-pt shot.</p>

<p>How likely is it to score a shot from a given spot? Are certain spots better than others?</p>

<p><img src="/img/basketball-shots/ncaa_count_perc_success.png" alt=""></p>

<p>Surprisingly, shot accuracy is about <em>equal</em> from anywhere within typical shooting distance, except directly in front of the basket where it&rsquo;s much higher. What is the <a href="https://en.wikipedia.org/wiki/Expected_value">expected value</a> of a shot at a given position: that is, how many points on average will they earn for their team?</p>

<p><img src="/img/basketball-shots/ncaa_count_avg_points.png" alt=""></p>

<p>The average points earned for 3-pt shots is about 1.5x higher than many 2-pt shot locations in the inner court due to the equal accuracy, but locations next to the basket have an even higher expected value. Perhaps the accuracy of shots close to the basket is higher (&gt;1.5x) than 3-pt shots and outweighs the lower point value? </p>

<p>Since both sides of the court are indeed the same, we can combine the two sides and just plot a half-court instead. (Cross-court shots, which many Redditors <a href="https://www.reddit.com/r/dataisugly/comments/839rax/basketball_heat_map_shows_an_impressive_number_of/">argued</a> that they invalidated my visualizations above, constitute only <em>0.16%</em> of the basketball shots in the dataset, so they can be safely removed as outliers).</p>

<p><img src="/img/basketball-shots/ncaa_count_attempts_half_log.png" alt=""></p>

<p>There are still a few oddities, such as shots being made <em>behind</em> the basket. Let&rsquo;s drill down a bit.</p>

<h2>Focusing on Basketball Shot Type</h2>

<p>The Sportradar dataset classifies a shot as one of 5 major types: a <strong>jump shot</strong> where the player jumps-and-throws the basketball, a <strong>layup</strong> where the player runs down the field toward the basket and throws a one-handed shot, a <strong>dunk</strong> where the player slams the ball into the basket (looking cool in the process), a <strong>hook shot</strong> where the player close to the basket throws the ball with a hook motion, and a <strong>tip shot</strong> where the player intercepts a basket rebound at the tip of the basket and pushes it in.</p>

<p><img src="/img/basketball-shots/ncaa_types_prop_attempts.png" alt=""></p>

<p>However, the most frequent types of shots are the less flashy, more practical jump shots and layups. But is a certain type of shot &ldquo;better?&rdquo;</p>

<p><img src="/img/basketball-shots/ncaa_types_perc.png" alt=""></p>

<p>Layups are safer than jump shots, but dunks are the most accurate of all the types (however, players likely wouldn&rsquo;t attempt a dunk unless they knew it would be successful). The accuracy of layups  and other close-to-basket shots is indeed more than 1.5x better than the jump shots of 3-pt shots, which explains the expected value behavior above.</p>

<p>Plotting the heat maps for each type of shot offers more insight into how they work:</p>

<p><img src="/img/basketball-shots/ncaa_count_attempts_half_types_log.png" alt=""></p>

<p>They&rsquo;re wildly different heat maps which match the shot type descriptions above, but show we&rsquo;ll need to separate data visualizations by type to accurately see trends.</p>

<h2>Impact of Game Elapsed Time At Time of Shot</h2>

<p>A NCAA basketball game lasts for 40 minutes total (2 halves of 20 minutes each), with the possibility of overtime. The <a href="https://bigquery.cloud.google.com/savedquery/4194148158:3359d86507814fb19a5997a770456baa">example BigQuery</a> for the NCAA-provided data compares the percentage of 3-point shots made during the first 35 minutes of the game versus the last 5 minutes: at the end of the game, accuracy was lower by 4 percentage points (31.2% vs. 35.1%). It might be interesting to facet these visualizations by the elapsed time of the game to see if there are any behavioral changes.</p>

<p><img src="/img/basketball-shots/ncaa_types_prop_type_elapsed.png" alt=""></p>

<p>There isn&rsquo;t much difference between the proportions within a given half, but there is a difference between the first half and the second half, where the second half has fewer jump shots and more aggressive layups and dunks. After looking at shot success percentage:</p>

<p><img src="/img/basketball-shots/ncaa_types_perc_success_type_elapsed.png" alt=""></p>

<p>The jump shot accuracy loss at the end of the game with Sportradar data is similar to that of the NCAA data, which is a good sanity check (but it&rsquo;s odd that the accuracy drop only happens in the last 5 minutes and not elsewhere in the 2nd half). Layup accuracy increases in the second half with the number of layups.</p>

<p>We can also visualize heat maps for each combo of shot type with time elapsed bucket, but given the results above, the changes in behavior over time may not be very perceptible.</p>

<p><img src="/img/basketball-shots/ncaa_count_attempts_half_interval_log.png" alt=""></p>

<h2>Impact of Winning/Losing Before Shot</h2>

<p>Another theory worth exploring is determining if there is any difference whether a team is winning or losing when they make their shot (technically, when the delta between the team score and the other team score is positive for winning teams, negative for losing teams, or 0 if tied). Are players more relaxed when they have a lead? Are players more prone to making mistakes when losing?</p>

<p><img src="/img/basketball-shots/ncaa_types_prop_type_score.png" alt=""></p>

<p>Layups are the same across all buckets, but for teams that are winning, there are fewer jump shots and <strong>more dunkin&rsquo; action</strong> (nearly double the dunks!). However, the accuracy chart illustrates an issue:</p>

<p><img src="/img/basketball-shots/ncaa_types_perc_success_type_score.png" alt=""></p>

<p>Accuracy for most types of shots is much better for teams that are winning&hellip;which may be the <em>reason</em> they&rsquo;re winning. More research can be done in this area.</p>

<h2>Conclusion</h2>

<p>I fully admit I am not a basketball expert. But playing around with this data was a fun way to get a new perspective on how collegiate basketball games work. There&rsquo;s a lot more work that can be done with big basketball data and game strategy; the NCAA-provided data doesn&rsquo;t have location data, but it does have <strong>6x more shots</strong>, which will be very helpful for further fun in this area.</p>

<hr>

<p><em>You can view the R code, ggplot2 code, and BigQueries used to create the data visualizations in <a href="http://minimaxir.com/notebooks/basketball-shots/">this R Notebook</a>. You can also view the images/code used for this post in <a href="https://github.com/minimaxir/ncaa-basketball">this GitHub repository</a></em>.</p>

<p><em>You are free to use the data visualizations from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!</em></p>

<p><em>Special thanks to Ewen Gallic for his implementation of a <a href="http://egallic.fr/en/drawing-a-basketball-court-with-r/">basketball court in ggplot2</a>, which saved me a lot of time!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Visual Overview of Stack Overflow's Question Tags]]></title>
    <link href="https://minimaxir.com/2018/02/stack-overflow-questions/"/>
    <updated>2018-02-09T09:00:00-08:00</updated>
    <id>https://minimaxir.com/2018/02/stack-overflow-questions</id>
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com">Stack Overflow</a> is the most popular contemporary knowledge base for programming questions. But most interact with the site by Googling a programming question and getting a top result that links to SO. There isn&rsquo;t as much discussion about actually <em>asking</em> questions on the site.</p>

<p><img src="/img/stack-overflow-tags/python_last_list.png" alt=""></p>

<p>I <em>could</em> use <a href="https://stackoverflow.com/users/9314418/minimaxir?tab=profile">my Stack Overflow account</a> and test out the process of creating a question, but <del>I already know everything about programming</del> there may be another way to learn how SO works. Stack Overflow <a href="https://archive.org/details/stackexchange">releases an archive</a> of all questions on the site every 3 months, and this archive is <a href="https://cloud.google.com/bigquery/public-data/stackoverflow">syndicated to BigQuery</a>, making it trivial to retrieve and analyze the millions of SO questions over the years. Even though (now-former) Stack Overflow data scientist <a href="https://twitter.com/drob">David Robinson</a> has written <a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/">many</a> <a href="https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/">interesting</a> blog posts for Stack Overflow with their data, I figured why not give it a try.</p>

<p><img src="/img/stack-overflow-tags/python_last_list_answer.png" alt=""></p>

<h2>Overview</h2>

<p>Unlike social media sites like <a href="https://twitter.com">Twitter</a> and <a href="https://www.reddit.com">Reddit</a> where the majority of traffic is driven within the first days after something is posted, posts on evergreen content sources like Stack Overflow are still relevant many years later. In fact, the traffic to Stack Overflow for most of 2017 (derived by finding the difference between question view counts from archive snapshots) is approximately uniform across question age, with a slight bias toward older content.</p>

<p><img src="/img/stack-overflow-tags/so_overview.png" alt=""></p>

<p>In 2017, Stack Overflow received about 40k-50k new questions each week, an impressive feat:</p>

<p><img src="/img/stack-overflow-tags/weekly_count.png" alt=""></p>

<p>For the rest of this post, we&rsquo;ll only look at questions made in 2017 (until December; about 2.3 million questions total) in order to get a sense of the current development landscape, and what&rsquo;s to come in the future. But what types of questions are they?</p>

<h2>Tag Breakdown</h2>

<p>All questions on Stack Overflow are required to have atleast 1 tag indicating the programming language/technologies involved with the question, and can have up to 5 tags. In the example &ldquo;how do you get the last element of a list in Python&rdquo; <a href="https://stackoverflow.com/questions/930397/getting-the-last-element-of-a-list-in-python">question</a> above, the tags are <code>python</code>, <code>list</code>, and <code>indexing</code>. In 2017, most of new questions had 2-3 tags. (i.e. people aren&rsquo;t <a href="http://minimaxir.com/2014/03/hashtag-tag/">tag spamming</a> like on <a href="https://www.instagram.com/?hl=en">Instagram</a> for maximum exposure).</p>

<p><img src="/img/stack-overflow-tags/so_tag_breakdown.png" alt=""></p>

<p>In theory, tag spamming might make a question more likely to be answered; however for all tag counts, the proportion of questions with accepted answer (the green checkmark) is <strong>36-39%</strong>, so there&rsquo;s not much practical benefit from minmaxing tag counts. Which types of tagged questions are most likely to be answered?</p>

<p>First, here&rsquo;s the breakdown of the top 40 tags on Stack Overflow, by the number of new questions containing that tag for each month throughout 2017. This can give a sense of each technology&rsquo;s growth/decline throughout the year.</p>

<p><img src="/img/stack-overflow-tags/monthly_count_tag.png" alt=""></p>

<p>Both new web development technologies like <code>reactjs</code> and <code>typescript</code> and data science tools like <code>pandas</code> and <code>r</code> are trending upward.</p>

<p>For the Top 1,000 tags, here are the top 30 tags by the proportion of questions which received an acceptable answer:</p>

<p><img src="/img/stack-overflow-tags/acceptable_answer_top_30.png" alt=""></p>

<p>In contrast, here are the bottom 30 out of the Top 1,000:</p>

<p><img src="/img/stack-overflow-tags/acceptable_answer_bottom_30.png" alt=""></p>

<p>The top tags are newer, sexier technologies like <code>rust</code> and <code>dart</code>, with another strong hint of data science tooling with <code>dplyr</code> (which I used to aggregate the data for this post!) and <code>data.table</code>. In contrast, the bottom tags are less sexy and more corporate like <code>salesforce</code>, <code>drupal</code>, and <code>sharepoint-2013</code> (that&rsquo;s why consultants who specialize in these technologies can get paid very well!).</p>

<p>It should be noted these two charts do not necessarily imply that one technology is &ldquo;better&rdquo; than another, and the difference in answer rates may be due to question difficulty and the number of people skilled in the tech available that can answer it effectively.</p>

<p>The timing when questions are asked might vary by tag. Per <a href="https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/">a Stack Overflow analysis</a>, people typically ask questions during the 9 AM - 5 PM work hours (although in my case, I cannot easily adjust for the time zone of the asker). How does this data fare?</p>

<p><img src="/img/stack-overflow-tags/monthly_count_hr_doy.png" alt=""></p>

<p>This visualization is a bit weird. I adjusted the times to the Eastern time since internet activity for U.S.-based websites tends to revolve around that time zone. But for most technologies, the peak question-asking times are well before 9 AM to 5 PM: do those technologies correspond more to greater use in Europe and Asia? (In contrast, data-oriented technologies like <code>r</code>, <code>pandas</code> and <code>excel</code> <em>do</em> peak during the 9-5 block).</p>

<h2>How easy is it to get an answer by tag?</h2>

<p>Stack Overflow caters the homepage toward the logged-in user&rsquo;s recommended tags. Therefore, it&rsquo;s not a surprise that the distribution of view counts on 2017 questions for each tag are very similar, although there is a slight edge toward the new &ldquo;hip&rdquo; technologies like <code>typescript</code>, <code>spring</code>, and <code>swift</code>.</p>

<p><img src="/img/stack-overflow-tags/views_boxplot_tag.png" alt=""></p>

<p>At the least, the distribution ensures that atleast 10 people see your question for these popular topics, which is nifty when you consider posts on Twitter and Reddit can die without any visibility at all. But will they provide an acceptable answer?</p>

<p>The time it takes to get an acceptable answer also varies significantly by tag:</p>

<p><img src="/img/stack-overflow-tags/acceptable_answer_density.png" alt=""></p>

<p>A median time of <em>15 minutes</em> for tags like <code>pandas</code> and <code>arrays</code> is pretty impressive! And even in the worst case scenario for these popular tags, the median is only a couple hours, much lower than I thought it would be.</p>

<h2>The Relationship Between Tags</h2>

<p>As one would expect, the types of questions asked for each tag are much different. Here&rsquo;s a wordcloud for each of the tags, quantifying the words most frequently used in the questions on those tags:</p>

<p><img src="/img/stack-overflow-tags/so_tag_wordcloud.png" alt=""></p>

<p>Notably, each word cloud is significantly different from reach other, even when technologies are related (also surprisingly true in the case of <code>angular</code> and <code>angularjs</code>!).</p>

<p>How are the tags related anyways? We can calculate an <a href="https://en.wikipedia.org/wiki/Adjacency_matrix">adjacency matrix</a> of the tag pairs in the questions to see which tags are related:</p>

<p><img src="/img/stack-overflow-tags/so_tag_adjacency.png" alt=""></p>

<p>Looking down a given row/column, you can see which technologies have a lot of questions in common with another (for example, <code>javascript</code> and <code>json</code> are frequently asked in conjunction with other tags).</p>

<p>Going back earlier to talking about tag abuse, do the presence of certain pairs of tags lead to notably different answer rates?</p>

<p><img src="/img/stack-overflow-tags/so_tag_adjacency_percent.png" alt=""></p>

<p>Tag pairs which don&rsquo;t make much sense (e.g. <code>ios</code>+<code>android</code>, <code>ios</code>+<code>javascript</code>, <code>android</code>+<code>php</code>) tend to have very low answer rates (20%-30%). But tags with already high answer rates like <code>regex</code> don&rsquo;t get much higher or much lower at a given pair.</p>

<h2>Conclusion</h2>

<p>There&rsquo;s a lot more than can be done looking at question tags on Stack Overflow. I was surprised to see that all types of programming languages have quick answer times and a high probability of receiving an acceptable answer! I&rsquo;ll definitely keep an eye on the SO archives as they are released, and I&rsquo;m excited to see how trends change in the future.</p>

<hr>

<p><em>You can view the R and ggplot2 code used to create the data visualizations in <a href="http://minimaxir.com/notebooks/stack-overflow-questions/">this R Notebook</a>. You can also view the images/data used for this post in <a href="https://github.com/minimaxir/stack-overflow-questions">this GitHub repository</a></em>.</p>

<p><em>You are free to use the data visualizations from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking Modern GPUs for Maximum Cloud Cost Efficiency in Deep Learning]]></title>
    <link href="https://minimaxir.com/2017/11/benchmark-gpus/"/>
    <updated>2017-11-28T08:30:00-08:00</updated>
    <id>https://minimaxir.com/2017/11/benchmark-gpus</id>
    <content type="html"><![CDATA[<p>A few months ago, I <a href="http://minimaxir.com/2017/06/keras-cntk/">performed benchmarks</a> of deep learning frameworks in the cloud, with a <a href="http://minimaxir.com/2017/07/cpu-or-gpu/">followup</a> focusing on the cost difference between using GPUs and CPUs. And just a few months later, the landscape has changed, with significant updates to the low-level <a href="https://developer.nvidia.com/cudnn">NVIDIA cuDNN</a> library which powers the raw learning on the GPU, the <a href="https://www.tensorflow.org">TensorFlow</a> and <a href="https://github.com/Microsoft/CNTK">CNTK</a> deep learning frameworks, and the higher-level <a href="https://github.com/fchollet/keras">Keras</a> framework which uses TensorFlow/CNTK as backends for easy deep learning model training.</p>

<p>As a bonus to the framework updates, Google <a href="https://cloudplatform.googleblog.com/2017/09/introducing-faster-GPUs-for-Google-Compute-Engine.html">recently released</a> the newest generation of NVIDIA cloud GPUs, the Pascal-based P100, onto <a href="https://cloud.google.com/compute/">Google Compute Engine</a> which touts an up-to-10x performance increase to the current K80 GPUs used in cloud computing. As a bonus bonus, Google recently <a href="https://cloudplatform.googleblog.com/2017/11/new-lower-prices-for-GPUs-and-preemptible-Local-SSDs.html">cut the prices</a> of both K80 and P100 GPU instances by up to 36%.</p>

<p>The results of my earlier benchmarks favored <a href="https://cloud.google.com/preemptible-vms/">preemptible</a> instances with many CPUs as the most cost efficient option (where a preemptable instance can only last for up to 24 hours and could end prematurely). A 36% price cut to GPU instances, in addition to the potential new benefits offered by software and GPU updates, however, might be enough to tip the cost-efficiency scales back in favor of GPUs. It&rsquo;s a good idea to rerun the experiment with updated VMs and see what happens.</p>

<h2>Benchmark Setup</h2>

<p>As with the original benchmark, I set up a <a href="https://github.com/minimaxir/keras-cntk-docker">Docker container</a> containing the deep learning frameworks (based on cuDNN 6, the latest version of cuDNN natively supported by the frameworks) that can be used to train each model independently. The <a href="https://github.com/minimaxir/keras-cntk-benchmark/tree/master/v2/test_files">Keras benchmark scripts</a> run on the containers are based off of <em>real world</em> use cases of deep learning.</p>

<p>The 6 hardware/software configurations and Google Compute Engine <a href="https://cloud.google.com/compute/pricing">pricings</a> for the tests are:</p>

<ul>
<li>A K80 GPU (attached to a <code>n1-standard-1</code> instance), tested with both TensorFlow (1.4) and CNTK (2.2): <strong>$0.4975 / hour</strong>. </li>
<li>A P100 GPU (attached to a <code>n1-standard-1</code> instance), tested with both TensorFlow and CNTK: <strong>$1.5075 / hour</strong>.</li>
<li>A preemptable <code>n1-highcpu-32</code> instance, with 32 vCPUs based on the Intel Skylake architecture, tested with TensorFlow only: <strong>$0.2400 / hour</strong></li>
<li>A preemptable <code>n1-highcpu-16</code> instance, with 16 vCPUs based on the Intel Skylake architecture, tested with TensorFlow only: <strong>$0.1200 / hour</strong></li>
</ul>

<p>A single K80 GPU uses &frac12; a GPU board while a single P100 uses a full GPU board, which in an ideal world would suggest that the P100 is twice as fast at the K80 at minimum. But even so, the P100 configuration is about 3 times as expensive, so even if a model is trained in half the time, it may not necessarily be cheaper with the P100.</p>

<p>Also, the CPU tests use TensorFlow <em>as installed via the recommended method</em> through pip, since compiling the TensorFlow binary from scratch to take advantage of CPU instructions as <a href="http://minimaxir.com/2017/07/cpu-or-gpu/">with my previous test</a> is not a pragmatic workflow for casual use.</p>

<h2>Benchmark Results</h2>

<p>When a fresh-out-of-a-AI-MOOC engineer wants to experiment with deep learning in the cloud, typically they use a K80 + TensorFlow setup, so we&rsquo;ll use that as the <em>base configuration</em>.</p>

<p>For each model architecture and software/hardware configuration, I calculate the <strong>total training time relative to the base configuration instance training</strong> for running the model training for the provided test script. In all cases, the P100 GPU <em>should</em> perform better than the K80, and 32 vCPUs <em>should</em> train faster than 16 vCPUs. The question is how <em>much</em> faster?</p>

<p>Let&rsquo;s start using the <a href="http://yann.lecun.com/exdb/mnist/">MNIST dataset</a> of handwritten digits plus the common multilayer perceptron (MLP) architecture, with dense fully-connected layers. Lower training time is better.</p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-5.png" alt=""></p>

<p>For this task, CNTK appears to be more effective than TensorFlow. Indeed, the P100 is faster than the K80 for the corresponding framework, although it&rsquo;s not a dramatic difference. However, since the task is simple, the CPU performance is close to that of the GPU, which implies that the GPU is not as cost effective for a simple architecture.</p>

<p>For each model architecture and configuration, I calculate a <strong>normalized training cost relative to the cost of the base configuration training</strong>. Because GCE instance costs are prorated, we can simply calculate experiment cost by multiplying the total number of seconds the experiment runs by the cost of the instance (per second).</p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-6.png" alt=""></p>

<p>Unsurprisingly, CPUs are more cost effective. However, the P100 is more cost <em>ineffective</em> for this task than the K80.</p>

<p>Now, let&rsquo;s look at the same dataset with a convolutional neural network (CNN) approach for digit classification. Since CNNs are typically used for computer vision tasks, new graphic card architectures are optimized for CNN workflows, so it will be interesting to see how the P100 performs compared to the K80:</p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-7.png" alt=""></p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-8.png" alt=""></p>

<p>Indeed, the P100 is twice as fast and the K80, but due to the huge cost premium, it&rsquo;s not cost effective for this simple task. However, CPUs do not perform well on this task either, so notably the base configuration is the best configuration.</p>

<p>Let&rsquo;s go deeper with CNNs and look at the <a href="https://www.cs.toronto.edu/%7Ekriz/cifar.html">CIFAR-10</a> image classification dataset, and a model which utilizes a deep covnet + a multilayer perceptron and ideal for image classification (similar to the <a href="https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3">VGG-16</a> architecture).</p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-9.png" alt=""></p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-10.png" alt=""></p>

<p>Similar results to that of a normal MLP. Nothing fancy.</p>

<p>The Bidirectional long-short-term memory (LSTM) architecture is great for working with text data like IMDb reviews. When I did <a href="http://minimaxir.com/2017/06/keras-cntk/">my first benchmark article</a>, I noticed that CNTK performed significantly better than TensorFlow, as <a href="https://news.ycombinator.com/item?id=14538086">commenters on Hacker News</a> noted that TensorFlow uses an inefficient implementation of the LSTM on the GPU.</p>

<p><img src="/img/benchmark-gpus/cntk-old.png" alt=""></p>

<p>However, with Keras&rsquo;s <a href="https://keras.io/layers/recurrent/#cudnnlstm">new CuDNNRNN layers</a> which leverage cuDNN, this inefficiency may be fixed, so for the K80/P100 TensorFlow GPU configs, I use a CuDNNLSTM layer instead of a normal LSTM layer. So let&rsquo;s take another look:</p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-1.png" alt=""></p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-2.png" alt=""></p>

<p><em>WOAH.</em> TensorFlow is now more than <em>three times as fast</em> than CNTK! (And compared against my previous benchmark, TensorFlow on the K80 w/ the CuDNNLSTM is about <em>7x as fast</em> as it once was!) Even the CPU-only versions of TensorFlow are faster than CNTK on the GPU now, which implies significant improvements in the ecosystem outside of the CuDNNLSTM layer itself. (And as a result, CPUs are still more cost efficient)</p>

<p>Lastly, LSTM text generation of <a href="https://en.wikipedia.org/wiki/Friedrich_Nietzsche">Nietzsche&rsquo;s</a> <a href="https://s3.amazonaws.com/text-datasets/nietzsche.txt">writings</a> follows similar patterns to the other architectures, but without the drastic hit to the GPU.</p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-11.png" alt=""></p>

<p><img src="/img/benchmark-gpus/dl-cpu-gpu-12.png" alt=""></p>

<h2>Conclusions</h2>

<p>The biggest surprise of these new benchmarks is that there is no configuration where the P100 is the most cost-effective option, even though the P100 is indeed faster than the K80 in all tests.  Although per <a href="https://developer.nvidia.com/cudnn">the cuDNN website</a>, there is apparently only a 2x speed increase between the performance of the K80 and P100 using cuDNN 6, which is mostly consistent with the results of my benchmarks:</p>

<p><img src="/img/benchmark-gpus/cudnn.png" alt=""></p>

<p>I did not include a multi-GPU configuration in the benchmark data visualizations above using Keras&rsquo;s new <code>multi_gpu_model</code> <a href="https://keras.io/utils/#multi_gpu_model">function</a> because in my testing, the multi-GPU training <em>was equal to or worse than a single GPU</em> in all tests.</p>

<p>Taking these together, it&rsquo;s possible that the overhead introduced by parallel, advanced architectures <em>eliminates the benefits</em> for &ldquo;normal&rdquo; deep learning workloads which do not fully saturate the GPU. Rarely do people talk about diminishing returns in GPU performance with deep learning.</p>

<p>In the future, I want to benchmark deep learning performance against more advanced deep learning use cases such as <a href="https://en.wikipedia.org/wiki/Reinforcement_learning">reinforcement learning</a> and deep CNNs like <a href="https://github.com/tensorflow/models/tree/master/research/inception">Inception</a>. But that doesn&rsquo;t mean these benchmarks are not relevant; as stated during the benchmark setup, the GPUs were tested against typical deep learning use cases, and now we see the tradeoffs that result.</p>

<p>In all, with the price cuts on GPU instances, cost-performance is often <em>on par</em> with preemptable CPU instances, which is an advantage if you want to train models faster and not risk the instance being killed unexpectedly. And there is still a lot of competition in this space: <a href="https://www.amazon.com">Amazon</a> offers a <code>p2.xlarge</code> <a href="https://aws.amazon.com/ec2/spot/">Spot Instance</a> with a K80 GPU for $0.15-$0.20 an hour, less than half of the corresponding Google Compute Engine K80 GPU instance, although with <a href="https://aws.amazon.com/ec2/spot/details/">a few bidding caveats</a> which I haven&rsquo;t fully explored yet. Competition will drive GPU prices down even further, and training deep learning models will become even easier.</p>

<p>And as the cuDNN chart above shows, things will get <em>very</em> interesting once Volta-based GPUs like the V100 are generally available and the deep learning frameworks support cuDNN 7 by default.</p>

<p><strong>UPDATE 12/17</strong>: <em>As pointed out by <a href="https://news.ycombinator.com/item?id=15941682">dantiberian on Hacker News</a>, Google  Compute Engine now supports <a href="https://cloud.google.com/compute/docs/instances/preemptible#preemptible_with_gpu">preemptible GPUs</a>, which was apparently added after this post went live. Preemptable GPUs are exactly half the price of normal GPUs (for both K80s and P100s; $0.73/hr and $0.22/hr respectively), so they&rsquo;re about double the cost efficiency (when factoring in the cost of the base preemptable instance), which would put them squarely ahead of CPUs in all cases. (and since the CPU instances used here were also preemptable, it&rsquo;s apples-to-apples)</em></p>

<hr>

<p><em>All scripts for running the benchmark are available in <a href="https://github.com/minimaxir/keras-cntk-benchmark/tree/master/v2">this GitHub repo</a>. You can view the R/ggplot2 code used to process the logs and create the visualizations in <a href="http://minimaxir.com/notebooks/benchmark-gpus/">this R Notebook</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Magic: the GIFening]]></title>
    <link href="https://minimaxir.com/2017/11/magic-the-gifening/"/>
    <updated>2017-11-07T08:10:00-08:00</updated>
    <id>https://minimaxir.com/2017/11/magic-the-gifening</id>
    <content type="html"><![CDATA[<p>After working at <a href="https://www.buzzfeed.com/">BuzzFeed</a> for a few months, I&rsquo;m now an expert in the proper usage of GIFs. My favorite GIF tool is the <a href="https://giphy.com">/giphy</a> command in <a href="https://slack.com">Slack</a>, which <a href="https://get.slack.help/hc/en-us/articles/204714258-Add-Giphy-search-to-Slack">puts a random GIF</a> according to a given phrase into the chat, with better-than-expected appropriateness of the phrase to the GIF.</p>

<p>Completely unrelated, I recently rediscovered <a href="https://github.com/Zulko/moviepy">MoviePy</a>, a Python library for programmatically editing videos and GIFs without requiring an expensive and slow video editing program. I had played with MoviePy a bit in 2014 when it was <a href="http://zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/#">first released</a> and <a href="https://news.ycombinator.com/item?id=7121104">became viral</a>, but couldn&rsquo;t think of a creative application for the library at the time.</p>

<p>On a boring weekend I had a silly idea: why not create a program to superimpose appropriate GIFs onto <a href="https://magic.wizards.com/en">Magic: the Gathering</a> cards using these two tools? And even better, why not <em>automate</em> both the creation of the card GIFs and the tweeting of a new GIF every few hours?</p>

<p><span><blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr"><a href="https://t.co/sxqKUYHmfv">pic.twitter.com/sxqKUYHmfv</a></p>&mdash; Magic: The GIFening (@MTGIFening) <a href="https://twitter.com/MTGIFening/status/913993793052880897?ref_src=twsrc%5Etfw">September 30, 2017</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </span></p>

<p>As it turns out, creating a Twitter bot to tweet Magic card GIFs is <a href="https://github.com/minimaxir/magic-the-gifening">easy to implement</a>, but with a few interesting caveats. The end result is <a href="https://twitter.com/MTGIFening">@MTGIFening</a>. Here&rsquo;s how I typically create my crazy apps, step by step.</p>

<h2>Feasibility Analysis</h2>

<p>Like all my data analysis projects, I checked if it&rsquo;s possible to complete the project in a way that won&rsquo;t suck up a lot of free time hacking out convoluted solutions.</p>

<p><strong>Can I easily get a list of all Magic cards?</strong> Yes, via <a href="https://mtgjson.com">MTG JSON</a>, which has a downloadable JSON dump of all Magic cards.</p>

<p><strong>Can I easily get random GIFs from GIPHY?</strong> Yes, there is a /random endpoint in the <a href="https://developers.giphy.com">GIPHY API</a> which returns a random GIF for a specified phrase, like the /giphy Slack command. The GIPHY API requires registration, but has generous rate limits (10k requests/day).</p>

<p><strong>Can I easily composite a GIF onto an image with MoviePy?</strong> Yes, compositing is a <em>primary use case</em> for the library, with many tutorials in the documentation.</p>

<p><strong>Can I easily get an image for a specified Magic card?</strong> Unsure. The official tool for viewing Magic card images is <a href="http://gatherer.wizards.com/Pages/Default.aspx">Gatherer</a>. After checking the image source for the cards, each card image in Gatherer has a URL that follows this schema: <code>http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=XXXXX&amp;type=card</code>. That&rsquo;s easy to understand, but what&rsquo;s a multiverseid?</p>

<p><strong>Is there a mapping of multiverseid to Magic cards from MTG JSON?</strong> Yes, the multiverseid for each Magic card is <a href="https://mtgjson.com/documentation.html">present as a field</a> in the &ldquo;All Sets&rdquo; dataset (but not the &ldquo;All Cards&rdquo; dataset oddly). A quick manual check showed that using the multiverseid from the MTG JSON dataset results in the correct image from Gatherer.</p>

<p>Everything looked good to me. Let&rsquo;s dive right in, <a href="https://github.com/minimaxir/magic-the-gifening/commits/master">commit by commit</a>.</p>

<h2>Implementing Magic: The GIFening</h2>

<p>The first thing I did was process the Magic card data, although for this project I limit the type of cards to Instants and Sorceries, which in Magic game mechanics represent &ldquo;actions&rdquo; and are more suitable for GIFs. <em>For each set, retrieve the cards in the set; for each card, if it&rsquo;s an Instant/Sorcery, log its name and multiverseid</em>. Thanks to the magic of Python, this pseudocode is close to the <a href="https://github.com/minimaxir/magic-the-gifening/commit/3f626ae5d49a567322c6237210ab554281d462f4">actual code</a>.</p>

<p>The next objective was to implement the GIPHY API to get a GIF. The very first thing I did is add a local secrets file containing my personal API key for GIPHY, and <em>immediately</em> log the secrets file in a <code>.gitignore</code> so I don&rsquo;t accidentally leak it. GIPHY has an <a href="https://developers.giphy.com/explorer/">API Explorer</a> which allows developers to quickly test an example input phrase and see corresponding output from the API. For example, here&rsquo;s part of what the API returns for <a href="http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=151108">Invert the Skies</a> (although since it&rsquo;s the /random endpoint, your results may vary):</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="s2">"image_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.gif"</span><span class="p">,</span><span class="w">
</span><span class="s2">"image_mp4_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.mp4"</span><span class="p">,</span><span class="w">
</span><span class="s2">"image_frames"</span><span class="p">:</span><span class="w"> </span><span class="s2">"31"</span><span class="p">,</span><span class="w">
</span><span class="s2">"image_width"</span><span class="p">:</span><span class="w"> </span><span class="s2">"480"</span><span class="p">,</span><span class="w">
</span><span class="s2">"image_height"</span><span class="p">:</span><span class="w"> </span><span class="s2">"270"</span><span class="p">,</span><span class="w">
</span></code></pre></div>
<p>The <code>image_url</code> corresponds to the <a href="https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.gif">raw GIF</a> unsurprisingly, but as a bonus, GIPHY also includes a link to a <a href="https://media1.giphy.com/media/plbsEwLwQvzLa/giphy.mp4">MP4 video</a> of the GIF, which has a much smaller file size and is better to use for compositing. The API output also includes the width and height (in pixels) of the GIF. The art in a Magic card follows a 4:3 <a href="https://en.wikipedia.org/wiki/Aspect_ratio_(image)">aspect ratio</a>, i.e. the width divided by the height equals 1.33. If the dimensions of the GIF are too far outside that ratio, resizing the GIFs to fit the Magic art frame will result in noticeable distortion. I minimized this distortion by checking and seeing if the random GIF has a width:height ratio between 1.2 and 1.6 before accepting it. Since there&rsquo;s a chance for failure (along with potential unknown bugs that the random GIF could hit), I added a limit to the number of attempts to retrieve an appropriate GIF. All done in <a href="https://github.com/minimaxir/magic-the-gifening/commit/c2e4b6b9d58d1aa360f6f67a049ec962d0430b91">one commit</a>.</p>

<p>Getting the card image from Gatherer is <a href="https://github.com/minimaxir/magic-the-gifening/commit/c92440cd459640da9346cf31a79e768ac8641ea9">trivial</a>, so then I worked on combining the GIF and the card image. MoviePy has a <a href="http://zulko.github.io/moviepy/getting_started/compositing.html">good tutorial</a> for specifying the position of one clip onto another by specifying the upper-left corner of the bottom-image where the GIF will be placed, while simultaneously resizing the GIF to a given width and height.</p>

<p><img src="/img/magic-the-gifening/videoWH.jpeg" alt=""></p>

<p>I manually zoomed into the card image using a photo editor (<a href="http://www.pixelmator.com/mac/">Pixelmator</a>) to find the upper-left corner of the card art:</p>

<p><img src="/img/magic-the-gifening/zoomin.png" alt=""></p>

<p>In this case, the pixel coordinates for the upper-left corner of the card art is <code>(17,35)</code> The upper-right and bottom-left corners can be used to determine the target width and height of the GIF respectively, and can be found the same way. Simply composite the Magic card with the resized-and-positioned GIF, set the duration of the &ldquo;new&rdquo; GIF to that of the source GIF, and <code>write_gif</code>. <a href="https://github.com/minimaxir/magic-the-gifening/commit/55a52ddfc7f43d128c08c8a243254e08a171de5e">That&rsquo;s that</a>!</p>

<p>To finish things up, I wrote a script to load all the cards from the processed card list into memory, select a card at random, use the helper functions to retrieve a GIPHY GIF and composite it with the card, then upload the resulting GIF to Twitter. I haven&rsquo;t worked with the Twitter API in awhile; a quick Google search for a modern Twitter API client in Python returns <a href="https://github.com/ryanmcgrath/twython">Twython</a>, which conveniently includes an example on <a href="https://twython.readthedocs.io/en/latest/usage/advanced_usage.html#updating-status-with-image">how to upload an image to Twitter</a>! And after running the script a few times, the full workflow indeed works!</p>

<p>Not bad for a couple hours of scripting. But I was not close to finished.</p>

<h2>The Endless Fun of QA</h2>

<p>One of the reasons I enjoy doing silly projects (especially silly data projects) is because I tend to hit unsexy edge cases which typical development blogs and tutorials rarely discuss. In this case, I quickly found that the Twitter API has a <a href="https://developer.twitter.com/en/docs/media/upload-media/overview">5 MB limit</a> on image uploads, which is a problem as the resulting GIFs are huge and often randomly exceed that limit (looking back on it, there is a different endpoint intended for GIF uploads, counterintuitively).</p>

<p>In actuality, GIFs on Twitter are actually displayed as videos, in order to save bandwidth. Since Twitter transcodes uploaded GIFs anyways, it makes more sense to upload <em>audioless videos</em> instead of GIFs (and as a bonus, after the death of Vine, Twitter will auto-loop videos less than 6 seconds).</p>

<p>Creating videos is easy to do with MoviePy, just do a <code>write_videofile</code> instead of <code>write_gif</code>, and use Twython&rsquo;s video uploading example to upload. The result is an &ldquo;unknown&rdquo; error on upload. I verify by uploading the video manually to Twitter&hellip;and the Twitter UI fails to recognize it as a video. But the video itself plays fine in QuickTime. This is the annoying type of coding problem that&rsquo;s too specific for <a href="https://stackoverflow.com">Stack Overflow</a> to provide help. After a bit of trial and error involving video codecs and settings, the solution was to pass a <code>-pix_fmt yuv420p</code> parameter to the video encoder because Twitter apparently only likes legacy video container formats. Oh well. It worked, and both Twitter manual and API uploads worked successfully.</p>

<p>I also ran into an issue where Twitter refused to accept supershort video, where the source GIF was only a couple frames. A solution is to loop the GIF to atleast 2 seconds if it&rsquo;s shorter, which somehow fixed that problem.</p>

<p>(As I was writing this post a month later, I discovered that both of these video upload constraints <a href="https://developer.twitter.com/en/docs/media/upload-media/uploading-media/media-best-practices">are indeed covered in the Twitter documentation</a>, which makes me look very silly in retrospect!)</p>

<p>These changes fixed most of the upload issues. However, when writing the initial script, I forgot that the borders of Magic cards have <a href="https://mtg.gamepedia.com/Card_frame">changed over the years</a>, which also changed the position and size of the card art. <strong>Is there a way to check when a card was printed?</strong> Yes, the &ldquo;All Sets&rdquo; dataset contains the release date of the set, so with that, I can <a href="https://github.com/minimaxir/magic-the-gifening/commit/0dfb678f1955f50b54b632e57087df847ec16f05">hard code</a> the dates of sets where the borders changed, and note the border type at printing time. I then used Pixelmator again to note the new art dimensions for that type of border, and used conditional statements to retrieve the correct dimensions for the type of border when compositing.</p>

<p>Lastly, I added general <code>try/catch</code> error handling to prevent the script from breaking fatally and to try again with a different card if it does. That covers most of the edge cases!</p>

<h2>Results</h2>

<p>After running the script many times after all the fixes in place, I felt the Twitter account was good to go. The initial results showed a lot of promise:</p>

<p><span><blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr"><a href="https://t.co/BsZ7eIcunl">pic.twitter.com/BsZ7eIcunl</a></p>&mdash; Magic: The GIFening (@MTGIFening) <a href="https://twitter.com/MTGIFening/status/913981726182981632?ref_src=twsrc%5Etfw">September 30, 2017</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></span></p>

<p><span><blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr"><a href="https://t.co/picJJk6mBm">pic.twitter.com/picJJk6mBm</a></p>&mdash; Magic: The GIFening (@MTGIFening) <a href="https://twitter.com/MTGIFening/status/912525635632775168?ref_src=twsrc%5Etfw">September 26, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></span></p>

<p>Surprisingly, the script was able to generate <em>visual puns</em> in cards, completely by chance!</p>

<p><span><blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr"><a href="https://t.co/AnpzU8xVho">pic.twitter.com/AnpzU8xVho</a></p>&mdash; Magic: The GIFening (@MTGIFening) <a href="https://twitter.com/MTGIFening/status/913972922330497024?ref_src=twsrc%5Etfw">September 30, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></span></p>

<p><span><blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr"><a href="https://t.co/01vGRcq2Mj">pic.twitter.com/01vGRcq2Mj</a></p>&mdash; Magic: The GIFening (@MTGIFening) <a href="https://twitter.com/MTGIFening/status/913987002235740160?ref_src=twsrc%5Etfw">September 30, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></span></p>

<p>The next step was to automate the script to run and post Tweets at a specific time interval. After experimenting a bit, I found that <a href="https://github.com/minimaxir/magic-the-gifening/commit/f355d5e80503c67c6e1a0e5fd1b744faf3cf8223">the best solution</a> was to use a <a href="https://en.wikipedia.org/wiki/Cron">cron job</a> in a <a href="https://www.docker.com/what-docker">Docker container</a> containing the script and its dependencies, for complicated reasons which will require another blog post to explain. </p>

<p>After letting Magic: the GIFening run for a few days without fatal issues, I decided to publicize the Twitter account and posted it to the <a href="https://www.reddit.com/r/magicTCG/comments/7598g5/i_made_a_twitter_bot_which_tweets_magic_cards/">/r/MagicTCG subreddit</a> and <a href="https://news.ycombinator.com/item?id=15449955">Hacker News</a>. To my surprise, the project performed extremely well on both with 100+ upvotes on each, and the <a href="https://github.com/minimaxir/magic-the-gifening">GitHub repo</a> itself received 100+ Stars.</p>

<p>In all, making Magic: the GIFening was a fun project. In retrospect, talking though the commits made me realize I performed many bad coding practices in a haste to get the project done ASAP (specifically, checking to see if certain edge cases are documented, violating <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>, and forgetting to remove specific types of cards like <a href="https://twitter.com/MTGIFening/status/924969160307744769">split cards</a>). Obviously there isn&rsquo;t a multimillion-dollar startup opportunity in creating random GIFs of Magic cards, but I&rsquo;ll fix a few remaining issues and keep the Twitter bot running.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make High Quality Data Visualizations for Websites With R and ggplot2]]></title>
    <link href="https://minimaxir.com/2017/08/ggplot2-web/"/>
    <updated>2017-08-14T09:00:00-07:00</updated>
    <id>https://minimaxir.com/2017/08/ggplot2-web</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been following my blog, I like to use <a href="https://cran.r-project.org">R</a> and <a href="http://ggplot2.tidyverse.org/reference/">ggplot2</a> for data visualization. A lot.</p>

<p>One of my older blog posts, <a href="http://minimaxir.com/2015/02/ggplot-tutorial/">An Introduction on How to Make Beautiful Charts With R and ggplot2</a>, is still one of my most-trafficked posts years later, and even today I see techniques from that particular post incorporated into modern data visualizations on sites such as <a href="https://www.reddit.com">Reddit&rsquo;s</a> <a href="https://www.reddit.com/r/dataisbeautiful/">/r/dataisbeautiful</a> subreddit.</p>

<p>However, that post is a little outdated. Thanks to a few updates to ggplot2 since then and other advances in data visualization best-practices, making pretty charts for websites/blogs using R and ggplot2 is even more easy, quick, <em>and</em> fun!</p>

<h2>Quick Introduction to ggplot2</h2>

<p>ggplot2 uses a more concise setup toward creating charts as opposed to the more declarative style of Python&rsquo;s <a href="https://matplotlib.org">matplotlib</a> and base R. And it also includes a few example datasets for practicing ggplot2 functionality; for example, the <code>mpg</code> dataset is a <a href="http://ggplot2.tidyverse.org/reference/mpg.html">dataset</a> of the performance of popular models of cars in 1998 and 2008.</p>

<p><img src="/img/ggplot2-web/mpg.png" alt=""></p>

<p>Let&rsquo;s say you want to create a <a href="https://en.wikipedia.org/wiki/Scatter_plot">scatter plot</a>. Following <a href="http://ggplot2.tidyverse.org/reference/geom_smooth.html">a great example</a> from the ggplot2 documentation, let&rsquo;s plot the highway mileage of the car vs. the <a href="https://en.wikipedia.org/wiki/Engine_displacement">volume displacement</a> of the engine. In ggplot2, first you instantiate the chart with the <code>ggplot()</code> function, specifying the source dataset and the core aesthetics you want to plot, such as x, y, color, and fill. In this case, we set the core aesthetics to x = displacement and y = mileage, and add a <code>geom_point()</code> layer to make a scatter plot:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">displ</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hwy</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">geom_point</span><span class="p">()</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/plot1.png" alt=""></p>

<p>As we can see, there is a negative correlation between the two metrics. I&rsquo;m sure you&rsquo;ve seen plots like these around the internet before. But with only a couple of lines of codes, you can make them look more contemporary.</p>

<p>ggplot2 lets you add a well-designed theme with just one line of code. Relatively new to <code>ggplot2</code> is <code>theme_minimal()</code>, which <a href="http://ggplot2.tidyverse.org/reference/ggtheme.html">generates</a> a muted style similar to <a href="http://fivethirtyeight.com">FiveThirtyEight</a>&rsquo;s modern data visualizations:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">theme_minimal</span><span class="p">()</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/plot2.png" alt=""></p>

<p>But we can still add color. Setting a color aesthetic on a character/categorical variable will set the colors of the corresponding points, making it easy to differentiate at a glance.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">displ</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hwy</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">class</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">geom_point</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">theme_minimal</span><span class="p">()</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/plot3.png" alt=""></p>

<p>Adding the color aesthetic certainly makes things much prettier. ggplot2 automatically adds a legend for the colors as well. 
However, for this particular visualization, it is difficult to see trends in the points for each class. A easy way around this is to add a <a href="https://en.wikipedia.org/wiki/Least_squares">least squares regression</a> trendline for each class <a href="http://ggplot2.tidyverse.org/reference/geom_smooth.html">using</a> <code>geom_smooth()</code> (which normally adds a smoothed line, but since there isn&rsquo;t a lot of data for each group, we force it to a linear model and do not plot confidence intervals)</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lm"</span><span class="p">,</span><span class="w"> </span><span class="n">se</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/plot4.png" alt=""></p>

<p>Pretty neat, and now comparative trends are much more apparent! For example, pickups and SUVs have similar efficiency, which makes intuitive sense.</p>

<p>The chart axes should be labeled (<em>always</em> label your charts!). All the typical labels, like <code>title</code>, <code>x</code>-axis, and <code>y</code>-axis can be done with the <code>labs()</code> function. But relatively new to ggplot2 are the <code>subtitle</code> and <code>caption</code> fields, both of do what you expect:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">"Efficiency of Popular Models of Cars"</span><span class="p">,</span><span class="w">
         </span><span class="n">subtitle</span><span class="o">=</span><span class="s2">"By Class of Car"</span><span class="p">,</span><span class="w">
         </span><span class="n">x</span><span class="o">=</span><span class="s2">"Engine Displacement (liters)"</span><span class="p">,</span><span class="w">
         </span><span class="n">y</span><span class="o">=</span><span class="s2">"Highway Miles per Gallon"</span><span class="p">,</span><span class="w">
         </span><span class="n">caption</span><span class="o">=</span><span class="s2">"by Max Woolf — minimaxir.com"</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/plot5.png" alt=""></p>

<p>That&rsquo;s a pretty good start. Now let&rsquo;s take it to the next level.</p>

<h2>How to Save A ggplot2 chart For Web</h2>

<p>Something surprisingly undiscussed in the field of data visualization is how to <em>save</em> a chart as a high quality image file. For example, with <a href="https://products.office.com/en-us/excel">Excel</a> charts, Microsoft <a href="https://support.office.com/en-us/article/Save-a-chart-as-a-picture-in-Excel-for-Windows-254bbf9a-1ce1-459f-914a-4902e8ca9217">officially recommends</a> to copy the chart, <em>paste it as an image back into Excel</em>, then save the pasted image, without having any control over image quality and size in the browser (the <em>real</em> best way to save an Excel/<a href="https://www.apple.com/numbers/">Numbers</a> chart as an image for a webpage is to copy/paste the chart object into a <a href="https://products.office.com/en-us/powerpoint">PowerPoint</a>/<a href="https://www.apple.com/keynote/">Keynote</a> slide, and export <em>the slide</em> as an image. This also makes it extremely easy to annotate/brand said chart beforehand in PowerPoint/Keynote).</p>

<p>R IDEs such as <a href="https://www.rstudio.com">RStudio</a> have a chart-saving UI with the typical size/filetype options. But if you save an image from this UI, the shapes and texts of the resulting image will be heavily aliased (R <a href="https://danieljhocking.wordpress.com/2013/03/12/high-resolution-figures-in-r/">renders images at 72 dpi</a> by default, which is much lower than that of modern HiDPI/Retina displays).</p>

<p>The data visualizations used earlier in this post were generated in-line as a part of an <a href="http://rmarkdown.rstudio.com/r_notebooks.html">R Notebook</a>, but it is surprisingly difficult to extract the generated chart as a separate file. But ggplot2 also has <code>ggsave()</code>, which saves the image to disk using antialiasing and makes the fonts/shapes in the chart look much better, and assumes a default dpi of 300. Saving charts using <code>ggsave()</code>, and adjusting the sizes of the text and geoms to compensate for the higher dpi, makes the charts look very presentable. A width of 4 and a height of 3 results in a 1200x900px image, which if posted on a blog with a content width of ~600px (like mine), will render at full resolution on HiDPI/Retina displays, or downsample appropriately otherwise. Due to modern PNG compression, the file size/bandwidth cost for using larger images is minimal.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">displ</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hwy</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">class</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
    </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lm"</span><span class="p">,</span><span class="w"> </span><span class="n">se</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_point</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">0.5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">theme_minimal</span><span class="p">(</span><span class="n">base_size</span><span class="o">=</span><span class="m">9</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">"Efficiency of Popular Models of Cars"</span><span class="p">,</span><span class="w">
         </span><span class="n">subtitle</span><span class="o">=</span><span class="s2">"By Class of Car"</span><span class="p">,</span><span class="w">
         </span><span class="n">x</span><span class="o">=</span><span class="s2">"Engine Displacement (liters)"</span><span class="p">,</span><span class="w">
         </span><span class="n">y</span><span class="o">=</span><span class="s2">"Highway Miles per Gallon"</span><span class="p">,</span><span class="w">
         </span><span class="n">caption</span><span class="o">=</span><span class="s2">"by Max Woolf — minimaxir.com"</span><span class="p">)</span><span class="w">

</span><span class="n">ggsave</span><span class="p">(</span><span class="s2">"tutorial-0.png"</span><span class="p">,</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-0.png" alt=""></p>

<p>Compare to the previous non-ggsave chart, which is more blurry around text/shapes:</p>

<p><img src="/img/ggplot2-web/plot5.png" alt=""></p>

<p>For posterity, here&rsquo;s the same chart saved at 1200x900px using the RStudio image-saving UI:</p>

<p><img src="/img/ggplot2-web/plot-1200-900.png" alt=""></p>

<p>Note that the antialiasing optimizations assume that you are <em>not</em> uploading the final chart to a service like <a href="https://medium.com">Medium</a> or <a href="https://wordpress.com">WordPress.com</a>, which will compress the images and reduce the quality anyways. But if you are uploading it to Reddit or self-hosting your own blog, it&rsquo;s definitely worth it.</p>

<h2>Fancy Fonts</h2>

<p>Changing the chart font is another way to add a personal flair.
Theme functions like <code>theme_minimal()</code> accept a <code>base_family</code> parameter. With that, you can specify any font family as the default instead of the base sans-serif. (On Windows, you may need to install the <code>extrafont</code> package first). Fonts from <a href="https://fonts.google.com">Google Fonts</a> are free and work easily with ggplot2 once installed. For example, we can use <a href="https://fonts.google.com/specimen/Roboto">Roboto</a>, Google&rsquo;s modern font which has also been getting a lot of usage on <a href="https://stackoverflow.com">Stack Overflow</a>&rsquo;s great ggplot2 <a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/">data visualizations</a>.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">theme_minimal</span><span class="p">(</span><span class="n">base_size</span><span class="o">=</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="n">base_family</span><span class="o">=</span><span class="s2">"Roboto"</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-1.png" alt=""></p>

<p>A general text design guideline is to use fonts of different weights/widths for different hierarchies of content. In this case, we can use a bolder condensed font for the title, and deemphasize the subtitle and caption using lighter colors, all done using the <code>theme()</code> <a href="http://ggplot2.tidyverse.org/reference/theme.html">function</a>.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> 
    </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"#666666"</span><span class="p">),</span><span class="w">
          </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="s2">"Roboto Condensed Bold"</span><span class="p">),</span><span class="w">
          </span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"#AAAAAA"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">6</span><span class="p">))</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-2.png" alt=""></p>

<p>It&rsquo;s worth nothing that data visualizations posted on websites should be easily <em>legible</em> for mobile-device users as well, hence the intentional use of larger fonts relative to charts typically produced in the desktop-oriented Excel.</p>

<p>Additionally, all theming options can be set as a session default at the beginning of a script using <code>theme_set()</code>, saving even more time instead of having to recreate the theme for each chart.</p>

<h2>The &ldquo;ggplot2 colors&rdquo;</h2>

<p>The &ldquo;ggplot2 colors&rdquo; for categorical variables are infamous for being the primary indicator of a chart being made with ggplot2. But there is a science to it; ggplot2 by default selects colors using the <code>scale_color_hue()</code> <a href="http://ggplot2.tidyverse.org/reference/scale_hue.html">function</a>, which selects colors in the HSL space by changing the hue [H] between 0 and 360, keeping saturation [S] and lightness [L] constant. As a result, ggplot2 selects the most <em>distinct</em> colors possible while keeping lightness constant. For example, if you have 2 different categories, ggplot2 chooses the colors with h = 0 and h = 180; if 3 colors, h = 0, h = 120, h = 240, etc.</p>

<p>It&rsquo;s smart, but does make a given chart lose distinctness when many other ggplot2 charts use the same selection methodology. A quick way to take advantage of this hue dispersion while still making the colors unique is to change the lightness; by default, <code>l = 65</code>, but setting it slightly lower will make the charts look more professional/<a href="https://www.bloomberg.com">Bloomberg</a>-esque.</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p_color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
        </span><span class="n">scale_color_hue</span><span class="p">(</span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">40</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-4.png" alt=""></p>

<h2>RColorBrewer</h2>

<p>Another coloring option for ggplot2 charts are the <a href="http://colorbrewer2.org/#type=sequential&amp;scheme=BuGn&amp;n=3">ColorBrewer</a> palettes implemented with the <code>RColorBrewer</code> package, which are supported natively in ggplot2 with functions such as <code>scale_color_brewer()</code>. The sequential palettes like &ldquo;Blues&rdquo; and &ldquo;Greens&rdquo; do what the name implies:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p_color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
        </span><span class="n">scale_color_brewer</span><span class="p">(</span><span class="n">palette</span><span class="o">=</span><span class="s2">"Blues"</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-5.png" alt=""></p>

<p>A famous diverging palette for visualizations on /r/dataisbeautiful is the &ldquo;Spectral&rdquo; palette, which is a lighter rainbow (recommended for dark backgrounds)</p>

<p><img src="/img/ggplot2-web/tutorial-6.png" alt=""></p>

<p>However, while the charts look pretty, it&rsquo;s difficult to tell the categories apart. The qualitative palettes fix this problem, and have more distinct possibilities than the <code>scale_color_hue()</code> approach mentioned earlier.</p>

<p>Here are 3 examples of qualitative palettes, &ldquo;Set1&rdquo;, &ldquo;Set2&rdquo;, and &ldquo;Set3,&rdquo; whichever fit your preference.</p>

<p><img src="/img/ggplot2-web/tutorial-7.png" alt="">
<img src="/img/ggplot2-web/tutorial-8.png" alt="">
<img src="/img/ggplot2-web/tutorial-9.png" alt=""></p>

<h2>Viridis and Accessibility</h2>

<p>Let&rsquo;s mix up the visualization a bit. A rarely-used-but-very-useful ggplot2 geom is <code>geom2d_bin()</code>, which counts the number of points in a given 2d spatial area:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">displ</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hwy</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
    </span><span class="n">geom_bin2d</span><span class="p">(</span><span class="n">bins</span><span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="p">[</span><span class="n">...theming</span><span class="w"> </span><span class="n">options...</span><span class="p">]</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-tile.png" alt=""></p>

<p>We see that the largest number of points are centered around (2,30). However, the default ggplot2 color palette for continuous variables is <em>boring</em>. Yes, we can use the RColorBrewer sequential palettes above, but as noted, they aren&rsquo;t perceptually distinct, and could cause issues for readers who are colorblind.</p>

<p>The <a href="https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html">viridis R package</a> provides a set of 4 high-contrast palettes which are very colorblind friendly, and works easily with ggplot2 by extending a <code>scale_fill_viridis()/scale_color_viridis()</code> function.</p>

<p>The default &ldquo;viridis&rdquo; palette has been increasingly popular on the web lately:</p>
<div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">p_color</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w">
        </span><span class="n">scale_fill_viridis</span><span class="p">(</span><span class="n">option</span><span class="o">=</span><span class="s2">"viridis"</span><span class="p">)</span><span class="w">
</span></code></pre></div>
<p><img src="/img/ggplot2-web/tutorial-10.png" alt=""></p>

<p>&ldquo;magma&rdquo; and &ldquo;inferno&rdquo; are similar, and give the data visualization a fiery edge:</p>

<p><img src="/img/ggplot2-web/tutorial-11.png" alt=""></p>

<p><img src="/img/ggplot2-web/tutorial-12.png" alt=""></p>

<p>Lastly, &ldquo;plasma&rdquo; is a mix between the 3 palettes above:</p>

<p><img src="/img/ggplot2-web/tutorial-13.png" alt=""></p>

<h2>Next Steps</h2>

<p>FiveThirtyEight actually uses ggplot2 for their data journalism workflow <a href="https://channel9.msdn.com/Events/useR-international-R-User-conference/useR2016/FiveThirtyEights-data-journalism-workflow-with-R?ocid=player">in an interesting way</a>; they render the base chart using ggplot2, but export it as as a SVG/PDF vector file which can scale to any size, and then the design team annotates/customizes the data visualization in <a href="http://www.adobe.com/products/illustrator.html">Adobe Illustrator</a> before exporting it as a static PNG for the article (in general, I recommend using an external image editor to add text annotations to a data visualization because doing it manually in ggplot2 is inefficient).</p>

<p>For general use cases, ggplot2 has very strong defaults for beautiful data visualizations. And certainly there is a lot <em>more</em> you can do to make a visualization beautiful than what&rsquo;s listed in this post, such as using facets and tweaking parameters of geoms for further distinction, but those are more specific to a given data visualization. In general, it takes little additional effort to make something <em>unique</em> with ggplot2, and the effort is well worth it. And prettier charts are more persuasive, which is a good return-on-investment.</p>

<hr>

<p><em>You can view the R and ggplot2 code used to create the data visualizations in <a href="http://minimaxir.com/notebooks/ggplot2-web/">this R Notebook</a>. You can also view the images/data used for this post in <a href="https://github.com/minimaxir/ggplot2-web">this GitHub repository</a></em>.</p>

<p><em>You are free to use the data visualizations from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking TensorFlow on Cloud CPUs: Cheaper Deep Learning than Cloud GPUs]]></title>
    <link href="https://minimaxir.com/2017/07/cpu-or-gpu/"/>
    <updated>2017-07-05T09:00:00-07:00</updated>
    <id>https://minimaxir.com/2017/07/cpu-or-gpu</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on a few personal deep learning projects with <a href="https://github.com/fchollet/keras">Keras</a> and <a href="https://www.tensorflow.org">TensorFlow</a>. However, training models for deep learning with cloud services such as <a href="https://aws.amazon.com/ec2/">Amazon EC2</a> and <a href="https://cloud.google.com/compute/">Google Compute Engine</a> isn&rsquo;t free, and as someone who is currently unemployed, I have to keep an eye on extraneous spending and be as cost-efficient as possible (please support my work on <a href="https://www.patreon.com/minimaxir">Patreon</a>!). I tried deep learning on the cheaper CPU instances instead of GPU instances to save money, and to my surprise, my model training was only slightly slower. As a result, I took a deeper look at the pricing mechanisms of these two types of instances to see if CPUs are more useful for my needs.</p>

<p>The <a href="https://cloud.google.com/compute/pricing#gpus">pricing of GPU instances</a> on Google Compute Engine starts at <strong>$0.745/hr</strong> (by attaching a $0.700/hr GPU die to a $0.045/hr n1-standard-1 instance). A couple months ago, Google <a href="https://cloudplatform.googleblog.com/2017/05/Compute-Engine-machine-types-with-up-to-64-vCPUs-now-ready-for-your-production-workloads.html">announced</a> CPU instances with up to 64 vCPUs on the modern Intel <a href="https://en.wikipedia.org/wiki/Skylake_(microarchitecture)">Skylake</a> CPU architecture. More importantly, they can also be used in <a href="https://cloud.google.com/compute/docs/instances/preemptible">preemptible CPU instances</a>, which live at most for 24 hours on GCE and can be terminated at any time (very rarely), but cost about <em>20%</em> of the price of a standard instance. A preemptible n1-highcpu-64 instance with 64 vCPUs and 57.6GB RAM plus the premium for using Skylake CPUs is <strong>$0.509/hr</strong>, about 2/3rds of the cost of the GPU instance.</p>

<p>If the model training speed of 64 vCPUs is comparable to that of a GPU (or even slightly slower), it would be more cost-effective to use the CPUs instead. But that&rsquo;s assuming the deep learning software and the GCE platform hardware operate at 100% efficiency; if they don&rsquo;t (and they likely don&rsquo;t), there may be <em>even more savings</em> by scaling down the number of vCPUs and cost accordingly (a 32 vCPU instance with same parameters is half the price at <strong>$0.254/hr</strong>, 16 vCPU at <strong>$0.127/hr</strong>, etc).</p>

<p>There aren&rsquo;t any benchmarks for deep learning libraries with tons and tons of CPUs since there&rsquo;s no demand, as GPUs are the <a href="https://en.wikipedia.org/wiki/Occam%27s_razor">Occam&rsquo;s razor</a> solution to deep learning hardware. But what might make counterintuitive but economical sense is to use CPUs instead of GPUs for deep learning training because of the massive cost differential afforded by preemptible instances, thanks to Google&rsquo;s <a href="https://en.wikipedia.org/wiki/Economies_of_scale">economies of scale</a>.</p>

<h2>Setup</h2>

<p>I already have <a href="https://github.com/minimaxir/deep-learning-cpu-gpu-benchmark">benchmarking scripts</a> of real-world deep learning use cases, <a href="https://github.com/minimaxir/keras-cntk-docker">Docker container environments</a>, and results logging from my <a href="http://minimaxir.com/2017/06/keras-cntk/">TensorFlow vs. CNTK article</a>. A few minor tweaks allow the scripts to be utilized for both CPU and GPU instances by setting CLI arguments. I also rebuilt <a href="https://github.com/minimaxir/keras-cntk-docker/blob/master/Dockerfile">the Docker container</a> to support the latest version of TensorFlow (1.2.1), and created a <a href="https://github.com/minimaxir/keras-cntk-docker/blob/master/Dockerfile-cpu">CPU version</a> of the container which installs the CPU-appropriate TensorFlow library instead.</p>

<p>There is a notable CPU-specific TensorFlow behavior; if you install from <code>pip</code> (as the<a href="https://www.tensorflow.org/install/"> official instructions</a> and tutorials recommend) and begin training a model in TensorFlow, you&rsquo;ll see these warnings in the console:</p>

<p><img src="/img/cpu-or-gpu/tensorflow-console.png" alt=""></p>

<p>In order to fix the warnings and benefit from these <a href="https://en.wikipedia.org/wiki/SSE4#SSE4.2">SSE4.2</a>/<a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions">AVX</a>/<a href="https://en.wikipedia.org/wiki/FMA_instruction_set">FMA</a> optimizations, we <a href="https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions">compile TensorFlow from source</a>, and I created a <a href="https://github.com/minimaxir/keras-cntk-docker/blob/master/Dockerfile-cpu-compiled">third Docker container</a> to do just that. When training models in the new container, <a href="https://github.com/tensorflow/tensorflow/issues/10689">most</a> of the warnings no longer show, and (spoiler alert) there is indeed a speed boost in training time.</p>

<p>Therefore, we can test three major cases with Google Compute Engine:</p>

<ul>
<li>A Tesla K80 GPU instance.</li>
<li>A 64 Skylake vCPU instance where TensorFlow is installed via <code>pip</code> (along with testings at 8/16/32 vCPUs).</li>
<li>A 64 Skylake vCPU instance where TensorFlow is compiled (<code>cmp</code>) with CPU instructions (+ 8/16/32 vCPUs).</li>
</ul>

<h2>Results</h2>

<p>For each model architecture and software/hardware configuration, I calculate the <strong>total training time relative to the GPU instance training</strong> for running the model training for the provided test script. In all cases, the GPU <em>should</em> be the fastest training configuration, and systems with more processors should train faster than those with fewer processors.</p>

<p>Let&rsquo;s start using the <a href="http://yann.lecun.com/exdb/mnist/">MNIST dataset</a> of handwritten digits plus the common multilayer perceptron (MLP) architecture, with dense fully-connected layers. Lower training time is better. All configurations below the horizontal dotted line are better than GPUs; all configurations above the dotted line are worse than GPUs.</p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-5.png" alt=""></p>

<p>Here, the GPU is the fastest out of all the platform configurations, but there are other curious trends: the performance between 32 vCPUs and 64 vCPUs is similar, and the compiled TensorFlow library is indeed a significant improvement in training speed <em>but only for 8 and 16 vCPUs</em>. Perhaps there are overheads negotiating information between vCPUs that eliminate the performance advantages of more vCPUs, and perhaps these overheads are <em>different</em> with the CPU instructions of the compiled TensorFlow. In the end, it&rsquo;s a <a href="https://en.wikipedia.org/wiki/Black_box">black box</a>, which is why I prefer black box benchmarking all configurations of hardware instead of theorycrafting.</p>

<p>Since the difference between training speeds of different vCPU counts is minimal, there is definitely an advantage by scaling down. For each model architecture and configuration, I calculate a <strong>normalized training cost relative to the cost of GPU instance training</strong>. Because GCE instance costs are prorated (unlike Amazon EC2), we can simply calculate experiment cost by multiplying the total number of seconds the experiment runs by the cost of the instance (per second). Ideally, we want to <em>minimize</em> cost.</p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-6.png" alt=""></p>

<p>Lower CPU counts are <em>much</em> more cost-effective for this problem, when going as low as possible is better.</p>

<p>Now, let&rsquo;s look at the same dataset with a convolutional neural network (CNN) approach for digit classification:</p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-7.png" alt=""></p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-8.png" alt=""></p>

<p>GPUs are unsurprisingly more than twice as fast as any CPU approach at CNNs, but cost structures are still the same, except that 64 vCPUs are <em>worse</em> than GPUs cost-wise, with 32 vCPUs training even faster than with 64 vCPUs.</p>

<p>Let&rsquo;s go deeper with CNNs and look at the <a href="https://www.cs.toronto.edu/%7Ekriz/cifar.html">CIFAR-10</a> image classification dataset, and a model which utilizes a deep covnet + a multilayer perceptron and ideal for image classification (similar to the <a href="https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3">VGG-16</a> architecture).</p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-9.png" alt=""></p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-10.png" alt=""></p>

<p>Similar behaviors as in the simple CNN case, although in this instance all CPUs perform better with the compiled TensorFlow library.</p>

<p>The fasttext algorithm, used here on the <a href="http://ai.stanford.edu/%7Eamaas/data/sentiment/">IMDb reviews dataset</a> to determine whether a review is positive or negative, classifies text extremely quickly relative to other methods. </p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-3.png" alt=""></p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-4.png" alt=""></p>

<p>In this case, GPUs are much, much faster than CPUs. The benefit of lower numbers of CPU isn&rsquo;t as dramatic; although as an aside, the <a href="https://github.com/facebookresearch/fastText">official fasttext implementation</a> is <em>designed</em> for large amounts of CPUs and handles parallelization much better.</p>

<p>The Bidirectional long-short-term memory (LSTM) architecture is great for working with text data like IMDb reviews, but after my previous benchmark article, <a href="https://news.ycombinator.com/item?id=14538086">commenters on Hacker News</a> noted that TensorFlow uses an inefficient implementation of the LSTM on the GPU, so perhaps the difference will be more notable.</p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-1.png" alt=""></p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-2.png" alt=""></p>

<p>Wait, what? GPU training of Bidirectional LSTMs is <em>twice as slow</em> as any CPU configuration? Wow. (In fairness, the benchmark uses the Keras LSTM default of <code>implementation=0</code> which is better on CPUs while <code>implementation=2</code> is better on GPUs, but it shouldn&rsquo;t result in that much of a differential)</p>

<p>Lastly, LSTM text generation of <a href="https://en.wikipedia.org/wiki/Friedrich_Nietzsche">Nietzsche&rsquo;s</a> <a href="https://s3.amazonaws.com/text-datasets/nietzsche.txt">writings</a> follows similar patterns to the other architectures, but without the drastic hit to the GPU.</p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-11.png" alt=""></p>

<p><img src="/img/cpu-or-gpu/dl-cpu-gpu-12.png" alt=""></p>

<h2>Conclusion</h2>

<p>As it turns out, using 64 vCPUs is <em>bad</em> for deep learning as current software/hardware architectures can&rsquo;t fully utilize all of them, and it often results in the exact same performance (or <em>worse</em>) than with 32 vCPUs. In terms balancing both training speed and cost, training models with <strong>16 vCPUs + compiled TensorFlow</strong> seems like the winner. The 30%-40% speed boost of the compiled TensorFlow library was an unexpected surprise, and I&rsquo;m shocked Google doesn&rsquo;t offer a precompiled version of TensorFlow with these CPU speedups since the gains are nontrivial.</p>

<p>It&rsquo;s worth nothing that the cost advantages shown here are <em>only</em> possible with preemptible instances; regular high-CPU instances on Google Compute Engine are about 5x as expensive, and as a result eliminate the cost benefits completely. Hooray for economies of scale!</p>

<p>A major implicit assumption with the cloud CPU training approach is that you don&rsquo;t need a trained model ASAP. In professional use cases, time may be too valuable to waste, but in personal use cases where someone can just leave a model training overnight, it&rsquo;s a very, very good and cost-effective option, and one that I&rsquo;ll now utilize.</p>

<hr>

<p><em>All scripts for running the benchmark are available in <a href="https://github.com/minimaxir/deep-learning-cpu-gpu-benchmark">this GitHub repo</a>. You can view the R/ggplot2 code used to process the logs and create the visualizations in <a href="http://minimaxir.com/notebooks/deep-learning-cpu-gpu/">this R Notebook</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predicting the Success of a Reddit Submission with Deep Learning and Keras]]></title>
    <link href="https://minimaxir.com/2017/06/reddit-deep-learning/"/>
    <updated>2017-06-26T09:00:00-07:00</updated>
    <id>https://minimaxir.com/2017/06/reddit-deep-learning</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been trying to figure out what makes a <a href="https://www.reddit.com">Reddit</a> submission &ldquo;good&rdquo; for years. If we assume the number of upvotes on a submission is a fair proxy for submission quality, optimizing a statistical model for Reddit data with submission score as a response variable might lead to interesting (and profitable) insights when transferred into other domains, such as Facebook Likes and Twitter Favorites.</p>

<p><img src="/img/reddit-deep-learning/reddit-example.png" alt=""></p>

<p>An important part of a Reddit submission is the submission <strong>title</strong>. Like news headlines, a catchy title will make a user <a href="http://minimaxir.com/2015/10/reddit-topwords/">more inclined</a> to engage with a submission and potentially upvote.</p>

<p><img src="/img/reddit-topwords/mean-054-Fitness.png" alt=""></p>

<p>Additionally, the <strong>time when the submission is made</strong> is <a href="http://minimaxir.com/2015/10/reddit-bigquery/">important</a>; submitting when user activity is the highest tends to lead to better results if you are trying to maximize exposure.</p>

<p><img src="/img/reddit-bigquery/reddit-bigquery-2.png" alt=""></p>

<p>The actual <strong>content</strong> of the Reddit submission such as  images/links to a website is likewise important, but good content is relatively difficult to optimize.</p>

<p>Can the magic of deep learning reconcile these concepts and create a model which can predict if a submission is a good submission? Thanks to <a href="https://github.com/fchollet/keras">Keras</a>, performing deep learning on a very large number of Reddit submissions is actually pretty easy. Performing it <em>well</em> is a different story.</p>

<h2>Getting the Data + Feature Engineering</h2>

<p>It&rsquo;s difficult to retrieve the content of millions of Reddit submissions at scale (ethically), so let&rsquo;s initially start by building a model using submissions on <a href="https://www.reddit.com/r/AskReddit/">/r/AskReddit</a>: Reddit&rsquo;s largest subreddit which receives 8,000+ submissions each day. /r/AskReddit is a self-post only subreddit with no external links, allowing us to focus on only the submission title and timing.</p>

<p><a href="http://minimaxir.com/2015/10/reddit-bigquery/">As always</a>, we can collect large amounts of Reddit data from the public Reddit dataset on <a href="https://cloud.google.com/bigquery/">BigQuery</a>. The submission <code>title</code> is available by default. The raw timestamp of the submission is also present, allowing us to extract the <code>hour</code> of submission (adjusted to Eastern Standard Time) and <code>dayofweek</code>, as used in the heatmap above. But why stop there? Since /r/AskReddit receives hundreds of submissions <em>every hour</em> on average, we should look at the <code>minute</code> level to see if there are any deeper trends (e.g. there are only 30 slots available on the first page of /new and since there is so much submission activity, it might be more advantageous to submit during off-peak times). Lastly, to account for potential changes in behavior as the year progresses, we should add a <code>dayofyear</code> feature, where January 1st = 1, January 2nd = 2, etc which can also account for variance due to atypical days like holidays.</p>

<p>Instead of predicting the raw number on upvotes of the Reddit submission (as the distribution of submission scores is heavily skewed), we should predict <strong>whether or not the submission is good</strong>, shaping the problem as a <a href="https://en.wikipedia.org/wiki/Logistic_regression">logistic regression</a>. In this case, let&rsquo;s define a &ldquo;good submission&rdquo; as one whose score is equal to or above the <strong>50th percentile (median) of all submissions</strong> in /r/AskReddit. Unfortunately, the median score ends up being <strong>2 points</strong>; although &ldquo;one upvote&rdquo; might be a low threshold for a &ldquo;good&rdquo; submission, it splits the dataset into 64% bad submissions, 36% good submissions, and setting the percentile threshold higher will result in a very unbalanced dataset for model training (a score of 2+ also implies that the submission did not get downvoted to death, which is useful). </p>

<p>Gathering all <strong>976,538 /r/AskReddit submissions</strong> from January 2017 to April 2017 should be enough data for this project. Here&rsquo;s the final BigQuery:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="o">#</span><span class="n">standardSQL</span> 
<span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span>
  <span class="k">CAST</span><span class="p">(</span><span class="n">FORMAT_TIMESTAMP</span><span class="p">(</span><span class="s1">'%H'</span><span class="p">,</span> <span class="n">TIMESTAMP_SECONDS</span><span class="p">(</span><span class="n">created_utc</span><span class="p">),</span> <span class="s1">'America/New_York'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">INT64</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hour</span><span class="p">,</span>
  <span class="k">CAST</span><span class="p">(</span><span class="n">FORMAT_TIMESTAMP</span><span class="p">(</span><span class="s1">'%M'</span><span class="p">,</span> <span class="n">TIMESTAMP_SECONDS</span><span class="p">(</span><span class="n">created_utc</span><span class="p">),</span> <span class="s1">'America/New_York'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">INT64</span><span class="p">)</span> <span class="k">AS</span> <span class="k">minute</span><span class="p">,</span>
  <span class="k">CAST</span><span class="p">(</span><span class="n">FORMAT_TIMESTAMP</span><span class="p">(</span><span class="s1">'%w'</span><span class="p">,</span> <span class="n">TIMESTAMP_SECONDS</span><span class="p">(</span><span class="n">created_utc</span><span class="p">),</span> <span class="s1">'America/New_York'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">INT64</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dayofweek</span><span class="p">,</span>
  <span class="k">CAST</span><span class="p">(</span><span class="n">FORMAT_TIMESTAMP</span><span class="p">(</span><span class="s1">'%j'</span><span class="p">,</span> <span class="n">TIMESTAMP_SECONDS</span><span class="p">(</span><span class="n">created_utc</span><span class="p">),</span> <span class="s1">'America/New_York'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">INT64</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dayofyear</span><span class="p">,</span>
  <span class="n">IF</span><span class="p">(</span><span class="n">PERCENT_RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">score</span> <span class="k">ASC</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">50</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">is_top_submission</span>
  <span class="k">FROM</span> <span class="nv">`fh-bigquery.reddit_posts.*`</span>
  <span class="k">WHERE</span> <span class="p">(</span><span class="n">_TABLE_SUFFIX</span> <span class="k">BETWEEN</span> <span class="s1">'2017_01'</span> <span class="k">AND</span> <span class="s1">'2017_04'</span><span class="p">)</span>
  <span class="k">AND</span> <span class="n">subreddit</span> <span class="o">=</span> <span class="s1">'AskReddit'</span>
</code></pre></div>
<p><img src="/img/reddit-deep-learning/bigquery.png" alt=""></p>

<h2>Model Architecture</h2>

<p><em>If you want to see the detailed data transformations and Keras code examples/outputs for this post, you can view <a href="https://github.com/minimaxir/predict-reddit-submission-success/blob/master/predict_askreddit_submission_success_timing.ipynb">this Jupyter Notebook</a>.</em></p>

<p>Text processing is a good use case for deep learning, as it can identify relationships between words where older methods like <a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf">tf-idf</a> can&rsquo;t. Keras, a high level deep-learning framework on top of lower frameworks like <a href="https://www.tensorflow.org">TensorFlow</a>, can easily convert a list of texts to a <a href="https://keras.io/preprocessing/sequence/">padded sequence</a> of <a href="https://keras.io/preprocessing/text/">index tokens</a> that can interact with deep learning models, along with many other benefits. Data scientists often use <a href="https://en.wikipedia.org/wiki/Recurrent_neural_network">recurrent neural networks</a> that can &ldquo;learn&rdquo; for classifying text. However <a href="https://github.com/facebookresearch/fastText">fasttext</a>, a newer algorithm from researchers at Facebook, can perform classification tasks at an <a href="http://minimaxir.com/2017/06/keras-cntk/">order of magnitude faster</a> training time than RNNs, with similar predictive performance.</p>

<p>fasttext works by <a href="https://arxiv.org/abs/1607.01759">averaging word vectors</a>. In this Reddit model architecture inspired by the <a href="https://github.com/fchollet/keras/blob/master/examples/imdb_fasttext.py">official Keras fasttext example</a>, each word in a Reddit submission title (up to 20) is mapped to a 50-dimensional vector from an Embeddings layer of up to 40,000 words. The Embeddings layer is <a href="https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html">initialized</a> with <a href="https://nlp.stanford.edu/projects/glove/">GloVe word embeddings</a> pre-trained on billions of words to give the model a good start. All the word vectors for a given Reddit submission title are averaged together, and then a Dense fully-connected layer outputs a probability the given text is a good submission. The gradients then backpropagate and improve the word embeddings for future batches during training.</p>

<p>Keras has a <a href="https://keras.io/visualization/">convenient utility</a> to visualize deep learning models:</p>

<p><img src="/img/reddit-deep-learning/model_shapes-1.png" alt=""></p>

<p>However, the first output above is the <em>auxiliary output</em> for <a href="https://en.wikipedia.org/wiki/Regularization_(mathematics)">regularizing</a> the word embeddings; we still have to incorporate the submission timing data into the model.</p>

<p>Each of the four timing features (hour, minute, day of week, day of year) receives its own Embeddings layer, outputting a 64D vector. This allows the features to learn latent characteristics which may be missed using traditional <a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html">one-hot encoding</a> for categorical data in machine learning problems.</p>

<p><img src="/img/reddit-deep-learning/model_shapes-2.png" alt=""></p>

<p>The 50D word average vector is concatenated with the four vectors above, resulting in a 306D vector. This combined vector is connected to another fully-connected layer which can account for hidden interactions between all five input features (plus <a href="https://keras.io/layers/normalization/">batch normalization</a>, which improves training speed for Dense layers). Then the model outputs a final probability prediction: the <em>main output</em>.</p>

<p><img src="/img/reddit-deep-learning/model_shapes-3.png" alt=""></p>

<p>The final model:</p>

<p><img src="/img/reddit-deep-learning/model.png" alt=""></p>

<p>All of this sounds difficult to implement, but Keras&rsquo;s <a href="https://keras.io/getting-started/functional-api-guide/">functional API</a> ensures that adding each layer and linking them together can be done in a single line of code each.</p>

<h2>Training Results</h2>

<p>Because the model uses no recurrent layers, it trains fast enough on a CPU despite the large dataset size.</p>

<p>We split the full dataset into 80%/20% training/test datasets, training the model on the former and testing the model against the latter. Keras trains a model with a simple <code>fit</code> command and trains for 20 epochs, where one epoch represents an entire pass of the training set.</p>

<p><img src="/img/reddit-deep-learning/fit.png" alt=""></p>

<p>There&rsquo;s a lot happening in the console output due to the architecture, but the main metrics of interest are the <code>main_out_acc</code>, the accuracy of the training set through the main output, and <code>val_main_out_acc</code>, the accuracy of the test set. Ideally, the accuracy of both should increase as training progresses. However, the test accuracy <em>must</em> be better than the 64% baseline (if we just say all /r/AskReddit submissions are bad), otherwise this model is unhelpful.</p>

<p>Keras&rsquo;s <a href="https://keras.io/callbacks/#csvlogger">CSVLogger</a> trivially logs all these metrics to a CSV file. Plotting the results of the 20 epochs:</p>

<p><img src="/img/reddit-deep-learning/predict-reddit-1.png" alt=""></p>

<p>The test accuracy does indeed beat the 64% baseline; however, test accuracy <em>decreases</em> as training progresses. This is a sign of <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a>, possibly due to the potential disparity between texts in the training and test sets. In deep learning, you can account for overfitting by adding <a href="https://keras.io/layers/core/#dropout">Dropout</a> to relevant layers, but in my testing it did not help.</p>

<h2>Using The Model To Optimize Reddit Submissions</h2>

<p>At the least, we now have a model that understands the latent characteristics of an /r/AskReddit submission. But how do you apply the model <em>in practical, real-world situations</em>?</p>

<p>Let&rsquo;s take a random /r/AskReddit submission: <a href="https://www.reddit.com/r/AskReddit/comments/5odcpd/which_movies_plot_would_drastically_change_if_you/">Which movie&rsquo;s plot would drastically change if you removed a letter from its title?</a>, submitted Monday, January 16th at 3:46 PM EST and receiving 4 upvotes (a &ldquo;good&rdquo; submission in context of this model). Plugging those input variables into the trained model results in a <strong>0.669</strong> probability of it being considered a good submission, which is consistent with the true results.</p>

<p>But what if we made <em>minor, iterative changes</em> to the title  while keeping the time submitted unchanged? Can we improve this probability?</p>

<p>&ldquo;Drastically&rdquo; is a silly adjective; removing it and using the title <strong>Which movie&rsquo;s plot would change if you removed a letter from its title?</strong> results in a greater probability of <strong>0.682</strong>.</p>

<p>&ldquo;Removed&rdquo; is <a href="http://www.ef.edu/english-resources/english-grammar/conditional/">grammatically incorrect</a>; fixing the issue and using the title <strong>Which movie&rsquo;s plot would change if you remove a letter from its title?</strong> results in a greater probability of <strong>0.692</strong>.</p>

<p>&ldquo;Which&rdquo; is also <a href="https://www.englishclub.com/vocabulary/wh-question-words.htm">grammatically incorrect</a>; fixing the issue and using the title <strong>What movie&rsquo;s plot would change if you remove a letter from its title?</strong> results in a greater probability of <strong>0.732</strong>.</p>

<p>Although adjectives are sometimes redundant, they can add an intriguing emphasis; adding a &ldquo;single&rdquo; and using the title <strong>What movie&rsquo;s plot would change if you remove a single letter from its title?</strong> results in a greater probability of <strong>0.753</strong>.</p>

<p>Not bad for a little workshopping!</p>

<p>Now that we have an improved title, we can find an optimal time to make the submission through brute force by calculating the probabilities for all combinations of hour, minute, and day of week (and offsetting the day of year appropriately). After doing so, I discovered that making the submission on the previous Sunday at 10:55 PM EST results in the maximum probability possible of being a good submission at <strong>0.841</strong> (the other top submission times are at various other minutes during that hour; the best time on a different day is the following Tuesday at 4:05 AM EST with a probability of <strong>0.823</strong>).</p>

<p>In all, this model of Reddit submission success prediction is a proof of concept; there are many, <em>many</em> optimizations that can be done on the feature engineering side and on the data collection side (especially if we want to model subreddits other than /r/AskReddit). Predicting which submissions go viral instead of just predicting which submissions receive atleast one upvote is another, more advanced problem entirely.</p>

<p>Thanks to the high-level abstractions and utility functions of Keras, I was able to prototype the initial model in an afternoon instead of the weeks/months required for academic papers and software applications in this area. At the least, this little experiment serves as an example of applying Keras to a real-world dataset, and the tradeoffs that result when deep learning can&rsquo;t magically solve everything. But that doesn&rsquo;t mean my experiments on the Reddit data were unproductive; on the contrary, I now have a few new clever ideas how to fix some of the issues discovered, which I hope to implement soon.</p>

<p>Again, I strongly recommend reading the data transformations and Keras code examples in <a href="https://github.com/minimaxir/predict-reddit-submission-success/blob/master/predict_askreddit_submission_success_timing.ipynb">this Jupyter Notebook</a> for more information into the methodology, as building modern deep learning models is more intuitive and less arcane than what thought pieces on Medium imply.</p>

<hr>

<p><em>You can view the R and ggplot2 code used to visualize the model data in <a href="http://minimaxir.com/notebooks/predict-reddit-submission-success/">this R Notebook</a>, including 2D projections of the Embedding layers not in this article. You can also view the images/data used for this post in <a href="https://github.com/minimaxir/predict-reddit-submission-success">this GitHub repository</a>.</em></p>

<p><em>You are free to use the data visualizations/model architectures from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Decline of Imgur on Reddit and the Rise of Reddit's Native Image Hosting]]></title>
    <link href="https://minimaxir.com/2017/06/imgur-decline/"/>
    <updated>2017-06-20T08:00:00-07:00</updated>
    <id>https://minimaxir.com/2017/06/imgur-decline</id>
    <content type="html"><![CDATA[<p>Last week, Bloomberg <a href="https://www.bloomberg.com/news/articles/2017-06-17/reddit-said-to-be-raising-funds-valuing-startup-at-1-7-billion">reported</a> that Reddit was raising about $150 Million in venture capital at a valuation of $1.7 billion. Since Reddit&rsquo;s data is <a href="http://minimaxir.com/2015/10/reddit-bigquery/">public on BigQuery</a>, I quickly checked if there were any recent user engagement growth spurts which could justify such a high worth. Here&rsquo;s an example BigQuery which aggregates the total number of Reddit submissions made for each month until the end of April 2017:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="o">#</span><span class="n">standardSQL</span> 
<span class="k">SELECT</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE</span><span class="p">(</span><span class="n">TIMESTAMP_SECONDS</span><span class="p">(</span><span class="n">created_utc</span><span class="p">)),</span> <span class="k">MONTH</span><span class="p">)</span> <span class="k">as</span> <span class="n">mon</span><span class="p">,</span>
  <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">num_submissions</span><span class="p">,</span>
  <span class="k">FROM</span> <span class="nv">`fh-bigquery.reddit_posts.*`</span>
  <span class="k">WHERE</span> <span class="p">(</span><span class="n">_TABLE_SUFFIX</span> <span class="k">BETWEEN</span> <span class="s1">'2016_01'</span> <span class="k">AND</span> <span class="s1">'2017_04'</span> <span class="k">OR</span> <span class="n">_TABLE_SUFFIX</span> <span class="o">=</span> <span class="s1">'full_corpus_201512'</span><span class="p">)</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">mon</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">mon</span>
</code></pre></div>
<p><img src="/img/imgur-decline/reddit-1.png" alt=""></p>

<p>As it turns out, Reddit did indeed get a large boost in activity toward the end of 2016, likely due to the <em>heated</em> discussions and events around the <a href="https://en.wikipedia.org/wiki/United_States_presidential_election,_2016">U.S. Presidential Election</a>. But Reddit has maintained the growth rate since then, which is very appealing to potential investors.</p>

<p>How are other sites benefiting from Reddit&rsquo;s growth? <a href="http://imgur.com">Imgur</a>, an image-host developed to be the <em>de facto</em> image hosting service for Reddit, shared in Reddit&rsquo;s continual growth&hellip;</p>

<p><img src="/img/imgur-decline/reddit-2.png" alt=""></p>

<p>&hellip;until mid-2016, when Imgur submission activity abruptly dropped. What happened?</p>

<p>Coincidentally in mid-2016, Reddit <a href="https://techcrunch.com/2016/05/25/reddit-image-uploads/">made itself</a> an image host for submissions to the site. Initially limited to uploads via the iOS/Android apps, Reddit then allowed desktop users to upload images through a <a href="https://www.reddit.com/r/changelog/comments/4kuk2j/reddit_change_introducing_image_uploading_beta/">beta rollout</a> starting May 24th, and a full <a href="https://www.reddit.com/r/announcements/comments/4p5dm9/image_hosting_on_reddit/">sitewide release</a> on June 21st.</p>

<p>How many Reddit-hosted image submissions are there compared to the number of Imgur submissions?</p>

<p><img src="/img/imgur-decline/reddit-3.png" alt=""></p>

<p>Wow, native Reddit images caught on.</p>

<h2>Market Share</h2>

<p><img src="/img/imgur-decline/pics.png" alt=""></p>

<p>Did the rise of Reddit-hosted images cause the decline of Imgur on Reddit? Let&rsquo;s look at the daily number of Imgur submissions and Reddit-hosted Image submissions from December 2015 to April 2017, normalized by the total number of sitewide submissions on that day. This gives us a Reddit &ldquo;market share&rdquo; metric for both services. </p>

<p>Additionally, we can plot vertical lines representing the dates when Reddit-hosted images rolled out in the limited beta release and the full sitewide release to see if there is a link between those events and submission behavior.</p>

<p><img src="/img/imgur-decline/reddit-4.png" alt=""></p>

<p>Before Reddit added native image hosting, Imgur accounted for 15% of all submissions to Reddit. Now it&rsquo;s below 9%. More Reddit-hosted images are being shared on Reddit than images from Imgur.</p>

<p>Instead of looking at all of Reddit, where spam subreddits could skew the results, we can also look at the largest image-only subreddits: <a href="https://www.reddit.com/r/pics/">/r/pics</a> and <a href="https://www.reddit.com/r/gifs/">/r/gifs</a>, both of which were a part of the beta rollout.</p>

<p><img src="/img/imgur-decline/reddit-5.png" alt=""></p>

<p>Here, the impact of the two rollouts is much noticeable, with immediate increases in Reddit-hosted image market share after each rollout, and proportional decreases in Imgur market share. The growth rate after the beta release is flat for both services, but when Reddit image hosting becomes sitewide, the market shares of Reddit-hosted/Imgur images increase/decrease linearly over time once users officially learn that the native image upload functionality exists. And these trends do not appear to be slowing down.</p>

<h2>A Silver Lining?</h2>

<p>Obviously Imgur does not like losing a <em>large</em> chunk of traffic, but there&rsquo;s a possibility that this outcome will be better for the business than what&rsquo;s implied from the charts above.</p>

<p>Hosting images on the internet isn&rsquo;t free, and bandwidth costs are the primary reason dedicated image hosts have died off over the years. Direct image links which show the user only the image and nothing else are convenient, but they are pure loss for the service. That&rsquo;s why image hosts encourage linking to the image on a landing page of the website, filled with ads which generate an expected revenue greater than the cost of serving the image.</p>

<p>After a user uploads an image to Imgur on the desktop, the user is given two share links that can be submitted to sites like Reddit: an image link that goes to the image + ads, and a direct link to the image.</p>

<p><img src="/img/imgur-decline/imgur_direct.png" alt=""></p>

<p>Recently, Imgur has <a href="https://www.reddit.com/r/assholedesign/comments/5gs96k/just_show_me_the_fucking_image_imgur/">pushed app downloads</a> when visiting the site on an iOS/Android device, including <a href="https://www.reddit.com/r/assholedesign/comments/695efj/upload_image_on_imgur_mobile_has_been_replaced_by/">disabling uploads</a> in the mobile browser. When sharing an image from the Imgur app, the <em>only</em> way to share an image is through the image link, which could lead to an increase in the proportion of ad-filled Imgur image links on Reddit. Said increase could counteract the decrease in total Imgur submissions, and Imgur could actually come out ahead.</p>

<p>With BigQuery, we can check the percentage of all Imgur submissions to Reddit which are direct links and the percentage which are indirect/lead to a landing page, and see if the ratio changes along the same time horizon used above:</p>

<p><img src="/img/imgur-decline/reddit-6.png" alt=""></p>

<p>Welp. No significant change in the ratio over time, eliminating that possible silver lining.</p>

<h2>Conclusion</h2>

<p>Note that the decline of Imgur on Reddit says nothing about Imgur as a business; it&rsquo;s entirely possible that Imgur&rsquo;s traffic on the main site itself is sufficient for growth. But the loss of Reddit traffic certainly can&rsquo;t be ignored, and it&rsquo;s interesting to visualize how quickly a service can be replaced when there&rsquo;s an equivalent native feature.</p>

<p>It&rsquo;s worth nothing that new competitors in the image space such as <a href="https://giphy.com">Giphy</a> utilize image hosting as a <em>secondary</em> service. Instead, they focus on building a repository of images which can be licensed and accessed programmatically by other services like Slack, Facebook, and Twitter. And Giphy has raised <a href="https://www.crunchbase.com/organization/giphy#/entity">$150 Million</a> total with this approach, so perhaps the image hosting market itself has indeed changed.</p>

<hr>

<p><em>You can view the R, ggplot2 code, and BigQueries used to visualize the Reddit data in <a href="http://minimaxir.com/notebooks/imgur-decline/">this R Notebook</a>. You can also view the images/data used for this post in <a href="https://github.com/minimaxir/imgur-decline">this GitHub repository</a></em>.</p>

<p><em>You are free to use the data visualizations from this article however you wish, but it would be greatly appreciated if proper attribution is given to this article and/or myself!</em></p>
]]></content>
  </entry>
  
</feed>
